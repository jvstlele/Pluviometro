/**
 * Created by anton.milko on 09-Aug-17.
 */

var wl = wl || {};

wl.app.module('oAddDevice', function(oAddDevice, oDeviceApp, Backbone,
  Marionette, $, _) {
  oAddDevice.startWithParent = false;

  var marker;

  var lat = 37.63675;
  var lng = -122.12608;

  var wlipTooltipTranslationKeys = ['wlip_did_tooltip', 'wlip_key_tooltip'];

  var mapOptions = {
    zoom: 5,
    minZoom: 3,
    mapTypeId: google.maps.MapTypeId.TERRAIN,
    streetViewControl: false,
    disableDoubleClickZoom: true,
    draggableCursor: 'default',
    mapTypeControlOptions: {
      position: google.maps.ControlPosition.RIGHT_BOTTOM
    },
    zoomControlOptions: {
      position: google.maps.ControlPosition.RIGHT_CENTER
    }
  };

  // Initializer
  oAddDevice.on('start', function() {
    this.show();
  });

  var WlipActivateModel = Backbone.Model.extend({
    defaults: {
      stationName: '',
      weatherStationId: '',
      stationUse: 1,
      sDid: '',
      key: '',
      lat: lat,
      lng: lng,
      ianaTimeZone: 'America/Los_Angeles',
      countryCode: '114',
      privacy: 1
    }
  });

  oAddDevice.WlSuccessModel = Backbone.Model.extend({
    defaults: {
      sIdentifier: '',
      sDid: '',
      iDid: 0,
      systemId: null
    }
  });

  oAddDevice.VcSuccessModel = oAddDevice.WlSuccessModel.extend({
    defaults: _.extend({}, oAddDevice.WlSuccessModel.prototype.defaults,
      {
        mobile: false,
        billToCompany: false,
        resellerName: null,
        resellerEmail: null,
        upgradesAvailable: null,
        userSubscriptionTerm: null,
        userSubscriptionTier: null,
      }
    )
  });

  var DlActivateModel = Backbone.Model.extend({
    defaults: {
      stationName: '',
      weatherStationId: '',
      stationUse: 1,
      lat: lat,
      lng: lng,
      ianaTimeZone: 'America/Los_Angeles',
      countryCode: '114',
      privacy: 1,
      yearlyRainSeasonStart: 1,
    }
  });

  var ModalLayoutView = Marionette.LayoutView.extend({
    template: _.template('<div class="header-icon"><i class="wl-icon icon-close"></i>' +
      '</div><div id="header"></div><div id="body"><div id="footer"></div>'),
    regions: {
      header: '#header',
      body: '#body',
      footer: '#footer'
    },
    ui: {
      'close': '.icon-close'
    },
    events: {
      'click @ui.close': 'close'
    },
    close: function() {
      oDeviceApp.Modal.hideModal();
    },
    onRender: function() {
      this.renderHomeView();
      this.$el.addClass('centered');
      this.setHeight();
      $(window).on('resize', function() {
        this.setHeight();
      }.bind(this));
    },
    onDestroy: function() {
      $(window).off('resize');
    },
    setHeight: function() {
      var bottomMargin = 0;
      if (this.$el.hasClass('centered')) {
        bottomMargin = 50;
        var topMargin = ($(window).height() - 792) / 2;
        if (topMargin >= 0) {
          this.$el.css('margin-top', topMargin);
        } else {
          this.$el.css('margin-top', 0);
        }
      } else {
        bottomMargin = 170;
      }
      $('.modal-content').css('min-height', this.$el.height() +
        bottomMargin);
    },

    renderHomeView: function () {
      this.showChildView('body', new AddDeviceHomeBodyView());
      this.showChildView('header', new AddDeviceHomeHeaderView());
    },
    renderVcActivationFlow: function() {
      this.showChildView('body', new wl.app.oAddVcFlow.VcInstallFlow());
      this.header.empty();
    },
    renderMigrateDeviceForm: function() {
      this.showChildView('body', new wl.davis.views.MigrateDeviceView());
    },
    renderMigrateDevice: function(data) {
      this.showChildView('body', new wl.davis.views.MigrateDeviceMessageView({
        hideMessage: true
      }));
      this.showChildView('header', new MigrateDeviceHeaderView());
    },
    renderMergeAccountsForm: function(obj, data) {
      this.showChildView('header', new MigrateDeviceHeaderView());
      this.showChildView('body', new wl.davis.views.MergeAccountsView(
        data));
    },
    renderMergeAccountsConfirm: function(obj, data) {
      this.showChildView('header', new MigrateDeviceHeaderView());
      this.showChildView('body', new wl.davis.views.MergeAccountsMessageView({
        'formData': data
      }));
    },
    renderMergeAccountsCompleted: function(obj, data) {
      this.showChildView('header', new MigrateDeviceHeaderView());
      this.showChildView('body', new wl.davis.views.MergeAccountsCompletedView(
        data));
    },
    renderWlipActivation: function(e, data) {
      this.$el.removeClass('centered');
      _canRegisterIPorDLDevice().then(function(obj) {
        if (obj.response) {
          this.showChildView('body', new WlipActivationFormView({
            model: new WlipActivateModel(data)
          }));
          this.showChildView('header', new WlipActivationHeaderView());
          if (data) {
            this.body.$el.find('#submit').prop('disabled', false)
          }
        } else {
          this.renderCannotRegisterIpDl();
        }
      }.bind(this));
    },
    renderWlipSettings: function(obj, data) {
      this.showChildView('body', new WlipSettingsFormView({
        model: new WlipActivateModel(data)
      }));
      this.showChildView('header', new SettingsHeaderView({
        model: new WlipActivateModel(data)
      }));
    },
    renderWlipSuccess: function(data) {
      this.showChildView('body', new WlipActivateSuccessView({
        model: new oAddDevice.WlSuccessModel(data)
      }));
      this.header.$el.find('.header-title').hide();
    },
    renderDlInfo: function() {
      this.$el.removeClass('centered');
      _canRegisterIPorDLDevice().then(function(obj) {
        if (obj.response) {
          this.showChildView('body', new DlInfoView());
          this.$el.find('.header-title, .header-desc').hide();
        } else {
          this.renderCannotRegisterIpDl();
        }
      }.bind(this));
    },
    renderDlActivation: function(e, data) {
      this.showChildView('body', new DlActivationFormView({
        model: new DlActivateModel(data)
      }));
      this.showChildView('header', new DlActivationHeaderView());
      if (data) {
        this.body.$el.find('#submit').prop('disabled', false)
      }
    },
    renderDlSettings: function(e, data) {
      this.showChildView('body', new DlSettingsFormView({
        model: new DlActivateModel(data)
      }));
      this.showChildView('header', new SettingsHeaderView({
        model: new DlActivateModel(data)
      }));
    },
    renderDlDidKey: function(e, data) {
      this.showChildView('body', new DlDidKeyView({
        model: new DlActivateModel(data)
      }));
      this.showChildView('header', new DlDidKeyHeaderView());
    },
    renderDlSuccess: function(data) {
      this.showChildView('body', new dlSuccessView({
        model: new oAddDevice.WlSuccessModel(data)
      }));
      this.header.$el.find('.header-title, .header-desc').hide();
    },
    renderCannotRegisterIpDl: function() {
      this.showChildView('body', new cannotRegisterIpDlView());
      this.$el.find('.header-title, .header-desc').hide();
    },
    renderFeatureTiers: function() {
      this.showChildView('body', new FeatureTiersBodyView());
      this.showChildView('header', new FeatureTiersHeaderView());
    },
    renderServiceAgreement: function(obj, data) {
      this.showChildView('body', new oAddDevice.ServiceAgreementView(data));
      this.showChildView('header', new oAddDevice.ServiceAgreementHeaderView());
    },
    childEvents: {
      'layout:render': function() {
        this.renderHomeView();
      },
      'layout:close': function() {
        this.close();
      },
      'layout:renderMigrateDeviceForm': function() {
        this.renderMigrateDeviceForm();
      },
      'vcActivate:render': function(view, data) {
        this.renderVcActivationFlow(view, data);
      },
      'migrateDevice:render': function(view, data) {
        this.renderMigrateDevice(view, data);
      },
      'mergeAccountsForm:render': function(view, data) {
        this.renderMergeAccountsForm(view, data);
      },
      'mergeAccountsConfirm:render': function(view, data) {
        this.renderMergeAccountsConfirm(view, data);
      },
      'mergeAccountsCompleted:render': function(view, data) {
        this.renderMergeAccountsCompleted(view, data);
      },
      'wlipSettings:render': function(obj, data) {
        this.renderWlipSettings(obj, data);
      },
      'wlipActivate:render': function(view, data) {
        this.renderWlipActivation(view, data);
      },
      'activateWlipSuccess:render': function(view, data) {
        this.renderWlipSuccess(data);
      },
      'dataLoggerInfo:render': function() {
        this.renderDlInfo();
      },
      'dlActivate:render': function(view, data) {
        this.renderDlActivation(view, data);
      },
      'dlSettings:render': function(view, data) {
        this.renderDlSettings(view, data);
      },
      'dlDidKey:render': function(view, data) {
        this.renderDlDidKey(view, data);
      },
      'dlSuccess:render': function(view, data) {
        this.renderDlSuccess(data);
      },
      'featureTiers:render': function() {
        this.renderFeatureTiers();
      },
      'serviceAgreement:render': function (view, data) {
        this.renderServiceAgreement(view, data);
      },
      'modalContent:setHeight': function() {
        _.defer(function() {
          this.setHeight();
        }.bind(this));
      }
    }
  });

  var SettingsHeaderView = Marionette.ItemView.extend({
    template: _.template(
      '<div class="header-icon"><i class="wl-icon icon-close"></i></div>' +
      '<div class="header-title title-sm"><%= stationName %> <span data-l10n-id="location"></span></div>' +
      '<div class="header-desc map-margin" data-l10n-id="click_to_select_location"></div>'
    )
  });

  var AddDeviceHomeHeaderView = Marionette.ItemView.extend({
    template: wl.shared.tpl.addDeviceHomeHeader
  });

  var AddDeviceHomeBodyView = Marionette.ItemView.extend({
    template: wl.shared.tpl.addDeviceHomeBody,
    ui: {
      'migrateDevice': '#migrate-device',
      'mergeAccounts': '#merge-accounts',
      'selectVc': '.select-vc',
      'selectWlip': '.select-wlip',
      'selectDl': '.select-dl',
      'selectWL1': '.select-wl1',
      'selectMerge': '.select-merge'
    },
    events: {
      'click @ui.selectVc': 'triggerRenderVcActivationFlow',
      'click @ui.selectWL1': 'triggerRenderMigrateDevice',
      'click @ui.selectMerge': 'triggerRenderMergeAccountsForm',
      'click @ui.selectWlip': 'triggerRenderWlipActivation',
      'click @ui.selectDl': 'triggerRenderDlInfo'
    },
    templateHelpers: function() {
      return {
        isMigrateOn: wl.__featureFlags["MIGRATE_DEVICE"],
        isMergeOn: wl.__featureFlags["MERGE_USER"]
      }
    },
    onRender: function () {
      if (!wl.__featureFlags["MIGRATE_DEVICE"]) {
        this.ui.migrateDevice.hide();
      }
      if (!wl.__featureFlags["MERGE_USER"]) {
        this.ui.mergeAccounts.hide();
      }
    },
    triggerRenderVcActivationFlow: function () {
      this.triggerMethod('vcActivate:render');
    },
    triggerRenderMigrateDevice: function () {
      this.triggerMethod('migrateDevice:render');
    },
    triggerRenderMergeAccountsForm: function () {
      this.triggerMethod('mergeAccountsForm:render');
    },
    triggerRenderWlipActivation: function () {
      this.triggerMethod('wlipActivate:render');
    },
    triggerRenderDlInfo: function () {
      this.triggerMethod('dataLoggerInfo:render');
    }
  });

  var WlipActivationHeaderView = Marionette.ItemView.extend({
    template: wl.shared.tpl.wlipActivationFormHeader
  });

  var MigrateDeviceHeaderView = Marionette.ItemView.extend({
    template: wl.shared.tpl.migrateDeviceHeader
  });

  var WlipActivationFormView = Marionette.ItemView.extend({
    template: wl.shared.tpl.wlipActivationForm,
    ui: {
      back: '#back',
      submit: '#submit',
      form: '.wlipActivationForm',
      weatherStationId: '#weatherStationId',
      stationUsage: '#station_usage',
      wlip_did_tooltip: '#did-tooltip',
      wlip_key_tooltip: '#key-tooltip',
      device_id: '#device_id'
    },
    events: {
      'click @ui.submit': 'onSubmit',
      'keyup input': 'handleSubmitAvailability',
      'blur input': 'handleSubmitAvailability',
      'paste input': 'handleSubmitAvailability',
      'keyup @ui.device_id': 'toUpperCase',
      'blur @ui.device_id': 'toUpperCase',
      'paste @ui.device_id': 'toUpperCase',
      'selectmenuopen @ui.form select': 'updateScroll',
      'scroll .ui-menu.ui-widget-content': 'updateScroll'
    },
    triggers: {
      'click @ui.back': 'layout:render'
    },
    onRender: function() {
      //define validator
      this.wlipValidator = FORM_VALIDATOR.activateWLIPDevice(this
        .ui.form);
      this.ui.weatherStationId.selectmenu({
        icons: {
          button: "wl-icon icon-caretdown"
        },
        classes: {
          "ui-selectmenu-menu": "addDevice",
          "ui-selectmenu-button": "addDevice"
        }
      });
      this.ui.stationUsage.selectmenu({
        icons: {
          button: "wl-icon icon-caretdown"
        },
        classes: {
          "ui-selectmenu-menu": "addDevice",
          "ui-selectmenu-button": "addDevice"
        }
      });

      $('.addDevice .ui-widget-content').perfectScrollbar({
        suppressScrollX: true
      });
      $('.addDevice .ui-widget-content').scroll(function() {
        this.updateScroll();
      }.bind(this));

      setTimeout(function() {
        this.ui.stationUsage.selectmenu('refresh')
      }.bind(this));

      $.fn.tooltip = $.fn.tooltip.noConflict();
      $(function() {
        $('[data-toggle="tooltip"]').tooltip();
      });
      this.setTooltipTitles();
      oAddDevice.populateWeatherStationsModelsList.call(this, true);
    },
    toUpperCase: function(e) {
      e.target.value = e.target.value.toUpperCase();
    },
    updateScroll: function() {
      $('.ui-selectmenu-menu .ui-widget-content').perfectScrollbar(
        'update');
    },
    handleSubmitAvailability: function() {
      var validFields = 0;
      var arr = this.ui.form.serializeArray();
      this.ui.submit.prop('disabled', 'disabled');
      _.forEach(arr, function(obj) {
        if (obj.value !== "") {
          validFields++;
        }
      });
      if (arr.length === validFields) {
        if (this.wlipValidator.errorList.length === 0) {
          this.ui.submit.prop('disabled', false);
        }
      }
    },
    setTooltipTitles: function() {
      var self = this;
      var promises = [];
      _.each(wlipTooltipTranslationKeys, function(key) {
        var prom = document.l10n.formatValue(key);
        promises.push(prom);
      });
      Promise.all(promises).then(function(values) {
        _.forEach(values, function(value, i) {
          if (self.ui[wlipTooltipTranslationKeys[i]]) {
            self.ui[wlipTooltipTranslationKeys[i]].attr(
              'title',
              '<div class="add-device-tooltip">' +
              values[i] + '</div>');
            self.ui[wlipTooltipTranslationKeys[i]].tooltip();
          }
        });
      });
    },
    onSubmit: function() {
      var self = this;
      //validate form and show next view
      var bValidForm = this.wlipValidator.form();
      var bValidId = this.wlipValidator.element(this.ui.form.find(
        'input[name="sDid"]'));
      var dataArray = this.ui.form.serializeArray();
      _.forEach(dataArray, function(obj) {
        self.model.set(obj.name, obj.value);
      });
      if (bValidForm && bValidId) {
        this.triggerMethod('wlipSettings:render', this.model.attributes);
      }
    }
  });

  var WlipSettingsFormView = Marionette.ItemView.extend({
    template: wl.shared.tpl.wlipSettingsForm,
    ui: {
      'form': '.wlipSettingsForm',
      'back': '#back',
      'submit': '#submit',
      'coords': '#coord-block',
      'lat': '#latitude',
      'lng': '#longitude',
      'timeZone': '#timeZone',
      'country': '#country',
      'address': '#modal-address',
      'hintBar': '.hint-bar',
      'loading': '.loading:not(".loading-error")',
      'loadingErr': '.loading-error',
      'optionsBlock': '#options-block',
      'geosort': 'i.icon-geosort',
      'searchIcon': 'i.icon-search',
      'clearIcon': '.clear-input',
      'retryBtn': '.retry-btn',
      'setManualBtn': '.set-manual-btn',
      'privacy': '#privacy',
      'wl_network_tooltip': '#network-tooltip',
    },
    events: {
      'click @ui.submit': 'onSubmit',
      "click @ui.clearIcon": "clearInput",
      "click @ui.geosort, click @ui.retryBtn": "findUserLocation",
      "click @ui.retryBtn": "findUserLocation",
      "click @ui.setManualBtn": "setManually",
      "input @ui.address": "handleSearchIcon",
      "change @ui.address": "handleSearchIcon",
      "click @ui.back": "returnBack"
    },
    initialize: function() {
      this.lat = this.model.get('lat');
      this.lng = this.model.get('lng');
    },
    onRender: function() {
      $('#modal-config').css('z-index', 999);
      this.wlipValidator = FORM_VALIDATOR.activateWLIPDevice(this
        .ui.form);
      //init selectmenu
      this.ui.form.find('select:not("#country")').selectmenu({
        icons: {
          button: "wl-icon icon-caretdown"
        },
        classes: {
          "ui-selectmenu-menu": "addDevice",
          "ui-selectmenu-button": "addDevice"
        }
      });
      this.ui.country.selectmenu({
        icons: {
          button: "wl-icon icon-caretdown"
        },
        classes: {
          "ui-selectmenu-menu": "addDevice country",
          "ui-selectmenu-button": "addDevice country"
        }
      });
      $('.addDevice .ui-widget-content').perfectScrollbar({
        suppressScrollX: true
      });
      $('.addDevice .ui-widget-content').scroll(function() {
        this.updateScroll();
      }.bind(this));

      this.populateCountriesList();
      setTimeout(function() {
        this.ui.privacy.selectmenu("refresh");
      }.bind(this));

      $.fn.tooltip = $.fn.tooltip.noConflict();
      this.setTooltipTitle();
    },
    onShow: function() {
      var self = this;

      mapOptions.center = new google.maps.LatLng(this.lat, this.lng);
      oGMap = new google.maps.Map(document.getElementById(
        'modal-map-container'), mapOptions);
      var searchInput = document.getElementById('modal-address');
      var coordBlock = document.getElementById('coord-block');
      oGMap.controls[google.maps.ControlPosition.TOP_LEFT].push(
        searchInput);
      oGMap.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(
        coordBlock);

      oAddDevice.initializeAutoComplete(oGMap, this.ui);
      google.maps.event.addListener(oGMap, 'click', function(
        event) {
        oAddDevice.setLatLng(event.latLng.lat(), event.latLng.lng(),
          true,
          false, self.ui);
      });

      this.triggerMethod('modalContent:setHeight');
    },
    // populateTimeZoneList: function() {
    //   var selectEl = this.ui.timeZone;
    //   _.forEach(moment.tz.names(), function(tz) {
    //     selectEl.append('<option>' + tz + '</option>')
    //   })
    // },
    populateCountriesList: function() {
      var selectEl = this.ui.country;
      $.ajax({
        url: '/iris/countries',
        success: function(response) {
          _.forEach(response, function(country) {
            selectEl.append('<option data-code="' +
              country
              .iso2Code + '" value="' + country.countryId +
              '">' + country.countryName +
              '</option>')
          });
          selectEl.selectmenu('refresh');
        }
      })
    },
    findUserLocation: function() {
      var self = this;
      document.l10n.formatValue('searching').then(function(value) {
        self.ui.address.val(value);
      });
      this.ui.loadingErr.hide();
      this.ui.loading.show();
      this.ui.searchIcon.hide();
      this.ui.clearIcon.hide();
      this.ui.hintBar.hide();
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(
          position) {
          var pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };

          oGMap.setCenter(pos);
          var latLng = new google.maps.LatLng(pos.lat, pos.lng);
          oAddDevice.setLatLng(latLng.lat(), latLng.lng(), true, false,
            self.ui);
          self.ui.optionsBlock.hide();
          self.ui.loading.hide();
        }, function() {
          handleLocationError(true);
        });
      } else {
        // Browser doesn't support Geolocation
        handleLocationError(false);
      }

      function handleLocationError(browserHasGeolocation) {
        document.l10n.formatValue('unable_to_locate').then(
          function(
            value) {
            self.ui.address.val(value);
          });
        self.ui.loadingErr.show();
        self.ui.loading.hide();
        self.ui.optionsBlock.show();
        if (!browserHasGeolocation) {
          console.error("browser doesn't support geolocation.");
        }
      }
    },
    setManually: function() {
      this.ui.address.val("");
      this.ui.loadingErr.hide();
      this.ui.searchIcon.show();
      this.ui.optionsBlock.hide();
      this.ui.hintBar.fadeIn(500);
    },
    handleSearchIcon: function(e) {
      this.ui.loadingErr.hide();
      if ($(e.target).val() === "") {
        this.ui.clearIcon.hide();
        this.ui.searchIcon.show();
      } else {
        this.ui.clearIcon.show();
        this.ui.searchIcon.hide();
      }
    },
    clearInput: function() {
      this.ui.address.val("");
      this.ui.address.trigger('change');
    },
    returnBack: function() {
      var self = this;
      _.forEach(this.ui.form.serializeArray(), function(obj) {
        self.model.set(obj.name, obj.value);
      });
      this.triggerMethod('wlipActivate:render', this.model.attributes);
    },
    setTooltipTitle: function() {
      var self = this;
      document.l10n.formatValue('network_tooltip').then(function(
        value) {
        self.ui.wl_network_tooltip.attr('title',
          '<div class="add-device-tooltip">' + value +
          '</div>'
        );
        self.ui.wl_network_tooltip.tooltip();
      })
    },
    onSubmit: function() {
      var self = this;
      var dataArray = this.ui.form.serializeArray();
      _.forEach(dataArray, function(obj) {
        self.model.set(obj.name, obj.value);
      });
      var bValid = this.wlipValidator.form();

      if (bValid) {
        this.triggerMethod('serviceAgreement:render',
          {data: this.model.attributes, deviceType: 'wlip'});
      }
    }
  });

  var WlipActivateSuccessView = Marionette.ItemView.extend({
    initialize: function() {
      this.identifier = this.model.get('sIdentifier');
    },
    template: wl.shared.tpl.wlipActivateSuccess,
    ui: {
      //next: '#next'
      finish: '#finish'
    },
    events: {
      //'click @ui.next': 'featureTiers:render'
      'click @ui.finish': 'reload'
    },
    reload: function() {
      window.location.replace("/bulletin/" + this.identifier);
    }
  });

  var DlInfoView = Marionette.ItemView.extend({
    template: wl.shared.tpl.dlInfo,
    ui: {
      'back': '#back',
      'proceed': '#submit',
      'download': '.dl-download'
    },
    events: {
      'click @ui.proceed': 'renderActivateForm',
      'click @ui.download': 'redirectToSoftware'
    },
    triggers: {
      'click @ui.back': 'layout:render'
    },
    redirectToSoftware: function () {
      sessionStorage.setItem("showAccountSoftware", "true");
      window.location.href = '/account';
    },
    renderActivateForm: function() {
      this.triggerMethod('dlActivate:render');
    }
  });

  var DlActivationFormView = Marionette.ItemView.extend({
    template: wl.shared.tpl.dlActivationForm,
    ui: {
      back: '#back',
      submit: '#submit',
      form: '.dlActivationForm',
      weatherStationId: '#weatherStationId',
      stationUsage: '#station_usage'
    },
    triggers: {
      'click @ui.back': 'dataLoggerInfo:render'
    },
    events: {
      'click @ui.submit': 'onSubmit',
      'keyup input': 'handleSubmitAvailability',
      'blur input': 'handleSubmitAvailability',
      'paste input': 'handleSubmitAvailability',
      'selectmenuopen @ui.form select': 'updateScroll'
    },
    onRender: function() {
      //define validator
      this.dlValidator = FORM_VALIDATOR.activateWLIPDevice(this.ui
        .form); //wlip has all dl fields
      this.ui.weatherStationId.selectmenu({
        icons: {
          button: "wl-icon icon-caretdown"
        },
        classes: {
          "ui-selectmenu-menu": "addDevice",
          "ui-selectmenu-button": "addDevice"
        }
      });
      this.ui.stationUsage.selectmenu({
        icons: {
          button: "wl-icon icon-caretdown"
        },
        classes: {
          "ui-selectmenu-menu": "addDevice",
          "ui-selectmenu-button": "addDevice"
        }
      });

      $('.addDevice .ui-widget-content').perfectScrollbar({
        suppressScrollX: true
      });
      $('.addDevice .ui-widget-content').scroll(function() {
        this.updateScroll();
      }.bind(this));

      setTimeout(function() {
        this.ui.stationUsage.selectmenu('refresh')
      }.bind(this));

      $.fn.tooltip = $.fn.tooltip.noConflict();
      $(function() {
        $('[data-toggle="tooltip"]').tooltip();
      });
      oAddDevice.populateWeatherStationsModelsList.call(this);
    },
    updateScroll: function() {
      $('.ui-selectmenu-menu .ui-widget-content').perfectScrollbar(
        'update');
    },
    handleSubmitAvailability: function() {
      var validFields = 0;
      var arr = this.ui.form.serializeArray();
      this.ui.submit.prop('disabled', 'disabled');
      _.forEach(arr, function(obj) {
        if (obj.value !== "") {
          validFields++;
        }
      });
      if (arr.length === validFields) {
        if (this.dlValidator.errorList.length === 0) {
          this.ui.submit.prop('disabled', false);
        }
      }
    },
    onSubmit: function() {
      var self = this;
      //validate form and show next view
      var bValidForm = this.dlValidator.form();
      var dataArray = this.ui.form.serializeArray();
      _.forEach(dataArray, function(obj) {
        self.model.set(obj.name, obj.value);
      });
      if (bValidForm) {
        this.triggerMethod('dlSettings:render', this.model.attributes);
      }
    }
  });

  var DlActivationHeaderView = Marionette.ItemView.extend({
    template: wl.shared.tpl.dlActivationFormHeader,
  });

  var DlSettingsFormView = Marionette.ItemView.extend({
    template: wl.shared.tpl.dlSettingsForm,
    ui: {
      'form': '.wlipSettingsForm',
      'back': '#back',
      'submit': '#submit',
      'coords': '#coord-block',
      'lat': '#latitude',
      'lng': '#longitude',
      'timeZone': '#timeZone',
      'country': '#country',
      'address': '#modal-address',
      'hintBar': '.hint-bar',
      'loading': '.loading:not(".loading-error")',
      'loadingErr': '.loading-error',
      'optionsBlock': '#options-block',
      'geosort': 'i.icon-geosort',
      'searchIcon': 'i.icon-search',
      'clearIcon': '.clear-input',
      'retryBtn': '.retry-btn',
      'setManualBtn': '.set-manual-btn',
      'privacy': '#privacy',
      'wl_network_tooltip': '#network-tooltip',
    },
    events: {
      'click @ui.submit': 'onSubmit',
      "click @ui.clearIcon": "clearInput",
      "click @ui.geosort, click @ui.retryBtn": "findUserLocation",
      "click @ui.retryBtn": "findUserLocation",
      "click @ui.setManualBtn": "setManually",
      "input @ui.address": "handleSearchIcon",
      "change @ui.address": "handleSearchIcon",
      "click @ui.back": "returnBack"
    },
    initialize: function() {
      this.lat = this.model.get('lat');
      this.lng = this.model.get('lng');
    },
    onRender: function() {
      $('#modal-config').css('z-index', 999);
      this.wlipValidator = FORM_VALIDATOR.activateWLIPDevice(this
        .ui.form);
      //init selectmenu
      this.ui.form.find('select:not("#country")').selectmenu({
        icons: {
          button: "wl-icon icon-caretdown"
        },
        classes: {
          "ui-selectmenu-menu": "addDevice",
          "ui-selectmenu-button": "addDevice"
        }
      });
      this.ui.country.selectmenu({
        icons: {
          button: "wl-icon icon-caretdown"
        },
        classes: {
          "ui-selectmenu-menu": "addDevice country",
          "ui-selectmenu-button": "addDevice country"
        }
      });
      $('.addDevice .ui-widget-content').perfectScrollbar({
        suppressScrollX: true
      });
      $('.addDevice .ui-widget-content').scroll(function() {
        this.updateScroll();
      }.bind(this));

      this.populateCountriesList();
      setTimeout(function() {
        this.ui.privacy.selectmenu("refresh");
      }.bind(this));

      $.fn.tooltip = $.fn.tooltip.noConflict();
      this.setTooltipTitle();
    },
    onShow: function() {
      var self = this;

      mapOptions.center = new google.maps.LatLng(this.lat, this.lng);
      oGMap = new google.maps.Map(document.getElementById(
        'modal-map-container'), mapOptions);
      var searchInput = document.getElementById('modal-address');
      var coordBlock = document.getElementById('coord-block');
      oGMap.controls[google.maps.ControlPosition.TOP_LEFT].push(
        searchInput);
      oGMap.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(
        coordBlock);

      oAddDevice.initializeAutoComplete(oGMap, this.ui);
      google.maps.event.addListener(oGMap, 'click', function(
        event) {
        oAddDevice.setLatLng(event.latLng.lat(), event.latLng.lng(),
          true,
          false, self.ui);
      });
      this.triggerMethod('modalContent:setHeight');
    },
    // populateTimeZoneList: function() {
    //   var selectEl = this.ui.timeZone;
    //   _.forEach(moment.tz.names(), function(tz) {
    //     selectEl.append('<option>' + tz + '</option>')
    //   })
    // },
    populateCountriesList: function() {
      var selectEl = this.ui.country;
      $.ajax({
        url: '/iris/countries',
        success: function(response) {
          _.forEach(response, function(country) {
            selectEl.append('<option data-code="' +
              country
              .iso2Code + '" value="' + country.countryId +
              '">' + country.countryName +
              '</option>')
          });
          selectEl.selectmenu('refresh');
        }
      })
    },
    findUserLocation: function() {
      var self = this;
      document.l10n.formatValue('searching').then(function(value) {
        self.ui.address.val(value);
      });
      this.ui.loadingErr.hide();
      this.ui.loading.show();
      this.ui.searchIcon.hide();
      this.ui.clearIcon.hide();
      this.ui.hintBar.hide();
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(
          position) {
          var pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };

          oGMap.setCenter(pos);
          var latLng = new google.maps.LatLng(pos.lat, pos.lng);
          oAddDevice.setLatLng(latLng.lat(), latLng.lng(), true, false,
            self.ui);
          self.ui.optionsBlock.hide();
          self.ui.loading.hide();
        }, function() {
          handleLocationError(true);
        });
      } else {
        // Browser doesn't support Geolocation
        handleLocationError(false);
      }

      function handleLocationError(browserHasGeolocation) {
        document.l10n.formatValue('unable_to_locate').then(
          function(
            value) {
            self.ui.address.val(value);
          });
        self.ui.loadingErr.show();
        self.ui.loading.hide();
        self.ui.optionsBlock.show();
        if (!browserHasGeolocation) {
          console.error("browser doesn't support geolocation.");
        }
      }
    },
    setManually: function() {
      this.ui.address.val("");
      this.ui.loadingErr.hide();
      this.ui.searchIcon.show();
      this.ui.optionsBlock.hide();
      this.ui.hintBar.fadeIn(500);
    },
    handleSearchIcon: function(e) {
      this.ui.loadingErr.hide();
      if ($(e.target).val() === "") {
        this.ui.clearIcon.hide();
        this.ui.searchIcon.show();
      } else {
        this.ui.clearIcon.show();
        this.ui.searchIcon.hide();
      }
    },
    clearInput: function() {
      this.ui.address.val("");
      this.ui.address.trigger('change');
    },
    returnBack: function() {
      var self = this;
      _.forEach(this.ui.form.serializeArray(), function(obj) {
        self.model.set(obj.name, obj.value);
      });
      this.triggerMethod('dlActivate:render', this.model.attributes);
    },
    setTooltipTitle: function() {
      var self = this;
      document.l10n.formatValue('network_tooltip').then(function(
        value) {
        self.ui.wl_network_tooltip.attr('title',
          '<div class="add-device-tooltip">' + value +
          '</div>'
        );
        self.ui.wl_network_tooltip.tooltip();
      })
    },
    onSubmit: function() {
      var self = this;
      var dataArray = this.ui.form.serializeArray();
      _.forEach(dataArray, function(obj) {
        self.model.set(obj.name, obj.value);
      });
      var bValid = this.wlipValidator.form();

      if (bValid) {
        this.triggerMethod('serviceAgreement:render',
          {data: this.model.attributes, deviceType: 'dl'});
      }
    }
  });

  var DlDidKeyView = Marionette.ItemView.extend({
    template: wl.shared.tpl.dlDidKey,
    ui: {
      next: '#submit',
      did: '#did',
      key: '#key',
      copyDid: '#copy-did',
      copyKey: '#copy-key'
    },
    initialize: function() {
      this.identifier = this.options.model.get('id');
    },
    events: {
      'click @ui.copyDid': 'copyDid',
      'click @ui.copyKey': 'copyKey',
      'click @ui.next': 'onSubmit'
    },
    copyDid: function() {
      this.ui.did.get(0).select();
      document.execCommand('copy');
    },
    copyKey: function() {
      this.ui.key.get(0).select();
      document.execCommand('copy');
    },
    onSubmit: function() {
      this.triggerMethod('dlSuccess:render', {
        sIdentifier: this.identifier
      });
    }
  });

  var DlDidKeyHeaderView = Marionette.ItemView.extend({
    template: wl.shared.tpl.dlDidKeyHeader
  });

  var dlSuccessView = Marionette.ItemView.extend({
    template: wl.shared.tpl.dlActivateSuccess,
    ui: {
      finish: '#finish'
    },
    events: {
      'click @ui.finish': 'reload'
    },
    initialize: function() {
      this.identifier = this.options.model.get('sIdentifier');
    },
    reload: function() {
      window.location.replace("/bulletin/" + this.identifier);
    }
  });

  oAddDevice.ServiceAgreementView = Marionette.ItemView.extend({
    template: wl.shared.tpl.serviceAgreementView,
    ui: {
      'submit': '#submit',
      'loadingIcon': '.loading-icon',
      'errorBlock': '.error-block',
      'disagree': '#back',
      'scrollContainer': '.scroll-container',
      'docName': '.doc-header',
      'lastUpd': '.last-upd'
    },
    events: {
      'click @ui.submit': 'onClickAgree',
      'click @ui.disagree': 'onClickDisagree'
    },
    onRender: function () {
      this.ui.scrollContainer.perfectScrollbar();
      this.showServiceAgreement();
    },
    getDocHeader: function (response) {
      //extract doc header and last upd info
      //and place it outside of scroll container
      var $html = $(response);
      this.ui.docName.html($html.find('.document-name').remove());
      this.ui.lastUpd.html($html.find('.last-updated').remove());
      this.ui.scrollContainer.html($html);
      this.ui.scrollContainer.perfectScrollbar('update');
    },
    showServiceAgreement: function () {
      $.get('/policy/ServiceAgreement/en', null, function (response) {
        this.getDocHeader(response);
      }.bind(this));
    },
    activateWlip: function (attributes) {
      var self = this;
      if (!$(self).data('pending')) {
        $(self).data('pending', true);
        $.ajax({
          type: 'POST',
          url: '/iris/activateIP',
          data: attributes,
          success: function (response) {
            if (response.data) {
              self.triggerMethod(
                'activateWlipSuccess:render',
                response.data);
            } else if (response.error) {
              console.log(response.error.errorMessage);
            }
          },
          error: function (error) {
            console.log(error);
          },
          complete: function () {
            $(self).data('pending', false);
          }
        });
      }
    },
    activateDl: function (attributes) {
      var self = this;
      if (!$(self).data('pending')) {
        $(self).data('pending', true);
        $.ajax({
          type: 'POST',
          url: '/iris/activateDL',
          data: attributes,
          success: function (response) {
            if (response.data) {
              self.triggerMethod('dlDidKey:render',
                response.data);
            } else if (response.error) {
              console.log(response.error.errorMessage);
            }
          },
          error: function (error) {
            console.log(error);
          },
          complete: function () {
            $(self).data('pending', false);
          }
        });
      }
    },
    onClickAgree: function () {
      switch(this.options.deviceType) {
        case 'wlip':
          this.activateWlip(this.options.data);
          break;
        case 'VC':
          this.triggerMethod('agreementVcPass:render', this.options);
          break;
        case 'dl':
          this.activateDl(this.options.data);
          break;
      }
    },
    onClickDisagree: function () {
      oDeviceApp.Modal.hideModal();
    }
  });

  oAddDevice.ServiceAgreementHeaderView = Marionette.ItemView.extend({
    template: wl.shared.tpl.serviceAgreementHeaderView
  });

  var cannotRegisterIpDlView = Marionette.ItemView.extend({
    template: wl.shared.tpl.cannotRegisterIpDl,
    ui: {
      'back': '#back'
    },
    onShow: function() {
      this.triggerMethod('modalContent:setHeight');
    },
    triggers: {
      'click @ui.back': 'layout:render'
    }
  });

  var FeatureTiersBodyView = Marionette.ItemView.extend({
    template: wl.shared.tpl.featureTiersBody,
  });

  var FeatureTiersHeaderView = Marionette.ItemView.extend({
    template: wl.shared.tpl.featureTiersHeader
  });

  //public functions
  oAddDevice.setElevation = function(input, latitude, longitude) {
    var data = {
      lat: latitude,
      lng: longitude
    };
    $.post('/iris/elevation', data,
      function(response) {
        input.val(response.data);
      });
  };

  oAddDevice.initializeAutoComplete = function(map, ui) {
    var input = document.getElementById('modal-address');
    var autocomplete = new google.maps.places.Autocomplete(input, {
      types:['address']
    });
    autocomplete.bindTo('bounds', map);

    autocomplete.addListener('place_changed',
    function() {
        var place = autocomplete.getPlace();
        input.value = place.formatted_address;

        if (!place.geometry) {
          return;
        }

        // If the place has a geometry, then present it on a map.
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          map.setCenter(place.geometry.location);
          map.setZoom(17);
        }
        _placeMarker(place.geometry.location, oGMap, ui);
        _setCountrySelected(place, ui.country);
      });
  };

  oAddDevice.setLatLng = function(lat, lng, bPlaceMarker, bSetZoom, ui) {
    ui.lat.val(lat);
    ui.lng.val(lng);
    var latLng = new google.maps.LatLng(lat, lng);
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({
      location: latLng
    }, function(results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        if (bPlaceMarker !== false) {
          var place = results.find(function(res) {
            return res.types.indexOf('country') !== -1}
          );
          _placeMarker(latLng, oGMap, ui);
          _setCountrySelected(place || results[0], ui.country);
        }
        if (bSetZoom !== false) {
          oGMap.setZoom(13);
        }
        if (bPlaceMarker === undefined && bSetZoom === undefined) {
          oGMap.setCenter(results[0].geometry.location);
        }
        if (bPlaceMarker === false) {
          _setCountrySelected(results[0], ui.country);
        }
        ui.address.val(results[0].formatted_address);
        ui.address.trigger('change');
        ui.hintBar.fadeOut(500);
        ui.optionsBlock.hide();
        ui.loadingErr.hide();
        ui.loading.hide();
      }
    });
  };

  oAddDevice.populateWeatherStationsModelsList = function(isWLIP) {
    var self = this;
    var modelsList = this.ui.weatherStationId;
    _getWeatherStations().then(function(response) {
      if (response.data) {
        var sortedList = _.sortBy(response.data, 'sproductname');
        _.forEach(sortedList, function(model, i) {
          //exclude rain collector from list
          if (model.isensortypeid !== 32 || !isWLIP) {
            var option = $('<option></option>');
            option.attr('value', model.isensortypeid);
            option.attr('data-num', model.sproductnum);
            option.html(model.sproductname);
            if (wl.app.deviceConfiguration && wl.app.deviceConfiguration.devicePorts) {
              var devicePorts = wl.app.deviceConfiguration.devicePorts;
              if (devicePorts[0] && devicePorts[0].sensorTypeId ===
                model.isensortypeid) {
                option.attr('selected', 'selected');
              }
            } else if (model.sproductname === 'Vantage Vue') {
              option.attr('selected', 'selected');
            }
            modelsList.append(option);
          }
        });
        modelsList.selectmenu('refresh');
      }
    });
  };

  //private functions
  function _placeMarker(location, map, ui) {
    var formattedLat = _formatDecimal(location.lat(), 5);
    var formattedLng = _formatDecimal(location.lng(), 5);
    //remove previous
    if (marker) {
      marker.setMap(null);
    }
    marker = new google.maps.Marker({
      position: location,
      map: map,
      draggable: true,
      icon: {
        url: "/static/img/locationpin.svg",
        scaledSize: new google.maps.Size(40, 40),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(21, 36)
      }
    });

    google.maps.event.addListener(marker, 'dragend', function(event) {
      var formattedEventLat = _formatDecimal(event.latLng.lat(), 5);
      var formattedEventLng = _formatDecimal(event.latLng.lng(), 5);
      ui.lat.val(formattedEventLat);
      ui.lng.val(formattedEventLng);
      ui.coords.html(_convertLatLngToDDstr(formattedEventLat,
        formattedEventLng));
      oAddDevice.setLatLng(event.latLng.lat(), event.latLng.lng(), false,
        false,
        ui);
      if (ui.elevation) {
        oAddDevice.setElevation(ui.elevation, event.latLng.lat(), event.latLng.lng());
      }
      _getTimeZoneByCoords(formattedEventLat, formattedEventLng,
        dayjs()
        .unix()).then(function(response) {
        if (response) {
          ui.timeZone.val(response);
        }
      });
    });
    _getTimeZoneByCoords(formattedLat, formattedLng, dayjs().unix()).then(
      function(response) {
        if (response) {
          ui.timeZone.val(response);
        }
      });
    ui.lat.val(formattedLat);
    ui.lng.val(formattedLng);
    ui.coords.html(_convertLatLngToDDstr(formattedLat, formattedLng));
    ui.submit.removeAttr('disabled');
  }

  function _getTimeZoneByCoords(lat, lng, timestamp) {
    var d = $.Deferred();
    $.ajax({
      url: '/google/timezone?location=' +
        lat + ',' + lng + '&timestamp=' + timestamp + '&key=' + wl.__javaScriptKey,
      success: function(response) {
        d.resolve(response);
      }
    });
    return d.promise();
  }

  function _getWeatherStations() {
    var d = $.Deferred();
    $.ajax({
      url: '/iris/weatherStations',
      success: function(response) {
        d.resolve(response);
      }
    });
    return d.promise();
  }

  function _canRegisterIPorDLDevice() {
    var d = $.Deferred();
    $.ajax({
      url: '/iris/canRegisterIPorDLDevice',
      success: function(response) {
        d.resolve(response);
      }
    });
    return d.promise();
  }

  function _setCountrySelected(place, selectEl) {
    if (place.address_components) {
      var filtered_array = place.address_components.filter(function(
        address_component) {
        return address_component.types.includes("country");
      });
      if (filtered_array.length) {
        var shortName = filtered_array[0].short_name;
        var countryValue = selectEl.find('option[data-code="' + shortName + '"]').val();
        selectEl.val(countryValue).selectmenu('refresh');
      }
    }
  }

  function _convertLatLngToDDstr(lat, lng) {
    var latDirection = lat < 0 ? "S" : "N";
    var lngDirection = lng < 0 ? "W" : "E";

    var latStr = Math.abs(lat) + "&deg; " + latDirection;
    var lngStr = Math.abs(lng) + "&deg; " + lngDirection;

    return latStr + ", " + lngStr;
  }

  function _formatDecimal(number, precision) {
    return Number(number.toFixed(precision));
  }

  oAddDevice.show = function() {
    oModalBodyView = new ModalLayoutView();
    oModalFooterView = new Marionette.ItemView({
      template: false
    });
    oDeviceApp.Modal.showStandardModal('', oModalBodyView,
      oModalFooterView, 'add-device');
  };
});
