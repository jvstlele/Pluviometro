/**
 * Backbone Model defintions for Bulletin App
 * 
 * @author Nicholas Funnell <nickf@davisnet.com>
 * @since 2014-10-13
 */

window.wl = window.wl || {};
window.wl.models = {};

/**
 * Represent a Davis Weather Station
 */
wl.models.SystemModel = Backbone.Model.extend({
	idAttribute: 'iSystemId',
	defaults: {
		iSystemId: 0,
		iDid: 0,
		iOwnerId: 0,
		sSystemName: 'Default Station',
		sOwnerUsername: 'Default User',
		iRainCupSize: wl.constants.rainCupSize.inch_001,
		aSensors: []
	}
});

/**
 * A PortletConfig object is created for every portlet that can be displayed.
 * It holds information on the settings, postion, size, type, and name of a portlet
 */
wl.models.PortletConfig = Backbone.Model.extend({
	idAttribute: 'iPortletSettingId', //ks notes: this is the backbone id used when the id for this model is used.
	defaults: {
		//KS Notes : urlroot is a backbone property. 
		sType: false,
		iGridWidth: 1,
		iGridHeight: 1,
		iPosition: 0,
		iVisible: true,
		sTileCid: '',			//This is the auto generated cid when a portlet is added.
	},
	urlRoot: function () {
		//KS Notes : urlroot is a backbone property.
		//KS Notes: /aa/bb/ is just dummy names to sent to resource. The resource mainly just uses the iPortletSettingId to save.
		return '/bulletin/savePortlet' //aa/bb
	},
	getType: function () {
		//ks notes : type is the sType from tbl_portlet_types
		var oType = wl.data.portletTypes.get(this.get('sType'));
		if (!oType) {
			throw new Error("Portlet config can not find its type!", this.id);
		}
		return oType;
	},
	hasView: function (sView) {
		var oType = this.getType();
		if (!oType) {
			return false;
		}
		var aAvailable = oType.get('oAvailableViews');
		if (aAvailable[sView]) {
			return true;
		}
		return false;
	},
	// @Override
	save: function() {
		var fnSave = Backbone.Model.prototype.save;
		//ks notes: logic to determine whehte ro tsave based on user logged in.
		if (wl.data.user.id === -1) {
			// do not save
			return;
		} else {
			// save!
			//ks notes: Backbone save function
			var args = Array.prototype.slice.call(arguments);
			fnSave.apply(this, args);

		}
	}
	/*
	save: function (attrs, options) {
		options = options || {};
		var aSkip = ['sType', 'iAvailable'];
		if (this.id === -1) {
			// do not save the "show hidden" portlet
			return;
		}
		var fnSave = Backbone.Model.prototype.save;
		var oClone = _.clone(this.attributes);
		for ( var i in aSkip ) {
			console.log("remove attr", aSkip[i]);
			delete oClone[ aSkip[i] ];
		}
		console.log("result", oClone);
		options.data = JSON.stringify(oClone);
		options.contentType = 'application/json';
		return fnSave.call(this, this.attributes, options);
	}
	*/
});

/**
 * A PortletConfig object is created for every portlet that can be displayed.
 * It holds information on the settings, postion, size, type, and name of a portlet
 */
wl.models.TilePanel = Backbone.Model.extend({
	idAttribute: 'iTilePanelId', //ks notes: this is the backbone id used when the id for this model is used.
	defaults: {


	},
	urlRoot: function () {
		//KS Notes : urlroot is a backbone property.
		//KS Notes: /aa/bb/ is just dummy names to sent to resource. The resource mainly just uses the iPortletSettingId to save.
		return '/aa/bb/bulletin/portlet';
	},
	getType: function () {
//		//ks notes : type is the sType from tbl_portlet_types
//		var oType = wl.data.portletTypes.get(this.get('sType'));
//		if (!oType) {
//			throw new Error("Portlet config can not find its type!", this.id);
//		}
//		return oType;
	},
	hasView: function (sView) {
//		var oType = this.getType();
//		if (!oType) {
//			return false;
//		}
//		var aAvailable = oType.get('oAvailableViews');
//		if (aAvailable[sView]) {
//			return true;
//		}
//		return false;
	},
	// @Override
	save: function() {
		var fnSave = Backbone.Model.prototype.save;
		//ks notes: logic to determine whehte ro tsave based on user logged in.
		if (wl.data.user.id === -1) {
			// do not save
			return;
		} else {
			// save!
			//ks notes: Backbone save function
			var args = Array.prototype.slice.call(arguments);
			fnSave.apply(this, args);
		}
	}
	/*
	save: function (attrs, options) {
		options = options || {};
		var aSkip = ['sType', 'iAvailable'];
		if (this.id === -1) {
			// do not save the "show hidden" portlet
			return;
		}
		var fnSave = Backbone.Model.prototype.save;
		var oClone = _.clone(this.attributes);
		for ( var i in aSkip ) {
			console.log("remove attr", aSkip[i]);
			delete oClone[ aSkip[i] ];
		}
		console.log("result", oClone);
		options.data = JSON.stringify(oClone);
		options.contentType = 'application/json';
		return fnSave.call(this, this.attributes, options);
	}
	*/
});


/**
 * A PortletType defines the basic settings and parameters of a type of portlet.
 * It also contains the code to decide which 
 */
wl.models.PortletType = Backbone.Model.extend({
	idAttribute: 'sType',
	defaults: {
		iPortletTypeId: -999,
		sType: 'default',
		iGridWidth: 1,
		iGridHeight: 1,
		sDefaultView: 'main',
		oAvailableViews: {
			'main': 'xxx_main'
		},
		aSensors: ['sensor_name']
	},
	supportsSystem: function(oStation) {
		// Ks notes: deteremine whehter station supports the portlets
		var aSensors = this.get('aSensors');
		var aStationSensors = oStation.get('aSensors');
		for (var i in aSensors) {
			if (_.indexOf(aStationSensors, aSensors[i], true) === -1) {
				// does not support sensor
				return false;
			}
		}
		return true;
	}
});

wl.models.UserColor = Backbone.Model.extend({
	idAttribute: 'iSensorTypeId',
	defaults: {
		iUserId: -1,
		sColor: '#ffffff'
	}
});

wl.models.User = Backbone.Model.extend({
	idAttribute: 'iUserId'
});
