/**
 * Created by anton.milko on 03-Sep-18.
 */
var contentsViews = wl.app.Dashboard.oContentsViews;
var DASH_VALUE = "--";

/*************************************
 * WW - Inside Temp/Hum
 *************************************/
contentsViews.structure_type_501_inside_temp_hum_graph = contentsViews.inside_temp_hum_graph.extend({
    getStructure: function () {
        return wl.constants.structureType501FieldName;
    },
    getSeries: function () {
        this.conStructure = this.getStructure();
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);

        var dTemp = null;
        var dHum = null;

        if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
            if (Utils.dashFilterCheck("d_temp_in", this.portletSensorData[this.conStructure.temp])) {
                dTemp = this.portletSensorData[this.conStructure.temp];
            }

            if (Utils.dashFilterCheck("i_hum_in", this.portletSensorData[this.conStructure.hum])) {
                dHum = this.portletSensorData[this.conStructure.hum];
            }
        }

        var threshold = 0;
        if (dTemp < 0) {
            this.oChartOptions.yAxis.min = Math.floor(dTemp / 5) * 5;
            threshold = this.oChart ? this.oChart.yAxis[0].min : wl.app.Dashboard.getThresholdForNegativeVal(dTemp);
        }

        return [
            {
                id: 'temp',
                yAxis: 0,               //Map to to yAxis Label index.
                data: [wl.app.Dashboard.createHighChartDataPoint(this.lsid + '_temp', " ", dTemp, "#f0c619"), {
                    y: 0,
                    id: '',
                    color: 'transparent'
                }],
                threshold: threshold
            },
            {
                id: 'hum',
                yAxis: 1,                //Map to to yAxis Label index.
                data: [{
                    y: 0,
                    id: '',
                    color: 'transparent'
                }, wl.app.Dashboard.createHighChartDataPoint(this.lsid + '_hum', " ", dHum, "#c42728")]
            }];
    },
    _getTooltip: function (oHcData) {
        var oTplData = {
            tooltip_text: 'tooltip_value_unit'
        };
        
        var sTempVal = DASH_VALUE;
        var sTempHiVal = DASH_VALUE;
        var sTempLowVal = DASH_VALUE;
        var sHumVal = DASH_VALUE;
        var sHumHiVal = DASH_VALUE;
        var sHumLowVal = DASH_VALUE;
        
        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.temp])) {
            sTempVal = this.portletSensorData[this.conStructure.temp];
        }
        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.temp_high])) {
            sTempHiVal = this.portletSensorData[this.conStructure.temp_high];
        }
        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.temp_low])) {
            sTempLowVal = this.portletSensorData[this.conStructure.temp_low];
        }
        
        if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.hum])) {
            sHumVal = this.portletSensorData[this.conStructure.hum];
        }
        if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.hum_high])) {
            sHumHiVal = this.portletSensorData[this.conStructure.hum_high];
        }
        if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.hum_low])) {
            sHumLowVal = this.portletSensorData[this.conStructure.hum_low];
        }

        switch (oHcData.point.id) {
            case this.lsid + '_temp':
                oTplData.unit = wl.data.unitLabelTemperature;
                oTplData.name = "Temperature";
                oTplData.current_value = Utils.formatSensorReading('Temperature', sTempVal, wl.data.userAccountSetting);
                oTplData.hi_value = Utils.formatSensorReading('Temperature', sTempHiVal, wl.data.userAccountSetting);
                oTplData.low_value = Utils.formatSensorReading('Temperature', sTempLowVal, wl.data.userAccountSetting);
                break;
            case this.lsid + '_hum':
                oTplData.unit = wl.data.unitLabelPercent;
                oTplData.name = "Humidity";
                oTplData.current_value = Utils.formatSensorReading('Humidity', sHumVal, wl.data.userAccountSetting);
                oTplData.hi_value = Utils.formatSensorReading('Humidity', sHumHiVal, wl.data.userAccountSetting);
                oTplData.low_value = Utils.formatSensorReading('Humidity', sHumLowVal, wl.data.userAccountSetting);
                break;
            default:
                return false;
        }
        return window.tpl['tooltip-hilow-single'](oTplData);
    }
});


/*************************************
 * WW - Temperature (temp only)
 *************************************/
contentsViews.structure_type_502_graph = contentsViews.structure_type_71_temp_graph.extend({
    getStructure: function () {
        return wl.constants.structureType502FieldName;
    },
    getTempVal: function () {
        return this.getStructure()['temp'];
    }
});

/*************************************
 * WW - Temperature
 *************************************/
contentsViews.structure_type_503_temp_graph = contentsViews.temperature_graph.extend({
    getStructure: function () {
        return wl.constants.structureType503FieldName;
    },
    getSeries: function () {
        //Get the structure and data and save it into this context.
        this.conStructure = this.getStructure();
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);
        var iTempOutVal = null;
        var iWindChillVal = null;
        var iHeatIndexVal = null;
        var iDewPointVal = null;
        var iWetBulbVal = null;
        if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
            iTempOutVal = this.portletSensorData[this.conStructure.temp];
            iWindChillVal = this.portletSensorData[this.conStructure.wind_chill];
            iHeatIndexVal = this.portletSensorData[this.conStructure.heat_index];
            iDewPointVal = this.portletSensorData[this.conStructure.dew_point];
            iWetBulbVal = this.portletSensorData[this.conStructure.wet_bulb];
        } else if (wl.app.oMapper.checkOutdatedData(this.lsid)) {
            this.oChartOptions.yAxis.min = 0;
            this.oChartOptions.yAxis.max = 100;
        }
        var arrData = [
            wl.app.Dashboard.createHighChartDataPoint('sensor_temp_out', this.categoryLabels['sensor_temp_out'], iTempOutVal, '#c42728'),
            wl.app.Dashboard.createHighChartDataPoint('sensor_temp_heat', this.categoryLabels['sensor_temp_heat'], iHeatIndexVal, '#e97f24'),
            wl.app.Dashboard.createHighChartDataPoint('sensor_temp_dew', this.categoryLabels['sensor_temp_dew'], iDewPointVal, '#38916d'),
            wl.app.Dashboard.createHighChartDataPoint('sensor_wet_bulb', this.categoryLabels['sensor_wet_bulb'], iWetBulbVal, '#55a8cc')
        ];

        if (iWindChillVal != null) {
            arrData.splice(1, 0, wl.app.Dashboard.createHighChartDataPoint('sensor_temp_chill', this.categoryLabels['sensor_temp_chill'], iWindChillVal, '#3288c2'));
        }

        if (_.every(arrData, {y: 0}) && this.oChart.yAxis) {
            this.oChart.yAxis[0].setExtremes(0, 5);
        }

        var minVal = this.getMinVal(arrData);
        var threshold = 0;
        if (minVal < 0) {
            this.oChartOptions.yAxis.min = Math.floor(minVal / 5) * 5;
            threshold = this.oChart ? this.oChart.yAxis[0].min : wl.app.Dashboard.getThresholdForNegativeVal(minVal);
        }

        return [{
            id: 'temp',
            name: 'temperature',
            colorByPoint: true,
            data: arrData,
            threshold: threshold
        }];
    },
    _getTooltip: function (oData) {
        var oTplData = {
            unit: this.model.get('unit'),
            tooltip_text: 'tooltip_value_unit',
            name: oData.key,
            current_value: this.formatTemp(oData.y)
        };

        var sTempOutHiVal = DASH_VALUE;
        var sTempOutLowVal = DASH_VALUE;
        var sWindChillLowVal = DASH_VALUE;
        var sHeatIndexHiVal = DASH_VALUE;
        var sDewPointHiVal = DASH_VALUE;
        var sDewPointLowVal = DASH_VALUE;
        var sWetBulbLowVal = DASH_VALUE;

        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.temp_high])) {
            sTempOutHiVal = this.portletSensorData[this.conStructure.temp_high];
        }
        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.temp_low])) {
            sTempOutLowVal = this.portletSensorData[this.conStructure.temp_low];
        }
        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.wind_chill_low])) {
            sWindChillLowVal = this.portletSensorData[this.conStructure.wind_chill_low];
        }
        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.heat_index_high])) {
            sHeatIndexHiVal = this.portletSensorData[this.conStructure.heat_index_high];
        }
        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.dew_point_high])) {
            sDewPointHiVal = this.portletSensorData[this.conStructure.dew_point_high];
        }
        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.dew_point_low])) {
            sDewPointLowVal = this.portletSensorData[this.conStructure.dew_point_low];
        }
        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.wet_bulb_low])) {
            sWetBulbLowVal = this.portletSensorData[this.conStructure.wet_bulb_low];
        }

        switch (oData.point.id) {
            case 'sensor_temp_out':
                oTplData.hi_value = this.formatTemp(sTempOutHiVal);
                oTplData.low_value = this.formatTemp(sTempOutLowVal);
                break;
            case 'sensor_temp_chill':
                oTplData.low_value = this.formatTemp(sWindChillLowVal);
                break;
            case 'sensor_temp_heat':
                oTplData.hi_value = this.formatTemp(sHeatIndexHiVal);
                break;
            case 'sensor_temp_dew':
                oTplData.hi_value = this.formatTemp(sDewPointHiVal);
                oTplData.low_value = this.formatTemp(sDewPointLowVal);
                break;
            case 'sensor_wet_bulb':
                oTplData.low_value = this.formatTemp(sWetBulbLowVal);
                break;
        }
        return window.tpl['tooltip-hilow-single'](oTplData);
    }
});

/************************
 * WW - Humidity
 ************************/
contentsViews.structure_type_503_hum_graph = contentsViews.humidity_graph.extend({
    getStructure: function () {
        return wl.constants.structureType503FieldName;
    },
    getSeries: function () {
        var sData = DASH_VALUE;
        this.conStructure = this.getStructure();
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);
        if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.hum]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            sData = this.portletSensorData[this.conStructure.hum];
            this.maxDialVal = Utils.slidingScaleMax(sData);
        }
        return [{
            id: 'humidity',
            name: [this.options.current],
            data: [sData],
            color: this.color,
            dataLabels: {
                style: {
                    fontWeight: 'normal'
                },
                y: 32,
                format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' + Utils.formatSensorReading("Humidity", sData, wl.data.userAccountSetting) + '</span><br/>'
                + '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' + this.model.get('unit') + '</span></div>'
            }
        }];
    },
    _getTooltip: function () {
        var oTplData = {
            tooltip_text: 'tooltip_value_unit',
            unit: this.model.get('unit')
        };

        var currentVal = DASH_VALUE;
        if (!wl.app.oMapper.checkOutdatedData(this.lsid) && !wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.hum])) {
            currentVal = this.portletSensorData[this.conStructure.hum];
        }

        var highVal = DASH_VALUE;
        var lowVal = DASH_VALUE;
        if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
            if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.hum_high])) {
                highVal = this.portletSensorData[this.conStructure.hum_high];
            }
            if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.hum_low])) {
                lowVal = this.portletSensorData[this.conStructure.hum_low];
            }
        }
        oTplData.current_value = Utils.formatSensorReading('Humidity', currentVal, wl.data.userAccountSetting);
        oTplData.hi_value = Utils.formatSensorReading('Humidity', highVal, wl.data.userAccountSetting);
        oTplData.low_value = Utils.formatSensorReading('Humidity', lowVal, wl.data.userAccountSetting);

        return window.tpl['tooltip-hilow-single'](oTplData);
    }
});


/******************************
 * WW - Rain Total
 ******************************/
contentsViews.structure_type_504_rain_total_graph = contentsViews.structure_type_17_rain_graph.extend({
    getSeries: function () {
        //Execute the get data function
        this.portletSensorData = this.findPortletSensorData();

        var dTotalForMonth = null;
        var dTotalForYear = null;
        if (this.portletSensorData) {
            dTotalForMonth = this.portletSensorData.totalForMonth.convertedVal;
            dTotalForYear = this.portletSensorData.totalForYear.convertedVal;
        }

        if (dTotalForMonth === 0 && dTotalForYear === 0) {
            this.oChartOptions.yAxis.min = 0;
            this.oChartOptions.yAxis.max = 1;
        }

        return [
            {
                id: 'rain',
                yAxis: 0,
                data: [
                    wl.app.Dashboard.createHighChartDataPoint(this.lsid + '_total_rain_month', "Month", dTotalForMonth, "#29b574"),
                    wl.app.Dashboard.createHighChartDataPoint(this.lsid + '_total_rain_year', "Year", dTotalForYear, "#3288c2")
                ]
            }];
    }
});

/***********************
 * WW - Current Rain
 ***********************/
contentsViews.structure_type_504_rain_current_graph = contentsViews.rain_current_graph.extend({
    getStructure: function () {
        return wl.constants.structureType504FieldName;
    },
    getSeries: function () {
        this.conStructure = this.getStructure();
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);

        var iRainDayVal = null;
        var iRainStormVal = null;
        var iRainRateVal = null;
        if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
            var totalRainData = _.find(wl.data.totalRainData, function(arr) {
                return arr.iLogicalSensorId === this.lsid;
            }.bind(this));
            if (totalRainData) {
                iRainDayVal = totalRainData.totalForToday.convertedVal;
            }
            iRainStormVal = this.portletSensorData[this.conStructure.rain_storm];
            iRainRateVal = this.portletSensorData[this.conStructure.high_rain_rate];
        }

        return [{
            id: 'day_storm',
            yAxis: 0,               //Map to to yAxis Label index.
            data: [wl.app.Dashboard.createHighChartDataPoint('sensor_rain_day', 'day', iRainDayVal, this.dayColor), wl.app.Dashboard.createHighChartDataPoint('sensor_rain_storm', 'storm', iRainStormVal, this.stormColor), {
                y: 0,
                id: ''
            }]
        },
            {
                id: 'rate',
                yAxis: 1,                //Map to to yAxis Label index.
                data: [{y: 0, id: ''}, {
                    y: 0,
                    id: ''
                }, wl.app.Dashboard.createHighChartDataPoint('sensor_rain_rate', 'rate', iRainRateVal, this.rateColor)]
            }]
    },
});

/******************************
 * WW - ET
 ******************************/

contentsViews.structure_type_511_et_graph = contentsViews.et_graph.extend({
    getSeries: function() {
        var self = this;
        var iEtDay = null;
        var iEtMonth = null;
        var iEtYear = null;
        var ETdata = _.findWhere(wl.data.totalETData, {iLogicalSensorId: this.lsid});
        
        if (ETdata) {
            iEtDay = ETdata.totalForToday.convertedVal;
            iEtMonth = ETdata.totalForMonth.convertedVal;
            iEtYear = ETdata.totalForYear.convertedVal;
        }

        //If all values are 0, then we need to set yaxis max so that the yaxis is shown.
        if (iEtDay === 0 && iEtYear === 0 && iEtYear === 0) {
            this.oChartOptions.yAxis.min = 0;
            this.oChartOptions.yAxis.max = 1;
        }
        var arrData = [
            wl.app.Dashboard.createHighChartDataPoint('sensor_et_day', this.categoryLabels[
              'day'], iEtDay, this.colorDay),
            wl.app.Dashboard.createHighChartDataPoint('sensor_et_month', this.categoryLabels[
              'month'], iEtMonth, this.colorMonth),
            wl.app.Dashboard.createHighChartDataPoint('sensor_et_year', this.categoryLabels[
              'year'], iEtYear, this.colorYear)
        ];

        return [{
            id: 'et',
            name: 'evapotranspiration',
            colorDay: this.colorDay,
            colorMonth: this.colorMonth,
            colorYear: this.colorYear,
            data: arrData
        }];
    },
});

/*******************************************
 * WW - Wind Speed
 *****************************************/
contentsViews.structure_type_505_wind_speed_graph = contentsViews.wind_speed_graph.extend({
    getStructure: function () {
        return wl.constants.structureType505FieldName;
    },
    getSeries: function () {
        var sData = DASH_VALUE;
        var dRawData = 0;
        this.conStructure = this.getStructure();
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);

        if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.wind_speed_1_min]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            dRawData = this.portletSensorData[this.conStructure.wind_speed_1_min];
            this.oChartOptions.yAxis.max = Utils.slidingScaleMax(dRawData, this.aMaxDial);

            sData = Utils.formatSensorReading('Wind Speed', dRawData, wl.data.userAccountSetting);
        }
        return [{
            id: 'wind-speed',
            name: 'sensor_wind_speed',
            data: [dRawData],
            color: this.color,
            dataLabels: {
                style: {
                    fontWeight: 'normal'
                },
                y: 32,
                format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' + sData + '</span><br/>'
                + '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' + this.model.get('unit') + '</span></div>'
            }
        }];
    },
    updateData: function () {
        var wind_speed = Boolean(this.portletSensorData[this.conStructure.wind_speed_1_min]) ? this.portletSensorData[this.conStructure.wind_speed_1_min] : 0;
        this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(wind_speed, this.aMaxDial), true, false);
        this.oChart.series[0].update(this.getSeries()[0]);
        window.thechart = this.oChart;
    },
    _getTooltip: function () {
        var oTplData = {
//          name: 'sensor_wind_speed',
            tooltip_text: 'tooltip_value_unit',
            unit: this.model.get('unit')
        };

        var sWindSpeed = DASH_VALUE;
        var sWindSpeedHi = DASH_VALUE;
        if (!wl.app.oMapper.checkOutdatedData(this.lsid) && !wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.wind_speed_1_min])) {
            sWindSpeed = Utils.formatSensorReading('Wind Speed', this.portletSensorData[this.conStructure.wind_speed_1_min], wl.data.userAccountSetting);
        }

        if (!wl.app.oMapper.checkOutdatedData(this.lsid) && !wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.wind_speed_day_high])) {
            sWindSpeedHi = Utils.formatSensorReading('Wind Speed', this.portletSensorData[this.conStructure.wind_speed_day_high], wl.data.userAccountSetting);
        }
        oTplData.current_value = sWindSpeed;
        oTplData.hi_value = sWindSpeedHi;

        return window.tpl['tooltip-hilow-single'](oTplData);
    }
});

/**********************************
 * WW - Wind Direction
 *********************************/
contentsViews.structure_type_505_wind_direction_graph = contentsViews.wind_direction_graph.extend({
    getStructure: function () {
        return wl.constants.structureType505FieldName;
    },
    getSeries: function () {
        var sDirection = 0;
        var sStrength = 0;
        this.conStructure = this.getStructure();
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);

        if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
            sDirection = this.portletSensorData[this.conStructure.wind_direction_1_min];
            sStrength = 100;
        }
        return [{
            id: 'wind_direction',
            name: 'wind_direction',
            color: this.color,
            data: this.buildData(sDirection, sStrength)
        }];
    },
    _getTooltip: function () {
        var oTplData = {
            wind_direction: this.portletSensorData[this.conStructure.wind_direction_1_min]
        };
        return window.tpl['tooltip-wind-direction'](oTplData);
    }
});

/**********************************
 * WW - Solar Radiation
 *********************************/
contentsViews.structure_type_506_solar_graph = contentsViews.solar_rad_graph.extend({
    getStructure: function () {
        return wl.constants.structureType506FieldName;
    },
    getSeries: function () {
        var dRawData = 0;
        var sData = DASH_VALUE;
        this.conStructure = this.getStructure();
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);

        if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.solar]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            dRawData = sData = this.portletSensorData[this.conStructure.solar];
        }

        //Ensure that the max limit is adjusted if the solar radition is above 1000
        if (sData > 1000) {
            this.oChartOptions.yAxis.max = 1367;
        }

        var sFormat = '<div style="text-align:center"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">'
            + sData + '</span><br/>'
            + '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' + this.model.get('unit') + '</span></div>';

        return [{
            id: 'solar-rad',
            name: 'sensor_solar_rad',
            data: [dRawData],
            dataLabels: {
                style: {
                    fontWeight: 'normal'
                },
                y: 32,
                enabled: true,
                format: sFormat
            }
        }];
    },
    updateData: function () {
        this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function () {
        var oTplData = {
            name: '',
            tooltip_text: 'tooltip_value_unit',
            unit: this.model.get('unit'),
        };

        var sSolar = DASH_VALUE;
        var sSolarHigh = DASH_VALUE;
        if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
            if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.solar])) {
                sSolar = this.portletSensorData[this.conStructure.solar];
                sSolarHigh = this.portletSensorData[this.conStructure.solar_high];
            }
        }

        oTplData.current_value = sSolar;
        oTplData.hi_value = sSolarHigh;
        return window.tpl['tooltip-hilow-single'](oTplData);
    }
})

/****************************************
 * WW - UV
 ****************************************/
contentsViews.structure_type_507_uv_graph = contentsViews.uv_graph.extend({
    getStructure: function () {
        return wl.constants.structureType507FieldName;
    },
    getSeries: function () {
        var dRawData = 0;
        var sData = DASH_VALUE;
        this.conStructure = this.getStructure();
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);
        if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.uv]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            dRawData = this.portletSensorData[this.conStructure.uv];
            sData = Utils.formatSensorReading("UV Index", dRawData, wl.data.userAccountSetting);
        }

        return [{
            id: 'sensor_uv',
            name: 'sensor_uv',
            data: [dRawData],
            color: this.color,
            dataLabels: {
                style: {
                    fontWeight: 'normal'
                },
                y: 32,
                format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' + sData + '</span><br/>'
                + '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' + this.model.get('unit') + '</span></div>'
            }
        }];
    },
    updateData: function () {
        this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function () {
        var oTplData = {
            unit: this.model.get('unit'),
            tooltip_text: 'tooltip_value_uv_index',
            name: ''
        };

        var sUv = DASH_VALUE;
        var sUvHigh = DASH_VALUE;
        if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
            if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.conStructure.uv])) {
                sUv = Utils.formatSensorReading("UV Index", this.portletSensorData[this.conStructure.uv], wl.data.userAccountSetting);
                sUvHigh = Utils.formatSensorReading("UV Index", this.portletSensorData[this.conStructure.uv_high], wl.data.userAccountSetting);
            }
        }

        oTplData.current_value = sUv;
        oTplData.hi_value = sUvHigh;
        return window.tpl['tooltip-hilow-single'](oTplData);
    }
})

/****************************************
 * WW - THW
 ****************************************/
contentsViews.structure_type_509_thw_graph = contentsViews.structure_type_22_graph.extend({
    getStructure: function () {
        return wl.constants.structureType509FieldName;
    },
    getDbFieldName: function () {
        return 'thw_index'
    },
    getSeries: function () {
        var dRawData = 0;
        var sData = DASH_VALUE;
        var threshold = null;
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.getStructure());
        this.oChartOptions.yAxis.labels.step = 1;

        if (wl.app.Dashboard.hasMaiaData(this.portletSensorData[this.getStructure()[this.getDbFieldName()]]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.getStructure()[this.getDbFieldName()]])) {
                dRawData = this.portletSensorData[this.getStructure()[this.getDbFieldName()]];
                sData = Utils.formatSensorReading('Temperature', dRawData, wl.data.userAccountSetting);
                this.maxDialVal = Utils.slidingScaleMax(Math.abs(dRawData));
            }
        }

        if (dRawData < 0) {
            threshold = 0;
            this.negativeScale = true;
            this.oChartOptions.yAxis.max = 0;
            this.oChartOptions.yAxis.min = -this.maxDialVal;
            this.oChartOptions.yAxis.tickPositions = [-this.maxDialVal, 0];
        } else {
            this.oChartOptions.yAxis.max = this.maxDialVal;
            this.oChartOptions.yAxis.min = 0;
            this.oChartOptions.yAxis.tickPositions = [0, this.maxDialVal];
        }

        if (this.oChart.yAxis) {
            this.oChart.yAxis[0].update(this.oChartOptions.yAxis);
        }

        return [{
            id: 'temperature',
            data: [dRawData],
            color: this.color,
            threshold: threshold,
            dataLabels: {
                style: {
                    fontWeight: 'normal'
                },
                y: 30,
                format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' + sData + '</span><br/>'
                + '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' + wl.data.unitLabelTemperature + '</span></div>'
            }
        }];
    },
    _getTooltip: function () {
        var current_value = DASH_VALUE;
        if (wl.app.Dashboard.hasMaiaData(this.portletSensorData[this.getStructure()[this.getDbFieldName()]]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            current_value = Utils.formatSensorReading('Temperature', this.portletSensorData[this.getStructure()[this.getDbFieldName()]], wl.data.userAccountSetting);
        }

        var oTplData = {
            unit: wl.data.unitLabelTemperature,
            name: "Temperature",
            tooltip_text: 'tooltip_value_unit',
            current_value: current_value
        };
        return window.tpl['tooltip-hilow-single'](oTplData);
    },
    updateData: function () {
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.getStructure());
        this.oChart.series[0].update(this.getSeries()[0]);
    }
})

/****************************************
 * WW - THSW
 ****************************************/
contentsViews.structure_type_510_thsw_graph = contentsViews.structure_type_509_thw_graph.extend({
    getStructure: function () {
        return wl.constants.structureType510FieldName;
    },
    getDbFieldName: function () {
        return 'thsw_index'
    }
})

/****************************************
 * WW - Leaf Soil - Temp 1
 ****************************************/
contentsViews.structure_type_521_temp_1_graph = contentsViews.structure_type_22_graph.extend({
    getStructure: function () {
        return wl.constants.structureType521FieldName;
    },
    getSeries: function () {
        var sData = DASH_VALUE;
        var dRawData = 0;
        var threshold = null;
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.getStructure());
        this.oChartOptions.yAxis.labels.step = 1;

        if (wl.app.Dashboard.hasMaiaData(this.portletSensorData[this.getStructure().temp]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            dRawData = this.portletSensorData[this.getStructure().temp];
            sData = Utils.formatSensorReading('Temperature', dRawData, wl.data.userAccountSetting);
            this.maxDialVal = Utils.slidingScaleMax(Math.abs(dRawData));
        }

        if (dRawData < 0) {
            threshold = 0;
            this.negativeScale = true;
            this.oChartOptions.yAxis.max = 0;
            this.oChartOptions.yAxis.min = -this.maxDialVal;
            this.oChartOptions.yAxis.tickPositions = [-this.maxDialVal, 0];
        } else {
            this.oChartOptions.yAxis.max = this.maxDialVal;
            this.oChartOptions.yAxis.min = 0;
            this.oChartOptions.yAxis.tickPositions = [0, this.maxDialVal];
        }

        if (this.oChart.yAxis) {
            this.oChart.yAxis[0].update(this.oChartOptions.yAxis);
        }

        return [{
            id: 'temperature',
            data: [dRawData],
            color: this.color,
            threshold: threshold,
            dataLabels: {
                style: {
                    fontWeight: 'normal'
                },
                y: 30,
                format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' + sData + '</span><br/>'
                + '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' + wl.data.unitLabelTemperature + '</span></div>'
            }
        }];
    },
    _getTooltip: function () {
        var current_value = DASH_VALUE;
        var hi_value = DASH_VALUE;
        var low_value = DASH_VALUE;
        if (wl.app.Dashboard.hasMaiaData(this.portletSensorData[this.getStructure().temp]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            current_value = Utils.formatSensorReading('Temperature', this.portletSensorData[this.getStructure().temp], wl.data.userAccountSetting);
            hi_value = Utils.formatSensorReading('Temperature', this.portletSensorData[this.getStructure().temp_high], wl.data.userAccountSetting);
            low_value = Utils.formatSensorReading('Temperature', this.portletSensorData[this.getStructure().temp_low], wl.data.userAccountSetting);
        }

        var oTplData = {
            unit: wl.data.unitLabelTemperature,
            name: "Temperature",
            tooltip_text: 'tooltip_value_unit',
            current_value: current_value,
            hi_value: hi_value,
            low_value: low_value
        };
        return window.tpl['tooltip-hilow-single'](oTplData);
    },
    updateData: function () {
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.getStructure());
        this.oChart.series[0].update(this.getSeries()[0]);
    }
})

/****************************************
 * WW - Leaf Soil - Temp 2
 ****************************************/
contentsViews.structure_type_522_temp_2_graph = contentsViews.structure_type_521_temp_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType522FieldName;
    }
});

/****************************************
 * WW - Leaf Soil - Temp 3
 ****************************************/
contentsViews.structure_type_523_temp_3_graph = contentsViews.structure_type_521_temp_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType523FieldName;
    }
});

/****************************************
 * WW - Leaf Soil - Temp 4
 ****************************************/
contentsViews.structure_type_524_temp_4_graph = contentsViews.structure_type_521_temp_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType524FieldName;
    }
});

/*************************************
 * WW - Leaf Soil - Soil Moisture 1
 *************************************/
contentsViews.structure_type_525_soil_moisture_1_graph = contentsViews.soil_moisture_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType525FieldName;
    },
    getSeries: function () {
        var sData = DASH_VALUE;
        var dRawData = 0;
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.getStructure());
        this.unitLabelSoilMoisture = Utils.getAccountSoilUnit(wl.app.Dashboard.getUnitLabelMoisture(this.lsid), wl.data.userAccountSetting.unitsSoilMoistureTypeId);
        if (this.unitLabelSoilMoisture === "cb" || this.unitLabelSoilMoisture === "kPa") {
            dRawData = 200;
        }
        if (this.unitLabelSoilMoisture === "bar") {
            dRawData = 2;
        }
        if (wl.app.Dashboard.hasMaiaData(this.portletSensorData[this.getStructure().soil_moisture]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            dRawData = this.portletSensorData[this.getStructure().soil_moisture];
            sData = Utils.formatSensorReading('Soil Moisture ' + this.unitLabelSoilMoisture, dRawData, wl.data.userAccountSetting);
            if (dRawData >= this.oChartOptions.yAxis.min && this.unitLabelSoilMoisture !== "%") {
                this.oChartOptions.yAxis.tickPositions = [this.oChartOptions.yAxis.min, this.oChartOptions.yAxis.max];
            }
        }
        return [{
            id: 'soilMoisture',
            data: [dRawData],
            color: this.color,
            threshold: this.oChartOptions.yAxis.min,
            dataLabels: {
                style: {
                    fontWeight: 'normal'
                },
                y: 32,
                format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' + sData + '</span><br/>'
                + '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' + this.unitLabelSoilMoisture + '</span></div>'
            }
        }];
    },
    updateData: function () {
        this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function () {
        var oTplData = {
            tooltip_text: 'tooltip_value_unit',
            unit: this.unitLabelSoilMoisture
        };
        var scaleUnit = 'Soil Moisture ' + this.unitLabelSoilMoisture;

        var currentVal = DASH_VALUE;
        var highVal = DASH_VALUE;
        var lowVal = DASH_VALUE;
        if (!wl.app.oMapper.checkOutdatedData(this.lsid) && !wl.app.Dashboard.isDashed255(this.portletSensorData[this.getStructure().soil_moisture])) {
            currentVal = Utils.formatSensorReading(scaleUnit, this.portletSensorData[this.getStructure().soil_moisture], wl.data.userAccountSetting);
            highVal = Utils.formatSensorReading(scaleUnit, this.portletSensorData[this.getStructure().soil_moisture_high], wl.data.userAccountSetting);
            lowVal = Utils.formatSensorReading(scaleUnit, this.portletSensorData[this.getStructure().soil_moisture_low], wl.data.userAccountSetting);
        }

        oTplData.current_value = currentVal;
        oTplData.hi_value = highVal;
        oTplData.low_value = lowVal;
        return window.tpl['tooltip-hilow-single'](oTplData);
    }
})

/*************************************
 * WW - Leaf Soil - Soil Moisture 2
 *************************************/
contentsViews.structure_type_526_soil_moisture_2_graph = contentsViews.structure_type_525_soil_moisture_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType526FieldName;
    }
});

/*************************************
 * WW - Leaf Soil - Soil Moisture 3
 *************************************/
contentsViews.structure_type_527_soil_moisture_3_graph = contentsViews.structure_type_525_soil_moisture_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType527FieldName;
    }
});

/*************************************
 * WW - Leaf Soil - Soil Moisture 4
 *************************************/
contentsViews.structure_type_528_soil_moisture_4_graph = contentsViews.structure_type_525_soil_moisture_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType528FieldName;
    }
});

/*************************************
 * WW - Leaf Soil - Leaf Wetness 1
 *************************************/
contentsViews.structure_type_529_leaf_wetness_1_graph = contentsViews.leaf_wetness_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType529FieldName;
    },
    getSeries: function () {
        var sData = DASH_VALUE;
        this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.getStructure());
        if (!wl.app.Dashboard.isDashed255(this.portletSensorData[this.getStructure().leaf_wetness]) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
            sData = this.portletSensorData[this.getStructure().leaf_wetness];
            this.maxDialVal = 15;
        }
        return [{
            id: 'leafWetness',
            data: [sData],
            color: this.color,
            dataLabels: {
                style: {
                    fontWeight: 'normal'
                },
                y: -30,
                format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' + Utils.formatSensorReading('Leaf Wetness', sData, wl.data.userAccountSetting) + '</span></div>'
            }
        }];
    },
    _getTooltip: function () {
        var oTplData = {
            tooltip_text: 'tooltip_value_unit',
            unit: '',
            name: 'Leaf Wetness'
        };

        var currentVal = DASH_VALUE;
        var highVal = DASH_VALUE;
        var lowVal = DASH_VALUE;
        if (!wl.app.oMapper.checkOutdatedData(this.lsid) && !wl.app.Dashboard.isDashed255(this.portletSensorData[this.getStructure().leaf_wetness])) {
            currentVal = this.portletSensorData[this.getStructure().leaf_wetness];
            highVal = this.portletSensorData[this.getStructure().leaf_wetness_high];
            lowVal = this.portletSensorData[this.getStructure().leaf_wetness_low];
        }

        oTplData.current_value = Utils.formatSensorReading('Leaf Wetness', currentVal, wl.data.userAccountSetting);
        oTplData.hi_value = Utils.formatSensorReading('Leaf Wetness', highVal, wl.data.userAccountSetting);
        oTplData.low_value = Utils.formatSensorReading('Leaf Wetness', lowVal, wl.data.userAccountSetting);
        return window.tpl['tooltip-hilow-single'](oTplData);
    }
});

/*************************************
 * WW - Leaf Soil - Leaf Wetness 2
 *************************************/
contentsViews.structure_type_530_leaf_wetness_2_graph = contentsViews.structure_type_529_leaf_wetness_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType530FieldName;
    }
});

/*************************************
 * CONSOLE - Inside Temp/Hum
 *************************************/
contentsViews.structure_type_601_inside_temp_hum_graph = contentsViews.structure_type_501_inside_temp_hum_graph.extend({
    getStructure: function () {
        return wl.constants.structureType601FieldName;
    },
});

/*************************************
 * CONSOLE - Temperature (temp only)
 *************************************/
contentsViews.structure_type_602_graph = contentsViews.structure_type_502_graph.extend({
    getStructure: function () {
        return wl.constants.structureType602FieldName;
    }
});

/*************************************
 * CONSOLE - Temperature
 *************************************/
contentsViews.structure_type_603_temp_graph = contentsViews.structure_type_503_temp_graph.extend({
    getStructure: function () {
        return wl.constants.structureType603FieldName;
    }
})

/************************
 * CONSOLE - Humidity
 ************************/
contentsViews.structure_type_603_hum_graph = contentsViews.structure_type_503_hum_graph.extend({
    getStructure: function () {
        return wl.constants.structureType603FieldName;
    }
});

/******************************
 * CONSOLE - Rain Total
 ******************************/
contentsViews.structure_type_604_rain_total_graph = contentsViews.structure_type_504_rain_total_graph.extend();

/***********************
 * CONSOLE - Current Rain
 ***********************/
contentsViews.structure_type_604_rain_current_graph = contentsViews.structure_type_504_rain_current_graph.extend({
    getStructure: function () {
        return wl.constants.structureType604FieldName;
    }
});

/******************************
 * CONSOLE - ET
 ******************************/

contentsViews.structure_type_611_et_graph = contentsViews.structure_type_511_et_graph.extend();

/*******************************************
 * CONSOLE - Wind Speed
 *****************************************/
contentsViews.structure_type_605_wind_speed_graph = contentsViews.structure_type_505_wind_speed_graph.extend({
    getStructure: function () {
        return wl.constants.structureType605FieldName;
    }
});

/**********************************
 * CONSOLE - Wind Direction
 *********************************/
contentsViews.structure_type_605_wind_direction_graph = contentsViews.structure_type_505_wind_direction_graph.extend({
    getStructure: function () {
        return wl.constants.structureType605FieldName;
    }
});

/**********************************
 * CONSOLE - Solar Radiation
 *********************************/
contentsViews.structure_type_606_solar_graph = contentsViews.structure_type_506_solar_graph.extend({
    getStructure: function () {
        return wl.constants.structureType606FieldName;
    }
});

/****************************************
 * CONSOLE - UV
 ****************************************/
contentsViews.structure_type_607_uv_graph = contentsViews.structure_type_507_uv_graph.extend({
    getStructure: function () {
        return wl.constants.structureType607FieldName;
    }
});

/****************************************
 * CONSOLE - THW
 ****************************************/
contentsViews.structure_type_609_thw_graph = contentsViews.structure_type_509_thw_graph.extend({
    getStructure: function () {
        return wl.constants.structureType609FieldName;
    }
});

/****************************************
 * CONSOLE - THSW
 ****************************************/
contentsViews.structure_type_610_thsw_graph = contentsViews.structure_type_510_thsw_graph.extend({
    getStructure: function () {
        return wl.constants.structureType610FieldName;
    }
});

/****************************************
 * CONSOLE - Leaf Soil - Temp 1
 ****************************************/
contentsViews.structure_type_621_temp_1_graph = contentsViews.structure_type_521_temp_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType621FieldName;
    }
});

/****************************************
 * CONSOLE - Leaf Soil - Temp 2
 ****************************************/
contentsViews.structure_type_622_temp_2_graph = contentsViews.structure_type_521_temp_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType622FieldName;
    }
});

/****************************************
 * CONSOLE - Leaf Soil - Temp 3
 ****************************************/
contentsViews.structure_type_623_temp_3_graph = contentsViews.structure_type_521_temp_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType623FieldName;
    }
});

/****************************************
 * CONSOLE - Leaf Soil - Temp 4
 ****************************************/
contentsViews.structure_type_624_temp_4_graph = contentsViews.structure_type_521_temp_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType624FieldName;
    }
});

/*************************************
 * CONSOLE - Leaf Soil - Soil Moisture 1
 *************************************/
contentsViews.structure_type_625_soil_moisture_1_graph = contentsViews.structure_type_525_soil_moisture_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType625FieldName;
    }
});

/*************************************
 * CONSOLE - Leaf Soil - Soil Moisture 2
 *************************************/
contentsViews.structure_type_626_soil_moisture_2_graph = contentsViews.structure_type_525_soil_moisture_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType626FieldName;
    }
});

/*************************************
 * CONSOLE - Leaf Soil - Soil Moisture 3
 *************************************/
contentsViews.structure_type_627_soil_moisture_3_graph = contentsViews.structure_type_525_soil_moisture_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType627FieldName;
    }
});

/*************************************
 * CONSOLE - Leaf Soil - Soil Moisture 4
 *************************************/
contentsViews.structure_type_628_soil_moisture_4_graph = contentsViews.structure_type_525_soil_moisture_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType628FieldName;
    }
});

/*************************************
 * CONSOLE - Leaf Soil - Leaf Wetness 1
 *************************************/
contentsViews.structure_type_629_leaf_wetness_1_graph = contentsViews.structure_type_529_leaf_wetness_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType629FieldName;
    }
});

/*************************************
 * CONSOLE - Leaf Soil - Leaf Wetness 2
 *************************************/
contentsViews.structure_type_630_leaf_wetness_2_graph = contentsViews.structure_type_529_leaf_wetness_1_graph.extend({
    getStructure: function () {
        return wl.constants.structureType630FieldName;
    }
});