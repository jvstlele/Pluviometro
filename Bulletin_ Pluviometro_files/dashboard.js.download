/**
 * Board Module - The heart of the Bulletin App
 *
 * Manages most of the aspects of displaying a collection of portlets.
 *
 * @param {type} oModule
 * @param {type} oApp
 * @author Nicholas Funnell <nickf@davisnet.com>
 * @since 2014-10-13
 */

wl.app.module("Dashboard", function(oModule, oApp) {


  // Private Variables
  // -----------------
  var DASH_VALUE = "--";

  var _$pack = false;
  var log = LogFactory("BOARD:");
  var _aTileViews = {};
  var _oGridConfig = {};
  var _updateTilePositionsDebounce = _.debounce(_updateTilePositions, 1000);
  var _oConfig = {
    chart_bg_color: '#ffffff',
    chart_gague_bg_color: '#eeeeee',
    sensor_default_color: '#000000'
  };
  var _aPortletPositions = [];

  var _oHighChartsDefaults = {
    chart: {
      renderTo: null,
      type: 'column',
      margin: [17, 70, 40, 70],
      backgroundColor: _oConfig.chart_bg_color,
      plotBackgroundColor: _oConfig.chart_bg_color
    },
    credits: {
      enabled: false
    },
    legend: {
      enabled: false
    },
    series: {},
    title: null,
    tooltip: {
      enabled: false,
      animation: false,
      followPointer: true,
      useHtml: false,
      backgroundColor: 'rgba(60, 70, 76, 1)',
      borderColor: '#3c464c',
      shadow: false,
      style: {
        fontFamily: 'Open Sans'
      }
    },
    xAxis: {
      type: 'category',
      labels: {
        useHTML: true,
        formatter: function() {
          return this.value;
        }
      }
    },
    yAxis: {
      title: null
    },
    plotOptions: {
      column: {
        // INFO gaps between bar graphs
        pointPadding: 0.1,
        groupPadding: 0.05,
        borderWidth: 0,
        allowPointSelect: false,
        dataLabels: {
          enabled: true,
          crop: false,
          overflow: 'none',
          style: {
            fontFamily: 'merriweatherlight',
            fontSize: '12px',
            fontWeight: 'regular'
          }
        }
      },
      series: {
        borderWidth: 0,
        maxPointWidth: 100,
        dataLabels: {
          enabled: true,
          inside: false,
          crop: false,
          overflow: 'none',
          //					verticalAlign: 'top',
          color: '#3b454b',
          //					backgroundColor: '#ffffff',
          //					format: '{point.y}',
          useHTML: true,
          style: {
            fontFamily: 'merriweatherlight',
            fontSize: '12px',
            fontWeight: 'regular'
          }
        }
      },
      solidgague: {
        dataLabels: {
          enabled: true,
          useHTML: false,
          style: {
            fontWeight: 'bold',
            fontSize: '30px'
          }
        }
      }
    }
  };

  //init stale data tooltips
  $.fn.tooltip = $.fn.tooltip.noConflict();
  $(function() {
    $("body").tooltip({
      selector: '[data-toggle=tooltip]'
    });
  });

  // Initializers
  // ------------

  oModule.addInitializer(function() {
    //If there are no user portlet settings, then there isn't anything the bulletin can do.
    if (wl.data.portletConfigs.length <= 1) {
    	initEmpty('no_sensor_found_bulletin');
      return true;
    }
    
    var visiblePortlets = wl.data.portletConfigs.filter(function (portlet) {
    	return portlet.get('sType') !== 'show_hidden' && portlet.get('iVisible') === 1;
    });
    
    if (!wl.data.isOwner && !visiblePortlets.length) {
    	oModule.noPublicData = true;
    	initEmpty('no_public_data_available');
      return true;
    }
    
    function initEmpty(msgKey) {
    	log("No portlet settings for this system.");
      $("#portal-container").html(
        "<p class='no-data' data-l10n-id='"+msgKey+"'></p>"
      );
      $("#summary").html(
          "<p class='no-data' style='padding-left:6px;' data-l10n-id='"+msgKey+"'></p>"
        );
      $("#bulletinHeader").remove();
      $("#remove-on-ready").remove();
      $("#right-panel").html(oApp.BulletinTilePanel.start({}));
    }
    
    _mainInit();
    oModule.trigger("after-main-init");
  });


  oModule.once("after-main-init", function() {

    if (wl.data.portletConfigs.length <= 1) {
      return true;
    }

    window.setTimeout(function() {
      _dynamicLayout(true, false);
    }, 750);
  });

  //Listen to tile:repack event to repack the tiles
  oModule.on("tile:repack", function() {
    $(window).resize();
    setTimeout(function () {
      $("#scroll-container").perfectScrollbar('update');
    }, 750);
  });

  oModule.on("pack:packery", function() {
    _$pack.packery();
  });

  // Private Functions
  // -----------------

  function _mainInit() {
    // update portlets when data is updated
    oApp.vent.on('data:refresh', function() {
      _.each(_aTileViews, function(oView) {
        oView.getContentsView().updateData();
        if (oView.getHeaderView()) {
          oView.getHeaderView().render();
        }
      });
    });

    _$pack = $('#portal-container');
    _$dashboard = $('#dashboard');
    _oGridConfig = _getColumnSize();
    _packeryStart();
    _initAllPortlets();
    _dynamicLayout(false, true);
    _$pack.packery('on', 'layoutComplete', _.debounce(_onLayoutComplete,
      333));
    _$pack.packery();

    //_oGridConfig = _getColumnSize();
    //_dynamicLayout(false);
    $(window).resize(_.debounce(function() {
      _dynamicLayout();
    }, 333));
    $('#remove-on-ready').remove();

    // Start the Bulletin Tile Panel on right
    $("#right-panel").html(oApp.BulletinTilePanel.start({}));
    $("#scroll-container").perfectScrollbar();
  }

  function _highchartsOptions(oUserOptions) {
    var oOptions = _.cloneDeep(_oHighChartsDefaults);
    return _.assign(oOptions, oUserOptions);
  }

  /**
   * Given an array of PortletConfig models, add those portlets to the dashboard.
   * The portlets are modified so that iVisible is 1
   *
   * This function also deals with the state of SHOW_HIDDEN portlets. After
   * it has made the given portlets visible, it will ensure that SHOW_HIDDEN
   * is visible or not depending on if there are more hidden portlets.
   *
   * @since 2014-11-13
   * @author Nicholas Funnell <nickf@davisnet.com>
   * @param aPortletsToShow Array of PortletConfig models
   * @returns void
   */
  function _showHiddenPortlets(aPortletsToShow) {
    _.each(aPortletsToShow, function(oConfig) {
      oConfig.set('iVisible', 1);
      oConfig.save();
      oModule.addPortlet(oConfig);
    });
    if (aPortletsToShow.length > 0) {
      _$pack.packery();
    }
    var oShowHiddenConfig = wl.data.portletConfigs.get(wl.constants.showHiddenId);
    if (oShowHiddenConfig.get('iAvailable')) {
      // show hidden is enabled
      if (_bPortletsAreHidden()) {
        // we need to show the "Show Hidden" portlet
        if (oShowHiddenConfig.get('iVisible')) {
          // it is already visible, we are done
          return;
        } else {
          // add it!
          oShowHiddenConfig.set('iVisible', 1);
          oModule.addPortlet(oShowHiddenConfig);
        }
      } else {
        // we need to hide the "show hidden" portlet
        if (oShowHiddenConfig.get('iVisible')) {
          // find its view
          oShowHiddenConfig.set('iVisible', 0);
          for (var i in _aTileViews) {
            if (_aTileViews[i].getConfig().id === wl.constants.showHiddenId) {
              _hideTile(_aTileViews[i]);
            }
          }
        } else {
          // it is already hidden. we are done
          return;
        }
      }
    }
  }

  /**
   * Determines if there are hidden portlets that could be made visible.
   * used to decide if SHOW_HIDDEN portlet should be shown
   * @since 2014-11-13
   * @returns {Boolean}
   */
  function _bPortletsAreHidden() {
    var aInvisible = wl.data.portletConfigs.filter(function(oConfig) {
      return oConfig.get('iVisible') === 0 && oConfig.id !== wl.constants
        .showHiddenId && oConfig.get('iAvailable') === 1;
    });
    return aInvisible.length > 0;
  }

  /**
   * Callback for when packery is done moving our portlets around
   * This happens when the window is resized or when a user is dragging
   * around a portlet
   *
   * @param oPackInstance a refrence to _$pack
   * @param oLaidOutItems Array of PackeryItem objects
   */
  function _onLayoutComplete(oPackInstance, oLaidOutItems) {
    _updateTilePositionsDebounce();
    _adjustDeviceSelector();
    $('#scroll-container').perfectScrollbar('update');
  }

  /**
   * Dynamic Layout
   * Callback for when the window has resized, or just when you generally feel
   * the need to pack every portlet into the available space
   *
   * This function uses getColumnSize to determine the unit width of the grid
   * depending on availalbe size of the container div. It then tells every
   * portlet to resize itself to the proper width and height. This will cause
   * a lot of writes to the DOM, something that we should avoid when possible.
   *
   * Please do what you can to keep this function from being called often.
   *
   * @param bForce do NOT abort if the width is the same as last time
   * @param bForceChange set to true and it will calculate the width wrong to force the portlets to resize
   * @author Nicholas Funnell <nickf@davisnet.com>
   * @since 2014-10-20
   * @returns void
   */
  function _dynamicLayout(bForce, bForceChange) {
    var oOld = _oGridConfig;
    _oGridConfig = _getColumnSize();
    if (bForceChange) {
      _oGridConfig.width -= 6;
    }
    if (oOld.width === _oGridConfig.width && !bForce) {
      // the grid sizes are the same, but the columns could be different
      // just let packery arrange the tiles, but do not force all
      // the tiles to resize themself.
      _$pack.packery();
      return;
    }
    // order is important here to avoid extra dom movement. There will still
    // be redundant movement. if the tiles are going to grow, enlarge
    // the grid first. otherwise, let tiles shrink before chaning grid
    if (oOld.width > _oGridConfig.width) {
      _.each(_aTileViews, function(oView) {
        oView.setTileSize(_oGridConfig);
      });
      _$pack.packery({
        columnWidth: _oGridConfig.width,
        rowHeight: _oGridConfig.height
      });
    } else {
      _$pack.packery({
        columnWidth: _oGridConfig.width,
        rowHeight: _oGridConfig.height
      });
      _.each(_aTileViews, function(oView) {
        oView.setTileSize(_oGridConfig);
      });
    }
    _$pack.packery();
  }

  function _hideTile(oTileView) {
    var oConfig = oTileView.getConfig();

    oConfig.set('iVisible', 0);
    oConfig.save();

    delete _aTileViews[oTileView.cid];
    _$pack.packery('remove', oTileView.$el);
    oTileView.destroy();
    _$pack.packery();
    _showHiddenPortlets([]);

    //Uncheck the checkbox in the right panel
    $(".js-tile-option[data-portSetId=" + oConfig.get("iPortletSettingId") +
      "]").attr('checked', false);
  }
  
  function _hideAdsTile (oTileView) {
    var oConfig = oTileView.getConfig();
    oConfig.set('iVisible', 0);

    delete _aTileViews[oTileView.cid];
    _$pack.packery('remove', oTileView.$el);
    oTileView.destroy();
    _$pack.packery();
  }
  
  function _removeTile(oTileView) {
    var oConfig = oTileView.getConfig();

    oConfig.set('iAvailable', 0);
    oConfig.save();

    delete _aTileViews[oTileView.cid];
    _$pack.packery('remove', oTileView.$el);
    oTileView.destroy();
    _$pack.packery();
  }

  function _getColumnSize() {
    var iWidth = _$pack.width();
    var iUnitWidth = oApp.config.grid.unitWidth;
    var iNumColumns = Math.floor(iWidth / iUnitWidth);
    var iColumnWidth = Math.floor(iWidth / iNumColumns);
    if (iNumColumns < 1 || iColumnWidth < iUnitWidth) {
      iNumColumns = 1;
      iColumnWidth = iUnitWidth;
    }
    var data = {
      "base-width": iUnitWidth,
      "available width": iWidth,
      "available columns": iNumColumns,
      "raw width": iWidth / iNumColumns,
      "cooked width": iColumnWidth
    };
    // @DEBUG
    var $d = $('#debug-output');
    $d.empty();
    _.each(data, function(v, k) {
      $d.append("<li><strong>" + k + "</strong> " + v + "</li>");
    });

    return {
      width: iColumnWidth,
      height: iColumnWidth,
      numColumns: iNumColumns
    };
  }

  function _initAllPortlets() {
    // init setup of the positions array
    // prefilling it here ensures that it wont be saved when page is done loading
    _aPortletPositions = [];
    var aqiId = wl.data.userAccountSetting.airQualitySchemeId;

    wl.data.portletConfigs.each(function(oConfig) {
      if (oConfig.id > 0 && oConfig.get('iVisible')) {
        _aPortletPositions.push(oConfig.id);
        _aPortletPositions.push(oConfig.get('iPosition'));
      }
      // is this portlet avaiable? Does the station support every sensor
      // needed by the portlet?
      var oType = oConfig.getType();
      var sType = oConfig.get('sType');
      if (oType.supportsSystem(wl.data.system) && oConfig.id !== wl.constants
        .showHiddenId) {
        oConfig.set('iAvailable', 1);
      } else {
        oConfig.set('iAvailable', 0);
      }
      
      //show 3hr tile for canada and nowcast for others
      if (aqiId === wl.constants.canadaAqiId && sType.indexOf('nowcast') !== -1) {
      	oConfig.set('iAvailable', 0);
      }
      if (aqiId !== wl.constants.canadaAqiId && sType.indexOf('3hr') !== -1) {
      	oConfig.set('iAvailable', 0);
      }
    });
    // Define and add the SHOW HIDDEN portlet
    if (_bPortletsAreHidden()) {
      wl.data.portletConfigs.get(wl.constants.showHiddenId).set('iVisible',
        1);
    } else {
      wl.data.portletConfigs.get(wl.constants.showHiddenId).set('iVisible',
        0);
    }

    wl.data.portletConfigs.each(function(oPortletConfigModel) {
      if (oPortletConfigModel.get('iAvailable')) {
        oModule.addPortlet(oPortletConfigModel);
      }
      return;
    });
  }

  function _packeryStart() {
    var oPackOptions = {
      itemSelected: '._tile',
      columnWidth: _oGridConfig.width,
      rowHeight: _oGridConfig.height,
      gutter: 0,
      isOriginLeft: true,
      isResizeBound: false
    };
    _$pack.packery(oPackOptions);
    window.$p = _$pack;
  }

  function _updateTilePositions() {
    var oldPositions = _aPortletPositions;
    _aPortletPositions = [];

    //This will only return tils that are in the packery. So hidden tiles will not show up.
    _.each(_$pack.packery('getItemElements'), function(el, iIndex) {
      var iPosition = 1 + iIndex;
      var sName = $(el).attr('data-viewid');
      var oTileView = _aTileViews[sName];
      if (oTileView) {
        oTileView.setPosition(iPosition);
        var id = oTileView.getConfig().id;
        _aPortletPositions.push(id);
        _aPortletPositions.push(iPosition);
      } else {
        log("ERROR: CAN NOT FIND VIEW", sName);
      }
    });
    if (_.isEqual(oldPositions, _aPortletPositions)) {
      log("Positions are same as last time, do not call ajax");
    } else {
      oApp.Ajax.savePositions(_aPortletPositions);
      log("Positions are different");
    }
  }

  function _adjustDeviceSelector() {
    //set device selector width equal to smallest tile width
    var widthArr = [];
    _.each(_aTileViews, function(oView) {
      if (oView.el.clientWidth > 0) {
        widthArr.push(oView.el.clientWidth);
      }
    });
    if (widthArr.length === 0) {
      return;
    }
    var minWidth = widthArr.reduce(function(a, b) {
      return Math.min(a, b)
    });

    // set right margin
    var maxOffsetLeft = $('#portal-container').children().toArray().reduce(
      function(max, x) {
        return (x.offsetLeft > max) ? x.offsetLeft : max;
      }, 0);
    var contWidth = $('#portal-container').width();
    var packeryRightGap = contWidth - (maxOffsetLeft + minWidth);
    if ($('#main-body-container').hasClass('sidebar-open')) {
    	packeryRightGap += 231;
    }
    var $devicesDropdown = $('#scroll-container .devices-dropdown');
    if (packeryRightGap <= 25) {
      $devicesDropdown.css({
        'width': minWidth + 'px',
        'margin-right': packeryRightGap-7 + 'px'
      });
      $devicesDropdown.find('.dropdown-menu').css('width',
        minWidth + 'px');
    }
  }

  function _headerViewFactory(oPortletConfig, oTileView) {

    if (oTileView.isBare) {
      return new _oViews.HeaderViewBare({
        configModel: oPortletConfig,
        tileView: oTileView
      });
    } else {
      return new _oViews.HeaderView({
        configModel: oPortletConfig,
        tileView: oTileView
      });
    }
  }

  function _contentsViewFactory(oPortletConfig, oTileView) {

    var sViewType = oPortletConfig.get('sViewName');
    var oPortletType = wl.data.portletTypes.get(oPortletConfig.get('sType'));
    if (!oPortletType) {
      log("ERROR ERROR", "Cant get portlet type for config", oPortletConfig
        .id);
      return false;
    }
    var oAvailableViews = oPortletType.get('oAvailableViews');
    if (!oAvailableViews[sViewType]) {
      log("ERROR: " + sViewType + " is not an AvailableView for " +
        sViewType);
      return false;
    }
    var sContentsView = oAvailableViews[sViewType];
    if (!_oContentsViews[sContentsView]) {
      log("ERROR: No contents view: " + sContentsView + " for portlet " +
        oPortletConfig.id);
      return false;
    }
    var oSizeObj = wl.app.config.grid.getContentSize(_getColumnSize(),
      oPortletConfig.get('iGridWidth'), oPortletConfig.get('iGridHeight')
    );
    var iContentsWidth = oSizeObj.width;
    var iContentsHeight = oSizeObj.height;
    log(oTileView.cid, "new contents view", sContentsView,
      'display width height', iContentsWidth, iContentsHeight);
    var oContentsView = new _oContentsViews[sContentsView]({
      lsid: oPortletConfig.get('iLogicalSensorId'),
      configModel: oPortletConfig,
      tileView: oTileView,
      sContentsViewName: sContentsView,
      size: {
        width: iContentsWidth,
        height: iContentsHeight
      }
    });
    oContentsView.setSize(iContentsWidth, iContentsHeight);
    log("Create a view", sContentsView);
    return oContentsView;
  }

  /**
   * Loop through the MaiaSensorData to retrieve the requested logical sensor.
   *
   * @author	Kenny Sam
   * @since	2015-09-08
   *
   * @param <int>	iLsid	The logical sensor id
   *
   * @return	A Logical Sensor Json Object.
   */
  function _getMaiaLogicalSensorByLsid(iLsid) {
    var oMatchedLogicalSensor = null;
    //Loop through all the maia sensor data to get the nodes
    _.each(wl.data.maiaSensorData, function(oNode) {
      //Loop through each logical sensor in the node
      _.each(oNode.logicalSensor, function(oLogicalSensor) {
        //Determine if the logical sensor is the one we are looking for.
        if (oLogicalSensor.logicalSensorId === iLsid) {
          oMatchedLogicalSensor = oLogicalSensor;
          //Add the node name to the logical sensors for use in the portlet footer.
          oMatchedLogicalSensor.nodeName = oNode.nodeName;
          return false; //Exit out of the loop.
        }
      });
      //If a mach is found, then exit out of the loop.
      if (oMatchedLogicalSensor != null) {
        return false;
      }
    });

    return oMatchedLogicalSensor;
  }

  /**
   * Retrived the logical sensor data and then retrieve the data according to the structure type.
   *
   * @author	Kenny Sam
   * @since	2015-09-20
   *
   * @param <int>		iLsid						The logical sensor id
   * @param <array>	constantStructureType		The wl.constants.structureType##FieldName object
   *
   * @returns		An array of sensor data used by the portlet.
   */
  function _getMaiaSensorData(iLsid, constantStructureType) {
    var oLogicalSensor = _getMaiaLogicalSensorByLsid(iLsid);
    var portletSensorData = [];
    //Loop through the sensor data type of the logical sensor and pick out the data needed
    //for this portlet
    if (oLogicalSensor != null) {
      _.each(oLogicalSensor.sensorDataType, function(sensorDataType) {
        _.each(constantStructureType, function(dbFieldName) {
          if (sensorDataType.dbFieldName === dbFieldName) {
            portletSensorData[dbFieldName] = sensorDataType.dataValue;
            return false; //Exit inner each loop
          }
        });
      });
    }
    return portletSensorData;
  }

  function _getTranslation(translationKeys, translations) {
    var promises = [];
    _.each(translationKeys, function(key) {
      var prom = document.l10n.formatValue(key);
      promises.push(prom);
      prom.then(function(result) {
        translations[key] = result;
      });
    });
    return promises;
  }

  /**
   * Check to see if there are station data
   */
  function _hasStationData() {
    if (wl.data.stationData == null) {
      return false;
    }
    return true;
  }

  /**
   * Check to see if there are local forecast data
   */
  function _hasLocalForecastData() {
    if (wl.data.forecastOverview == null) {
      return false;
    }
    return true;
  }

  /**
   * Check to see if there are barometer data
   */
  function _hasBarometerData() {
    if (wl.data.barometerData == null || wl.data.barometerData.barData.length ==
      0) {
      return false;
    }
    return true;
  }

  /**
   * Check to see if there are station hi low data
   */
  function _hasStationHilow() {
    if (wl.data.stationHilow == null) {
      return false;
    }
    return true;
  }

  /**
   * Check to see if there are maia data
   */
  function _hasMaiaData(dData) {
    if (typeof(dData) == 'undefined' || dData == null) {
      return false;
    }
    return true;
  }


  /**
   * Check to see if the sensor data is null, if there is no data then we will use the no-data template.
   */
  function _checkSensorDataForTemplate(sTemplateName, oData) {
    if (oData === null || oData === false || oData === undefined || oData.length ===
      0) {
      return _getNoDataTemplate();
    }
    return window.tpl[sTemplateName];
  }

  /**
   * Get the no data text template
   */
  function _getNoDataTemplate() {
    return window.tpl['portlet-text-no-data'];
  }

  /**
   * Create the data object for HighChart to plot
   */
  function _createHighChartDataPoint(sId, sName, iVal, sColor) {
    var oData = {};
    oData.id = sId;
    oData.name = sName;
    oData.color = sColor;
    //if (iVal!=null) {
    oData.y = iVal;
    //}
    return oData;
  }

  /**
   * Check to see if the sensor data is null, if there is no data then we will use the no-data template.
   */
  function _isDashed32767(iData) {

    if (typeof(iData) == 'undefined' || iData == null || iData === 3276 ||
      iData === 32767 || iData === 3276.8) {
      return true;
    }

    return false;
  }

  /**
   * Check to see if the sensor data is null, if there is no data then we will use the no-data template.
   */
  function _isDashed255(iData) {
    if (typeof(iData) == 'undefined' || iData == null || iData === 255) {
      return true;
    }
    return false;
  }

  /**
   * formatting decimal points and separator functions
   */
  function _formatSoilMoisture(val) {
    if (typeof(val) == 'undefined' || val == null) {
      return DASH_VALUE;
    }
    return Utils.formatSensorReading('Soil Moisture %', val, wl.data.userAccountSetting);
  }

  function _formatSoilTemp(val) {
    if (typeof(val) == 'undefined' || val == null) {
      return DASH_VALUE;
    }
    return Utils.formatSensorReading('Temperature', val, wl.data.userAccountSetting);
  }

  function _formatSoilSalinity(val) {
    if (typeof(val) == 'undefined' || val == null) {
      return DASH_VALUE;
    }
    return Utils.formatSensorReading('Soil Salinity', val, wl.data.userAccountSetting);
  }

  /**
   * find ring depth for soil moisture sensor
   * @param <int>		lsid						The logical sensor id
   * @param <string>	dbFieldName					field name in database
   *
   * @returns string
   * 	 */
  function _getRingDepth(lsid, dbFieldName) {
    var logicalSensor = _getMaiaLogicalSensorByLsid(lsid);
    if (logicalSensor != null) {
      var depth = _.get(_.find(logicalSensor.sensorDataType, {
        'dbFieldName': dbFieldName
      }), 'depth') || '';
      var depthUnit = _.get(_.find(logicalSensor.sensorDataType, {
        'dbFieldName': dbFieldName
      }), 'depthUnit') || '';
      return depth + depthUnit;
    }
    return '';
  }

  function _getRingDepthInStruct(lsid, dbFieldName) {
    var logicalSensor = _getMaiaLogicalSensorByLsid(lsid);
    if (logicalSensor != null) {
      var depth = _.get(_.find(logicalSensor.sensorDataType, {
        'dbFieldName': dbFieldName
      }), 'depth') || '';
      var depthUnit = _.get(_.find(logicalSensor.sensorDataType, {
        'dbFieldName': dbFieldName
      }), 'depthUnit') || '';
      return {
        depth: depth,
        unit: depthUnit
      };
    }
    return '';
  }

  function _getSoilMoistureLabels(thatValues, that, promises, lsid, amount) {
    _.each(_.range(1, amount + 1), function(value) {
      var label = _getRingDepthInStruct(lsid, thatValues[
        'soil_moisture_' + value]);
      var prom = document.l10n.formatValue(label.unit, label);
      promises.push(prom);
      prom.then(function(translation) {
        that["ringLabel" + value] = translation;
      });
    });
  }

  function _getSoilTemperatureLabels(thatValues, that, promises, lsid, amount) {
    _.each(_.range(1, amount + 1), function (value) {
      var label = _getRingDepthInStruct(lsid, thatValues[
      'soil_temperature_' + value]);
      var prom = document.l10n.formatValue(label.unit, label);
      promises.push(prom);
      prom.then(function (translation) {
        that["ringLabel" + value] = translation;
      });
    });
  }

  /**
   * find soil moisture unit label for soil moisture sensor
   * @param <int>		lsid						The logical sensor id
   * @returns string
   * 	 */
  function _getUnitLabelMoisture(lsid) {
    var logicalSensor = _getMaiaLogicalSensorByLsid(lsid);
    //Since all the sSoilUnit are the same for the sensorDataType, we just need the first one.
    if (logicalSensor != null) {
      var sensorObj = _.find(logicalSensor.sensorDataType, function(obj) {
        return obj.hasOwnProperty('sSoilUnit') && obj.sSoilUnit;
      });
    }
    return sensorObj ? sensorObj.sSoilUnit : "";
  }

  /**
   * find soil salinity unit label for soil moisture sensor
   * @param <int>		lsid						The logical sensor id
   * @returns string
   * 	 */
  function _getUnitLabelSalinity(lsid) {
    var logicalSensor = _getMaiaLogicalSensorByLsid(lsid);
    //Since all the sSoilUnit are the same for the sensorDataType, we just need the first one.
    if (logicalSensor != null) {
      var sensorObj = _.find(logicalSensor.sensorDataType, function(obj) {
        return obj.hasOwnProperty('sEcUnit') && obj.sEcUnit;
      });
    }
    return sensorObj ? sensorObj.sEcUnit : "";
  }

  /**
   * For a single sensor soil moisture, we are using a gauge.
   * This function is used for sensors reporting in positive value so the gauge min is set properly.
   * For sensors reporting in positive, the high value is dry and low value is wet
   * We want the min value to reporesent dry
   *
   * @param    sSoilUnit   pct, cb, bar, kPa
   *
   * @return   the value for the min value..
   */
  function _getSoilMoisturePositiveValueMinForGauge(sSoilUnit) {
    if (sSoilUnit === 'bar') {
      //bar is 1/100 of the range
      return 2;
    } else if (sSoilUnit === 'pct' || sSoilUnit === '%') {
      //For percent 0% is dry
      return 0;
    }

    return 200;
  }

  /**
   * For a single sensor soil moisture, we are using a gauge.
   * This function is used for sensors reporting in negative value so the gauge min is set properly.
   * For sensors reporting in negative, large negative value is dry and 0 is wet
   * We want the min value to reporesent dry
   *
   * @param    sSoilUnit    pct, cb, bar, kPa
   * @param	value		The negative value of the moistue
   *
   * @return   the value for the min value..
   */
  function _getSoilMoistureNegativeValueMinForGauge(sSoilUnit, value) {

    var min = -100000

    if (value <= -100) {
      min = -100;
    } else if (value <= -250) {
      min = -250;
    } else if (value <= -500) {
      min = -500;
    } else if (value <= -1000) {
      min = -1000;
    } else {
      //make the min to the next negative 1000th
      min = Math.ceil(Math.abs(value) / 1000) * -1000
    }

    if (sSoilUnit === 'bar') {
      //bar is 1/100 of the range
      return min / 100;
    }

    return min;
  }

  /**
   * For a single sensor soil moisture, we are using a gauge.
   * This function is used for sensors reporting in positive value so the gauge max is set properly.
   * For sensors reporting in positive, the high value is dry and low value is wet
   * We want the max value to represent wet
   *
   * @param    sSoilUnit   pct, cb, bar, kPa
   *
   * @return	the value for the max value..
   */
  function _getSoilMoisturePositiveValueMaxForGauge(sSoilUnit) {
    if (sSoilUnit === 'pct' || sSoilUnit === '%') {
      //For percent 100% is wet
      return 100;
    }
    return 0;
  }

  /**
   * For a single sensor soil moisture, we are using a gauge.
   * This function is used for sensors reporting in negative value so the gauge max is set properly.
   * For sensors reporting in negative, large negative value is dry and 0 is wet
   * We want the max value to reporesent wet
   *
   *
   * @return   the value for the min value..
   */
  function _getSoilMoistureNegativeValueMaxForGauge() {
    return 0;
  }

  /**
   * get bar threshold for a negative value
   *
   * @param dVal
   *
   * @return the threshold value
   */
  function _getThresholdForNegativeVal(dVal) {
    var threshold = Math.floor(dVal / 10) * 10;
    var absValue = Math.abs(dVal);
    if (absValue >= 5 && absValue < 15) {
      return Math.floor(dVal / 20) * 20;
    }
    if (absValue >= 15 && absValue < 35) {
      return Math.floor(dVal / 40) * 40;
    }
    if (absValue >= 35 && absValue < 55) {
      return Math.floor(dVal / 60) * 60;
    }
    if (absValue >= 55 && absValue < 115) {
      return Math.floor(dVal / 120) * 120;
    }
    if (absValue >= 115) {
      return Math.floor(dVal / 400) * 400;
    }
    return threshold;
  }

  /**
   * check if series data values are 0
   *
   * @param data - series data
   *
   * @return boolean - true if all data is 0
   */
  function _checkSeriesDataForZeros(data) {
    return Boolean(_.get(data.reduce(
      function(prev, current) {
        return (prev.y > current.y) ? prev : current;
      }), 'y') === 0)
  }

  // Public Functions
  // ----------------
  oModule.getMaiaSensorData = _getMaiaSensorData;

  oModule.createHighChartDataPoint = _createHighChartDataPoint;

  oModule.isDashed32767 = _isDashed32767;

  oModule.getThresholdForNegativeVal = _getThresholdForNegativeVal;

  oModule.isDashed255 = _isDashed255;

  oModule.hasStationData = _hasStationData;

  oModule.hasMaiaData = _hasMaiaData;

  oModule.getUnitLabelMoisture = _getUnitLabelMoisture;

  oModule.getMaiaLogicalSensorByLsid = _getMaiaLogicalSensorByLsid;

  oModule.getNoDataTemplate = _getNoDataTemplate;

  oModule.highchartsOptions = _highchartsOptions;

  oModule.getSoilMoistureLabels = _getSoilMoistureLabels;

  oModule.getSoilTemperatureLabels = _getSoilTemperatureLabels;

  oModule.formatSoilMoisture = _formatSoilMoisture;

  oModule.formatSoilTemp = _formatSoilTemp;

  oModule.checkSeriesDataForZeros = _checkSeriesDataForZeros;

  oModule.getSoilMoisturePositiveValueMinForGauge = _getSoilMoisturePositiveValueMinForGauge;

  oModule.getSoilMoisturePositiveValueMaxForGauge = _getSoilMoisturePositiveValueMaxForGauge;

  oModule.getUnitLabelSalinity = _getUnitLabelSalinity;

  oModule.formatSoilSalinity = _formatSoilSalinity;

  oModule.getRingDepth = _getRingDepth;

  oModule.getTranslation = _getTranslation;

  oModule.getTiles = function() {
    return _aTileViews;
  };

  oModule.fix = function() {
    _dynamicLayout(true, true);
  };

  oModule.allText = function() {
    _.each(_aTileViews, function(v) {
      v.trigger('cmd:showText');
    });
  };

  oModule.allGraphic = function() {
    _.each(_aTileViews, function(v) {
      v.trigger('cmd:showGraph');
    });
  };

  oModule.allHidden = function() {
    _.each(_aTileViews, function(v) {
      if (v.getConfig().id !== wl.constants.showHiddenId) {
        v.trigger('cmd:hide');
      }
    });
  };

  oModule.getSpecificTiles = function(sTileCid) {
    return _aTileViews[sTileCid];
  };
  
  oModule.getTileByType = function(sType) {
    return _.find(_aTileViews, function(obj) {
    	return obj.options.configModel.get('sType') === sType;
    })
  };

  /**
   * Use a PortletConfig Model to build a TileView that can render one portlet
   * @param {Backbone.Model} oPortletConfig
   * @returns {Boolean} false on failure
   */
  oModule.addPortlet = function(oPortletConfig) {
    var sType = oPortletConfig.get('sType');
    if (!oPortletConfig.get('iVisible')) {
      return;
    }
    if ((sType === 'temperature' && oPortletConfig.get(
        'sViewName') === 'graph')
      || sType === 'structure_type_16' || sType === 'structure_type_65_aqi_group'
      || sType === 'structure_type_65_aqi_trend') {
      if (oPortletConfig.get('iGridWidth') < 2) {
        oPortletConfig.set('iGridWidth', 2);
      };
    }

    //Wind Rose Tile - ISS and Davis Anemometer
    if (oPortletConfig.get('sType').indexOf('wind_rose') !== -1) {
      if (oPortletConfig.get('iGridHeight') !== 2) {
        oPortletConfig.set('iGridHeight', 2);
      };
      if (oPortletConfig.get('iGridWidth') > 2) {
        oPortletConfig.set('iGridWidth', 2);
      };
    }

    //If the station belongs to the user, then the TileView will have full functionitly.
    //Otherwise it will be bare and no functionality when viewing other people's stations.
    var oTileView;

    if (oPortletConfig.get('sType') === 'ads') {
      oTileView = new _oViews.TileViewAds({
        configModel: oPortletConfig
      });
    } else {
      if (wl.data.isOwner) {
          oTileView = new _oViews.TileView({
            configModel: oPortletConfig
          });
        } else {
          oTileView = new _oViews.TileViewBare({
            configModel: oPortletConfig
          });
        }
    }
    
    oTileView.render();
    if (oPortletConfig.get('sType') !== 'ads') {
        oTileView.header.show(_headerViewFactory(oPortletConfig, oTileView));
        oTileView.footer.show(new _oViews.FooterView({
          configModel: oPortletConfig,
          tileView: oTileView
        }));
    }

    // need the contents view
    var oContentsView = _contentsViewFactory(oPortletConfig, oTileView);
    if (!oContentsView) {
      return;
    }
    oTileView.contents.show(oContentsView);
    // Tile view is now done.
    // Attach it if visible, if not add to hidden pool

    // Packery setup
    _$pack.append(oTileView.$el);
    _$pack.packery('appended', oTileView.$el);
    _$pack.packery('bindUIDraggableEvents', oTileView.$el);
    oTileView.setTileSize(_oGridConfig);
    oTileView.onRender();
    // we keep an internal array of all the portlet views that have been created
    _aTileViews[oTileView.cid] = oTileView;

    //Update the config with the tile cid
    //This is so that the Tile Panel will now which til to show/hide.
    oPortletConfig.set("sTileCid", oTileView.cid);
  };


  // General Portlet Views
  // ---------------------

  var _oViews = {};

  _oViews.TileView = Marionette.LayoutView.extend({
    template: window.tpl['portlet-tile'],
    tagName: 'div',
    className: '__tile',
    isBare: false, //Final Static value. Flag that this view is owner.
    attributes: function() {
      return {
        "data-viewid": this.cid
      };
    },
    setPosition: function(iPosition) {
      this.getConfig().set('iPosition', iPosition);
      this.footer.currentView.render(); // @DEBUG
    },
    initialize: function() {
      // constructor stuff

      // Event Callbacks
      this.listenTo(this, 'cmd:showText', function() {
        this.switchContentsView('text');
      });
      this.listenTo(this, 'cmd:showGraph', function() {
        this.switchContentsView('graph');
      });
      this.listenTo(this, 'cmd:hide', function() {
        _hideTile(this);
      });
    },
    switchContentsView: function(sViewName) {
      if (this.getConfig().hasView(sViewName)) {
        this.getConfig().set('sViewName', sViewName);
        var oNewView = _contentsViewFactory(this.getConfig(), this);
        this.contents.show(oNewView);
        oNewView.render();
        this.header.currentView.render();
        this.footer.currentView.render();
        this.getConfig().save();
      }
    },
    regions: {
      header: '.__headerContainer',
      footer: '.__footerContainer',
      contents: '.__contentsContainer'
    },
    getContentsView: function() {
      if (this.contents && this.contents.currentView) {
        return this.contents.currentView;
      }
      return false;
    },
    getHeaderView: function() {
      if (this.header && this.header.currentView) {
        return this.header.currentView;
      }
      return false;
    },
    _wlBindings: function() {
      if (!this.getContentsView()) {
        return;
      }
      var that = this;
      var oConfig = Marionette.getOption(this, 'configModel');
      var sType = oConfig.get('sType');
      // these settings do not apply to the 'show hidden' portlet
      if (sType === 'show_hidden') {
        return;
      }
      var resizableOptions = {
        grid: [_oGridConfig.width, _oGridConfig.height],
        animate: false,
        ghost: true,
        helper: 'portlet-resize-ghost'
      };
      if ((sType === 'temperature' && oConfig.get(
          'sViewName') === 'graph') || sType === 'structure_type_16'
          || sType === 'structure_type_65_aqi_group' 
          || sType === 'structure_type_65_aqi_trend') {
        resizableOptions.minWidth = 2 * _oGridConfig.width - 8;
      }
      if (sType.indexOf('wind_rose') !== -1) {
        resizableOptions.grid[1] = 2 * _oGridConfig.height;
        resizableOptions.minHeight = 2 * _oGridConfig.height - 20;
        resizableOptions.maxHeight = 2 * _oGridConfig.height - 8;
        resizableOptions.maxWidth = 2 * _oGridConfig.width - 8;

        this.$el.find('#rangeSel, #legendContainer').css('width',
          this.$el.width() + 'px');
      }
      this.$el.resizable(resizableOptions);
      this.$el.off('resizestop');
      this.$el.on('resizestop', function(event, ui) {
        if (ui) {
          that.onUserResize(ui);
          _$pack.packery();
        }
      });
    },
    onRender: function() {
      // draggable & resizeable
      // Only need to do this in onRender because it only needs to be
      // setup once after the $el is created
      this.$el.draggable({
        handle: '._drag-handle',
        cancel: '.config-button-container',
        scroll: true
      });
      // maintain other bindings that can change after $el is created
      this._wlBindings();
      return this;
    },
    onUserResize: function(ui) {
      // UI object comes from jQuery Resiable
      var iWidthUnits = 1 + Math.floor(ui.size.width / _oGridConfig.width);
      var iHeightUnits = 1 + Math.floor(ui.size.height / _oGridConfig
        .height);
      if (iWidthUnits <= 0 || iHeightUnits <= 0) {
        return;
      }
      var oConfig = Marionette.getOption(this, 'configModel');
      oConfig.set('iGridWidth', iWidthUnits);
      oConfig.set('iGridHeight', iHeightUnits);
      this.setTileSize(_oGridConfig);
      oConfig.save();
    },
    setTileSize: function(oSize) {
      var oConfig = Marionette.getOption(this, "configModel");
      var w = Math.min(oSize.numColumns, oConfig.get('iGridWidth'));
      var oContentsSize = oApp.config.grid.getContentSize(oSize, w,
        oConfig.get('iGridHeight'));
      var iDiff =
        2 * oApp.config.grid.tileBorder + 2 * oApp.config.grid.tilePadding +
        2 * oApp.config.grid.tileMargin;
      // set CSS for overall tile view
      this.$el.css({
        width: (oSize.width * w - iDiff) + 'px',
        height: (oSize.height * oConfig.get('iGridHeight') -
          iDiff) + 'px'
      });
      // set sizes for header, footer
      this.header.currentView.setWidth(oSize.width * w - iDiff);
      this.footer.currentView.setWidth(oSize.width * w - iDiff);
      // set sizes for contents view
      var oContentsView = this.getContentsView();
      oContentsView.setSize(oContentsSize.width, oContentsSize.height);

      //add class for wind_rose tile styling
      if (this.options.configModel.get("sType").indexOf("wind_rose") !== -1) {
        w == 2 ? oContentsView.$el.addClass("full-size") :
          oContentsView.$el.removeClass("full-size");
      }
      this._wlBindings();
    },
    // Return the PortletConfig model for this Portlet
    getConfig: function() {
      return Marionette.getOption(this, 'configModel');
    }
  });

  /**
   * The Public Tile View is used when viewing a public stations (not owned)
   * So many of the functionalities will not be available. Resize, Hamburger option, postiions, etc)
   */
  _oViews.TileViewBare = Marionette.LayoutView.extend({
    template: window.tpl['portlet-tile'],
    tagName: 'div',
    className: '__tile',
    isBare: true, //Final Static value. Flag that this view is public.
    attributes: function() {
      return {
        "data-viewid": this.cid
      };
    },
    setPosition: function(iPosition) {
      this.getConfig().set('iPosition', iPosition);
      this.footer.currentView.render(); // @DEBUG
    },
    regions: {
      header: '.__headerContainer',
      footer: '.__footerContainer',
      contents: '.__contentsContainer'
    },
    getContentsView: function() {
      if (this.contents && this.contents.currentView) {
        return this.contents.currentView;
      }
      return false;
    },
    getHeaderView: function() {
      if (this.header && this.header.currentView) {
        return this.header.currentView;
      }
      return false;
    },
    onRender: function() {
      return this;
    },
    setTileSize: function(oSize) {
      var oConfig = Marionette.getOption(this, "configModel");
      var w = Math.min(oSize.numColumns, oConfig.get('iGridWidth'));
      var oContentsSize = oApp.config.grid.getContentSize(oSize, w,
        oConfig.get('iGridHeight'));
      var iDiff =
        2 * oApp.config.grid.tileBorder + 2 * oApp.config.grid.tilePadding +
        2 * oApp.config.grid.tileMargin;
      // set CSS for overall tile view
      this.$el.css({
        width: (oSize.width * w - iDiff) + 'px',
        height: (oSize.height * oConfig.get('iGridHeight') -
          iDiff) + 'px'
      });
      // set sizes for header, footer
      this.header.currentView.setWidth(oSize.width * w - iDiff);
      this.footer.currentView.setWidth(oSize.width * w - iDiff);
      // set sizes for contents view
      var oContentsView = this.getContentsView();
      oContentsView.setSize(oContentsSize.width, oContentsSize.height);

      //add class for wind_rose tile styling
      if (this.options.configModel.get("sType").indexOf("wind_rose") !== -1) {
        w == 2 ? oContentsView.$el.addClass("full-size") :
          oContentsView.$el.removeClass("full-size");
      }
    },
    //		// Return the PortletConfig model for this Portlet
    getConfig: function() {
      return Marionette.getOption(this, 'configModel');
    }
  });

  /**
   * The Ads Tile View
   * Not resizable and not draggable
   */
  _oViews.TileViewAds = _oViews.TileViewBare.extend({
    className: '__tile ads',
    template: _.template('<div class="__contentsContainer"></div>'),
    initialize: function () {
	  this.listenTo(this, 'cmd:adshide', function() {
        _hideAdsTile(this);
      });
    },
    setPosition: function(iPosition) {
        this.getConfig().set('iPosition', iPosition);
    },
    setTileSize: function(oSize) {
        var oConfig = Marionette.getOption(this, "configModel");
        var w = Math.min(oSize.numColumns, oConfig.get('iGridWidth'));
        var oContentsSize = oApp.config.grid.getContentSize(oSize, w,
          oConfig.get('iGridHeight'));
        var iDiff =
          2 * oApp.config.grid.tileBorder + 2 * oApp.config.grid.tilePadding +
          2 * oApp.config.grid.tileMargin;
        // set CSS for overall tile view
        this.$el.css({
          width: (oSize.width * w - iDiff) + 'px',
          height: (oSize.height * oConfig.get('iGridHeight') -
            iDiff) + 'px'
        });
        // set sizes for contents view
        var oContentsView = this.getContentsView();
        // no header and footer -> contents takes all area
        oContentsView.setSize(oContentsSize.width, oContentsSize.width);
      },
  });

  _oViews.HeaderView = Marionette.ItemView.extend({
    initialize: function(options) {
      this.tileView = options.tileView;
      if (!this.model) {
        this.model = new Backbone.Model();
      }
    },
    template: window.tpl['portlet-header'],
    className: 'header _drag-handle',
    tagName: 'div',
    events: {
      'click .js-text': 'click_text',
      'click .js-graph': 'click_graph',
      'click .js-hide': 'click_hide'
    },
    setWidth: function(iWidth) {
      this.$el.width(iWidth);
      this.render();
    },
    click_text: function() {
      this.tileView.trigger('cmd:showText');
    },
    click_graph: function() {
      this.tileView.trigger('cmd:showGraph');
    },
    click_hide: function() {
      this.tileView.trigger('cmd:hide');
    },
    onBeforeRender: function() {
      var oConfig = Marionette.getOption(this, 'configModel');
      var sType = oConfig.get('sType');
      var lsid = oConfig.get('iLogicalSensorId');
      var sLangKey = 'portlet_title_' + sType;
      //check for air quality sensor tiles
      if (sType.indexOf('65') !== -1 && wl.data.aqsSensorData && wl.data.aqsSensorData[lsid]) {
      	if (wl.data.aqsSensorData[lsid].additionalData.AQ_ENVIRONMENT === "Indoors" &&
      	    sLangKey.indexOf('temp') === -1 && sLangKey.indexOf('hum') === -1) {
      		sLangKey += '_indoors';
      	}
      }
      this.model.set('portletTitle', sLangKey);
      return this;
    },
    templateHelpers: function() {
      var oConfig = Marionette.getOption(this, 'configModel');

      var sProductName = "";
      var sNodeName = "";
      var iPortNum = "";
      var sFormattedTime = "";
      var bShowStaleIcon = false;
      var lsid = oConfig.get("iLogicalSensorId");
      var oLogicalSensor = _getMaiaLogicalSensorByLsid(lsid);
      var tileData = wl.data.tilePanelData;

      for (var i in tileData) {
        if (tileData.hasOwnProperty(i)) {
          var iconLabel = tileData[i].nodeIconLabel;
          var nodeName = Utils.htmlDecode(tileData[i].nodeName);
          var sensors = tileData[i].sensors;
          for (var k in sensors) {
            var sensorName = sensors[k].sensorName;
            var matchedTile = _.find(sensors[k].tiles, {
              'logicalSensorId': lsid,
              'userPortletSettingId': oConfig.get(
                'iPortletSettingId')
            });

            if (matchedTile) {
              sProductName = Utils.getSubnameByStationType(iconLabel, sensorName) || nodeName;
            }
          }

        }
      }

      if (oLogicalSensor != null) {
        var tzOffset = Utils.getSensorOffset(oLogicalSensor);
        var iHat = Utils.getSensorHat(oLogicalSensor);
        var sensorLastUpdated = iHat + tzOffset;

        if (sensorLastUpdated !== 0 && wl.app.oMapper.checkLastUpdatedTime(
            sensorLastUpdated, wl.data.staleDataBufferSec)) {
          sFormattedTime = wl.app.oMapper.formatHappenedAtDateTime(
            iHat, tzOffset);
          bShowStaleIcon = true;
        }
        sNodeName = oLogicalSensor.nodeName;
        iPortNum = oLogicalSensor.portNum;
      } else if (wl.data.aqsSensorData && wl.data.aqsSensorData[lsid]) {
        var iAqsHatUtc = wl.data.aqsSensorData[lsid].additionalData.lastUpdated;
        var timezone = wl.data.aqsSensorData[lsid].additionalData.tz;
        var aqsTzOffsetSec = dayjs().tz(timezone).utcOffset()*60;
        var iAqsHatLocal = iAqsHatUtc + aqsTzOffsetSec;
        if (wl.app.oMapper.checkLastUpdatedTime(iAqsHatLocal, wl.data.staleDataBufferSec)) {
          sFormattedTime = wl.app.oMapper.formatHappenedAtDateTime(
            iAqsHatUtc, aqsTzOffsetSec);
          bShowStaleIcon = true;
        }
      } else if (oConfig.get('sType') === 'barometer') { //separate barometer tile from iss
        var barTzOffsetSec = 0;
        var iBarHatUtc = 0;
        var iBarHatLocal = 0;
        if (_hasBarometerData()) {
          barTzOffsetSec = wl.data.barometerData.tzOffsetSec;
          iBarHatUtc = wl.data.barometerData.lastUpdatedTs;
          iBarHatLocal = iBarHatUtc + barTzOffsetSec;
        }
        var iIssHatUtc = 0;
        var issTzOffsetSec = 0;
        var iIssHatLocal = 0;
        if (_hasStationData()) {
          iIssHatUtc = wl.data.stationData.time_stamp;
          issTzOffsetSec = wl.data.timezoneOffset * 60;
          iIssHatLocal = iIssHatUtc + issTzOffsetSec;
        }
        if (_hasBarometerData() && wl.app.oMapper.checkLastUpdatedTime(
            iBarHatLocal, wl.data.staleDataBufferSec)) {
          sFormattedTime = wl.app.oMapper.formatHappenedAtDateTime(
            iBarHatUtc, barTzOffsetSec);
          bShowStaleIcon = true;
        } else if (_hasStationData() && !_hasBarometerData() && wl.app
          .oMapper.checkLastUpdatedTime(iIssHatLocal, wl.data.staleDataBufferSec)
        ) {
          sFormattedTime = wl.app.oMapper.formatHappenedAtDateTime(
            iIssHatUtc, issTzOffsetSec);
          bShowStaleIcon = true;
        }
      } else if (wl.data.stationData != null && oConfig.get('sType') !==
        'barometer') {
        var tzOffsetSec = wl.data.timezoneOffset * 60;
        var ISSLastUpdated = wl.data.stationData.time_stamp +
          tzOffsetSec;
        if (wl.app.oMapper.checkLastUpdatedTime(ISSLastUpdated, wl.data
          .staleDataBufferSec)) {
          //Iss loop last recieved is in UTC
          var loopUtcHat = wl.data.stationData.time_stamp;
          sFormattedTime = wl.app.oMapper.formatHappenedAtDateTime(
            loopUtcHat, tzOffsetSec);
          if (!_.includes(['forecast', 'sunrise', 'moon_phase'],
            oConfig.get('sType'))) {
            bShowStaleIcon = true;
          }
        }
      }
      return {
        oConfig: oConfig,
        nodeName: sNodeName,
        sProductName: sProductName,
        iPortNum: iPortNum,
        bShowStaleIcon: bShowStaleIcon,
        sFormattedTime: sFormattedTime
      };
    }
  });

  /**
   * This header is for when viewing of public stations.
   * The hamburger menu is not available and mouse move pointer is not present
   */
  _oViews.HeaderViewBare = _oViews.HeaderView.extend({
    template: window.tpl['portlet-header-bare'],
    className: 'header'
  });


  _oViews.FooterView = Marionette.ItemView.extend({
    ui: {
      'airQualityIndexIcon': '.wl-icon.icon-gear'
    },
    events: {
      'click @ui.airQualityIndexIcon': 'showAirQualityIndexSetting'
    },
    template: window.tpl['portlet-footer'],
    templateHelpers: function() {
      var that = this;
      var oConfig = Marionette.getOption(this, 'configModel');
      var sType = oConfig.get('sType');
      var showAqiSettings = false;
      var gridWidth = oConfig.get('iGridWidth');
      
      //determine whether to show aqi settings in footer
      if (_.intersection(['aqi', 'aqs', 'nowcast'], _.words(sType)).length) {
        showAqiSettings = true;
        this.$el.addClass('bring-over');
      }

      //Get the node name for the sensor
      var sNodeName = "Weather Station"; //By default it is Legacy ISS. Alternative is to detect the oConfig.get("iPortletTypeId")
      var sProductName = "";
      var iPortNum = -1;

      //for weather station do not show footer
      var bShowFooter = false;

      //We are care about maia sensors.
      var oLogicalSensor = _getMaiaLogicalSensorByLsid(oConfig.get(
        "iLogicalSensorId"));
      if (oLogicalSensor != null) {
        sNodeName = oLogicalSensor.nodeName;
        sProductName = oLogicalSensor.productName;
        iPortNum = oLogicalSensor.portNum;
        // Hide footer for WW and Console
        bShowFooter = !Boolean((oLogicalSensor.dataStructureTypeId > 500 && oLogicalSensor.dataStructureTypeId < 530) ||
            (oLogicalSensor.dataStructureTypeId > 600 && oLogicalSensor.dataStructureTypeId < 630));
      }
      if (showAqiSettings) {
        bShowFooter = true;
      }
      return {
        oConfig: oConfig,
        cid: Marionette.getOption(that, 'tileView').cid,
        position: oConfig.get('iPosition'),
        nodeName: sNodeName,
        iPortNum: iPortNum,
        sProductName: sProductName,
        bShowFooter: bShowFooter,
        showAqiSettings: showAqiSettings,
        gridWidth: gridWidth
      };
    },
    className: 'footer',
    tagName: 'div',
    model: new Backbone.Model(),
    initialize: function () {
      this.setAirQualityIndexName();
      oModule.on('aqi:change', this.setAirQualityIndexName.bind(this), this);
    },
    onRender: function() {
      return this;
    },
    onDestroy: function () {
      oModule.off('aqi:change', null, this);
    },
    setWidth: function(iWidth) {
      this.$el.width(iWidth);
      this.render();
    },
    setAirQualityIndexName: function () {
      var airQualitySchemes = wl.__bootstrap_availableSchemes;
      var selectedSchemeId = wl.__bootstrap_airQualitySchemeId;
      wl.data.userAccountSetting.airQualitySchemeId = selectedSchemeId;

      this.model.set('airQualityIndexName', _.get(_.find(airQualitySchemes,
        {'iaqSchemeId': selectedSchemeId}), 'saqLongName'));
      this.render();
    },
    handleTiles: function () {
    	var sNowCastType = 'structure_type_65_nowcast';
    	var s3hourType = 'structure_type_65_3hr_aqi';
    	var selectedSchemeId = wl.__bootstrap_airQualitySchemeId;
    	var lsid = this.options.configModel.get('iLogicalSensorId');
    	
      function swapTiles(sTypeToRemove, sTypeToAdd) {
      	var viewToRemove = oModule.getTileByType(sTypeToRemove);
      	if (viewToRemove) _removeTile(viewToRemove);
      	//check if view is already present
      	var viewToAdd = oModule.getTileByType(sTypeToAdd);
      	var configToAdd = wl.data.portletConfigs.find({sType: sTypeToAdd});
      	if (!viewToAdd && configToAdd) {
        	configToAdd.set('iAvailable', 1);
        	oModule.addPortlet(configToAdd);
          //unhide all options for current lsid if air quality sensor
          $(".js-tile-option[data-lsid="+ lsid +
          "]").closest('.wl-checkbox').removeClass('hidden');
          
          //hide checkbox in the right panel
          $(".js-tile-option[data-lsid="+ lsid +
          "]").parent().find("[data-l10n-id*="+ sTypeToRemove +
          	"]").closest('.wl-checkbox').addClass('hidden');
      	}
      }
      
      //show 3hr tile for canada and nowcast for others
      if (selectedSchemeId === wl.constants.canadaAqiId) {
      	swapTiles(sNowCastType, s3hourType);
      	
      }
      if (selectedSchemeId !== wl.constants.canadaAqiId) {
      	swapTiles(s3hourType, sNowCastType);
      }
    },
    triggerAQIchangeEvent: function () {
      wl.app.Ajax.refresh();
      oModule.trigger('aqi:change');
      this.handleTiles();
    },
    showAirQualityIndexSetting: function() {
      // Stop module first if already started
      if (oApp.oAirQualityIndex) {
        oApp.oAirQualityIndex.stop();
      }
      
      oApp.oAirQualityIndex.start(this.triggerAQIchangeEvent.bind(this));
    }
  });

  // Generic Contents Base View
  _oViews.ContentsView = Marionette.ItemView.extend({
    size: {
      width: oApp.config.grid.tileWidth,
      height: oApp.config.grid.tileHeight
    },
    attributes: function() {
      return {
        'data-viewid': this.cid
      };
    },
    setSize: function() {
      throw new Error("setSize - Not implemented in base class");
    },
    getSize: function() {
      return {
        width: this.size.width,
        height: this.size.height
      };
    },
    updateData: function() {
      this.render();
    }
  });

  // Generic contents view for a highcharts display
  _oViews.BaseGraphView = _oViews.ContentsView.extend({
    className: 'portlet-base graph-view',
    template: window.tpl['portlet-graph-basic'],
    initialize: function(options) {
      // constructor
      this.lsid = options.lsid;
      this.options = options;
      this.model = new Backbone.Model();
      this.size = options.size;
      this.setDefaultChartOptions();
      this.promises = [];
      if (typeof this.afterInit === 'function') {
        this.afterInit();
      }
    },
    setDefaultChartOptions: function() {
      this.oChartOptions = _highchartsOptions({});
      this.oChart = false;
      // end constuctor
    },
    buildGraph: function() {
      throw new Error("buildGraph - Not implemented in base class");
    },
    onRender: function() {
      var self = this;
      Promise.all(this.promises).then(function() {
        self.buildGraph();
        self.$el.css({
          width: self.size.width,
          height: self.size.height
        });
      });
      return this;
    },
    setSize: function(iWidth, iHeight) {
      this.size.width = iWidth;
      this.size.height = iHeight;
      if (this.oChart) {
        this.oChart.setSize(iWidth - 4, iHeight - 8, true);
      }
      this.$el.css({
        width: this.size.width,
        height: this.size.height
      });
    },
    getSolidGaugeChartOptions: function () {
      return _highchartsOptions({
        chart: {
          type: 'solidgauge'
        },
        pane: {
          center: ['50%', '66%'],
          size: '80%',
          startAngle: -90,
          endAngle: 90,
          background: {
            backgroundColor: '#eee', // bg color of the arc
            innerRadius: '60%',
            outerRadius: '100%',
            shape: 'arc'
          }
        },
        // the value axis
        yAxis: {
          stops: [
            [0.1, this.color]
          ],
          lineWidth: 0,
          minorTickInterval: null,
          //tickPixelInterval: 100,
          minTickInterval: 1,
          tickWidth: 1,
          title: {
            y: -70
          },
          labels: {
            y: 15,
            step: 100,
            distance: -15
          },
          min: 0,
          max: this.maxDialVal
        },
        credits: {
          enabled: false
        },
        plotOptions: {
          solidgauge: {
            dataLabels: {
              y: 5,
              borderWidth: 0,
              useHTML: true,
              zIndex: 1
            }
          }
        }
      });
    }
  });

  _oViews.BaseTextView = _oViews.ContentsView.extend({
    className: 'portlet-base text-view',
    templateHelpers: function() {
      return {
        oConfig: Marionette.getOption(this, 'portletConfig')
      };
    },
    onRender: function() {
      this.$el.css({
        width: this.size.width,
        height: this.size.height
      });
      this.centerContents();
      return this;
    },
    setSize: function(iWidth, iHeight) {
      this.size.width = iWidth;
      this.size.height = iHeight;
      return this.render();
    },
    centerContents: function() {
      this.$('.out:not(.alarm-output)').position({
        my: 'center',
        at: 'center',
        of: this.$el
      });
      return this;
    }
  });

  //Extend the Modal Footer to capture the events needed for the sensor options
  _oViews.ModalFooterView = wl.davis.views.ModalStandardFooterView.extend({
    onCancel: function() {
      wl.app.Modal.trigger('modal:cancel');
      wl.app.Modal.hideModal();
    },
    onUpdate: function() {
      wl.app.Modal.trigger('modal:update');
      wl.app.Modal.hideModal();
    }
  });

  /**
   * Contents Views
   * --------------
   *
   * Views for displaying a Portlet or the Config of a portlet.
   * If you add or remove a view here, be sure to update the data in tbl_portlet_types
   * The data in tbl_portlet_types must match the names here.
   */

  // <editor-fold defaultstate="collapsed" desc="!!! Expand for Contents Views Defintions">
  var _oContentsViews = {};

  //make views visible from other module for views extending purpose
  oModule.oContentsViews = _oContentsViews;
  oModule.oViews = _oViews;


  /*************************
   * ISS - Temperature
   *************************/
  _oContentsViews.temperature_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-temperature graph-view',
    afterInit: function() {
      this.model.set('unit', wl.data.unitLabelTemperature);
      var that = this;
      this.categoryLabels = [];
      var categoriesKeys = ['surface_temp', 'temp', 'hum', 'sensor_temp_out', 'sensor_temp_chill',
        'sensor_temp_heat', 'sensor_temp_dew', 'sensor_wet_bulb'
      ];
      _.each(categoriesKeys, function(key) {
        var prom = document.l10n.formatValue(key);
        that.promises.push(prom);
        prom.then(function(result) {
          that.categoryLabels[key] = result;
        });
      });

      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.positioner = function(boxWidth,
        boxHeight, point) {
        return {
          x: point.plotX,
          y: point.plotY + 30
        };
      };
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.oChartOptions.chart.marginBottom = 70;
      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.yAxis = {
        title: null,
        maxPadding: .1,
        softMax: 1,
        labels: {
          useHTML: true,
          formatter: function() {
            return Utils.formatSensorReading('Temperature', this.value,
              wl.data.userAccountSetting) + ' ' + that.model.get(
              'unit');
          }
        }
      };
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return Utils.formatSensorReading('Temperature', this.y, wl.data
            .userAccountSetting)
        }
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.xAxis = this.getXAxis();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      //ks notes: below line is where highchart is actually being rendered
      var w, h;
      w = this.size.width;
      h = this.size.height - 6;
      this.oChart.setSize(w, h, true);
    },
    getXAxis: function () {
      var categories = [];
      if (this.oChartOptions.series[0]) {
    	  this.oChartOptions.series[0].data.forEach(function(item) {
    		  categories.push(this.categoryLabels[item.id])
    	  }.bind(this));
      }
      return [{
        categories: categories,
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          style: {
            textOverflow: 'none'
          }
        }
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
      var minValue = this.oChart.series[0].yAxis.dataMin;
      if (minValue < 0) {
          this.oChart.yAxis[0].setExtremes(minValue - 1); //substract 1 to avoid zero column height
          this.oChart.yAxis[0].threshold = this.oChart.yAxis[0].min;
          this.oChart.series[0].update(this.getSeries()[0]);
      } else {
          this.oChart.yAxis[0].setExtremes(this.oChart.yAxis[0].threshold);
      }
    },
    getSeries: function() {
      var iTempOutVal = null;
      var iWindChillVal = null;
      var iHeatIndexVal = null;
      var iDewPointVal = null;
      var iWetBulbVal = null;
      if (_hasStationData() && !wl.app.oMapper.checkOutdatedData(this
          .lsid)) {
        iTempOutVal = wl.data.stationData.temp_out;
        iWindChillVal = wl.data.stationData.temp_chill;
        iHeatIndexVal = wl.data.stationData.temp_heat;
        iDewPointVal = wl.data.stationData.temp_dew;
        iWetBulbVal = wl.data.stationData.temp_wet_bulb;
      } else if (wl.app.oMapper.checkOutdatedData(this.lsid)) {
        this.oChartOptions.yAxis.min = 0;
        this.oChartOptions.yAxis.max = 100;
      }
      var arrData = [
        _createHighChartDataPoint('sensor_temp_out', this.categoryLabels[
          'sensor_temp_out'], iTempOutVal, '#c42728'),
        _createHighChartDataPoint('sensor_temp_chill', this.categoryLabels[
          'sensor_temp_chill'], iWindChillVal, '#3288c2'),
        _createHighChartDataPoint('sensor_temp_heat', this.categoryLabels[
          'sensor_temp_heat'], iHeatIndexVal, '#e97f24'),
        _createHighChartDataPoint('sensor_temp_dew', this.categoryLabels[
          'sensor_temp_dew'], iDewPointVal, '#38916d'),
        _createHighChartDataPoint('sensor_wet_bulb', this.categoryLabels[
          'sensor_wet_bulb'], iWetBulbVal, '#55a8cc')
      ]
      
      if (_.every(arrData, {
          y: 0
        }) && this.oChart.yAxis) {
        this.oChart.yAxis[0].setExtremes(0, 5);
      }

      var minVal = this.getMinVal(arrData);
      var threshold = 0;
      if (minVal < 0) {
        this.oChartOptions.yAxis.min = Math.floor(minVal / 5) * 5;
        threshold = this.oChart ? this.oChart.yAxis[0].min : _getThresholdForNegativeVal(minVal);
      }

      return [{
        id: 'temp',
        name: 'temperature',
        colorByPoint: true,
        data: arrData,
        threshold: threshold
      }];
    },
    getMinVal: function(arrData) {
      return arrData.map(function(elem) {
        return elem.y;
      }).reduce(function(a, b) {
        return Math.min(a, b)
      });
    },
    formatTemp: function(data) {
      return Utils.formatSensorReading('Temperature', data, wl.data.userAccountSetting);
    },
    _getTooltip: function(oData) {
      var oTplData = {
        unit: this.model.get('unit'),
        tooltip_text: 'tooltip_value_unit',
        name: oData.key,
        current_value: this.formatTemp(oData.y)
      };

      var sTempOutHiVal = '--';
      var sTempOutLowVal = '--';
      var sTempInHiVal = '--';
      var sTempInLowVal = '--';
      var sWindChillLowVal = '--';
      var sHeatIndexHiVal = '--';
      var sDewPointHiVal = '--';
      var sDewPointLowVal = '--';
      var sWetBulbVal = '--';
      var sWetBulbLowVal = '--';
      if (_hasStationHilow()) {
        if (!_isDashed32767(wl.data.stationHilow.temp_out_hi)) {
          sTempOutHiVal = wl.data.stationHilow.temp_out_hi;
        }
        if (!_isDashed32767(wl.data.stationHilow.temp_out_low)) {
          sTempOutLowVal = wl.data.stationHilow.temp_out_low;
        }
        if (!_isDashed32767(wl.data.stationHilow.temp_in_hi)) {
          sTempInHiVal = wl.data.stationHilow.temp_in_hi;
        }
        if (!_isDashed32767(wl.data.stationHilow.temp_in_low)) {
          sTempInLowVal = wl.data.stationHilow.temp_in_low;
        }
        if (!_isDashed32767(wl.data.stationHilow.chill_low)) {
          sWindChillLowVal = wl.data.stationHilow.chill_low;
        }
        if (!_isDashed32767(wl.data.stationHilow.heat_hi)) {
          sHeatIndexHiVal = wl.data.stationHilow.heat_hi;
        }
        if (!_isDashed32767(wl.data.stationHilow.dew_hi)) {
          sDewPointHiVal = wl.data.stationHilow.dew_hi;
        }
        if (!_isDashed32767(wl.data.stationHilow.dew_low)) {
          sDewPointLowVal = wl.data.stationHilow.dew_low;
        }
        if (!_isDashed32767(wl.data.stationHilow.wet_bulb_low)) {
          sWetBulbLowVal = wl.data.stationHilow.wet_bulb_low;
        }
      }

      switch (oData.point.id) {
        case 'sensor_temp_out':
          oTplData.hi_value = this.formatTemp(sTempOutHiVal);
          oTplData.low_value = this.formatTemp(sTempOutLowVal);
          break;
        case 'sensor_temp_in':
          oTplData.hi_value = this.formatTemp(sTempInHiVal);
          oTplData.low_value = this.formatTemp(sTempInLowVal);
          break;
        case 'sensor_temp_chill':
          oTplData.low_value = this.formatTemp(sWindChillLowVal);
          break;
        case 'sensor_temp_heat':
          oTplData.hi_value = this.formatTemp(sHeatIndexHiVal);
          break;
        case 'sensor_temp_dew':
          oTplData.hi_value = this.formatTemp(sDewPointHiVal);
          oTplData.low_value = this.formatTemp(sDewPointLowVal);
          break;
        case 'sensor_wet_bulb':
          oTplData.low_value = this.formatTemp(sWetBulbLowVal);
          break;
      }
      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  _oContentsViews.show_hidden_main = _oViews.ContentsView.extend({
    template: window.tpl['portlet-show-hidden'],
    className: 'show_hidden_portlet',
    events: {
      'click': 'onClick'
    },
    initialize: function() {
      this.size = Marionette.getOption(this, 'size');
    },
    setSize: function(w, h) {
      this.size.width = w;
      this.size.height = h;
      return this.render();
    },
    onRender: function() {
      this.$el.css({
        width: this.size.width + 'px',
        height: this.size.height + 'px'
      });
      this.centerContents();
      return this;
    },
    centerContents: function() {
      this.$('.out').position({
        my: 'center',
        at: 'center',
        of: this.$el
      });
      return this;
    },
    onClick: function() {
      _openOptionsModal();
    }
  });

  /************************
   * ISS - Humidity
   ************************/
  _oContentsViews.humidity_graph = _oViews.BaseGraphView.extend({
    options: {
      current: 'hum_out',
      high: 'hum_out_hi',
      low: 'hum_out_low'
    },
    className: 'portlet-humidity graph-view',
    maxDialVal: 100, //the max value for the dial. This is set by the getSeries function
    afterInit: function() {
      var that = this;
      this.model.set('unit', wl.data.unitLabelPercent);
      this.model.set('max_unit', 100);
      this.color = '#38916d';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.oChart = false;
      this.size = Marionette.getOption(this, 'size');
    },

    buildGraph: function() {
      this.oChartOptions.yAxis.max = this.maxDialVal;
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var sData = DASH_VALUE;
      if (_hasStationData() && !_isDashed255(wl.data.stationData[this
          .options.current]) && !wl.app.oMapper.checkOutdatedData(
          this.lsid)) {
        sData = wl.data.stationData[this.options.current];
        this.maxDialVal = Utils.slidingScaleMax(sData);
      }
      return [{
        id: 'humidity',
        name: [this.options.current],
        data: [sData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            Utils.formatSensorReading("Humidity", sData, wl.data.userAccountSetting) +
            '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            this.model.get('unit') + '</span></div>'
        }
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function() {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit',
        unit: this.model.get('unit')
      };

      var currentVal = DASH_VALUE;
      if (_hasStationData() && !wl.app.oMapper.checkOutdatedData(this
          .lsid) && !_isDashed255(wl.data.stationData[this.options.current])) {
        currentVal = wl.data.stationData[this.options.current];
      }

      var highVal = DASH_VALUE;
      var lowVal = DASH_VALUE;
      if (_hasStationHilow() && !wl.app.oMapper.checkOutdatedData(
          this.lsid)) {
        if (!_isDashed255(wl.data.stationHilow[this.options.high])) {
          highVal = wl.data.stationHilow[this.options.high];
        }
        if (!_isDashed255(wl.data.stationHilow[this.options.low])) {
          lowVal = wl.data.stationHilow[this.options.low];
        }
      }
      oTplData.current_value = Utils.formatSensorReading('Humidity',
        currentVal, wl.data.userAccountSetting);
      oTplData.hi_value = Utils.formatSensorReading('Humidity',
        highVal, wl.data.userAccountSetting);
      oTplData.low_value = Utils.formatSensorReading('Humidity',
        lowVal, wl.data.userAccountSetting);

      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /*************************************
   * ISS - Inside Temp/Hum
   *************************************/
  _oContentsViews.inside_temp_hum_graph = _oViews.BaseGraphView.extend({
    className: 'inside_temp_hum_graph graph-view',
    portletSensorData: [],
    afterInit: function() {
      var that = this;
      this.translationKeys = ['temp', 'hum'];
      this.translations = [];
      this.promises = _getTranslation(this.translationKeys, this.translations);
      this.model.set('unit', wl.data.unitLabelPercent);
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.positioner = function(boxWidth,
        boxHeight, point) {
        return {
          x: point.plotX,
          y: point.plotY + 30
        };
      };
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.oChartOptions.chart.alignTicks = false;
      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.marginBottom = 50;
      this.oChartOptions.plotOptions.column.grouping = false;
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return this.point.id === "" ? undefined : Utils.formatSensorReading(
            'Temperature', this.y, wl.data.userAccountSetting);
        };
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.xAxis = this.getXAxis();
      this.oChartOptions.yAxis = this.getYAxis();
      this.oChart = new Highcharts.Chart(this.oChartOptions);

      var w, h;

      w = this.size.width - 10;
      h = this.size.height - 10;
      this.oChart.setSize(w, h, true);
    },
    getSeries: function() {
      var dTemp = null;
      var dHum = null;

      if (_hasStationData() && !wl.app.oMapper.checkOutdatedData(this
          .lsid)) {
        if (Utils.dashFilterCheck("d_temp_in", wl.data.stationData.temp_in)) {
          dTemp = wl.data.stationData.temp_in;
        }

        if (Utils.dashFilterCheck("i_hum_in", wl.data.stationData.hum_in)) {
          dHum = wl.data.stationData.hum_in;
        }
      }

      var threshold = 0;
      if (dTemp < 0) {
        this.oChartOptions.yAxis.min = Math.floor(dTemp / 5) * 5;
        threshold = this.oChart ? this.oChart.yAxis[0].min : _getThresholdForNegativeVal(dTemp);
      }

      return [{
        id: 'temp',
        yAxis: 0, //Map to to yAxis Label index.
        data: [_createHighChartDataPoint(this.lsid + '_temp', " ",
          dTemp, "#c42728"), {
          y: 0,
          id: '',
          color: 'transparent'
        }],
        threshold: threshold
      }, {
        id: 'hum',
        yAxis: 1, //Map to to yAxis Label index.
        data: [{
          y: 0,
          id: '',
          color: 'transparent'
        }, _createHighChartDataPoint(this.lsid + '_hum', " ",
          dHum, "#f0c619")]
      }];
    },
    getXAxis: function() {
      return [{
        categories: [this.translations['temp'], this.translations[
          'hum']],
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          style: {
            textOverflow: 'none'
          }
        }
      }];
    },
    getYAxis: function() {
      var minRange = null;
      var min = null;
      if (!this.oChartOptions.series[0].data[0].y) {
        minRange = 50;
        min = 0;
      }

      return [{
        labels: {
          format: '{value}' + wl.data.unitLabelTemperature
        },
        title: null,
        opposite: false,
        min: min,
        softMax: 1,
        //minRange: minRange
      }, {
        labels: {
          format: '{value}' + wl.data.unitLabelPercent

        },
        max: 100,
        gridLineWidth: 0,
        title: null,
        opposite: true
      }]
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
      var minValue = this.oChart.series[0].yAxis.dataMin;
      if (minValue < 0) {
          this.oChart.yAxis[0].setExtremes(minValue - 1); //substract 1 to avoid zero column height
          this.oChart.yAxis[0].threshold = this.oChart.yAxis[0].min;
          this.oChart.series[0].update(this.getSeries()[0]);
      } else {
          this.oChart.yAxis[0].setExtremes(this.oChart.yAxis[0].threshold);
      }
      this.oChart.series[1].update(this.getSeries()[1]);
    },
    _getTooltip: function(oHcData) {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit'
      };

      switch (oHcData.point.id) {
        case this.lsid + '_temp':
          oTplData.unit = wl.data.unitLabelTemperature;
          oTplData.name = "Temperature";
          oTplData.current_value = Utils.formatSensorReading(
            'Temperature', wl.data.stationData.temp_in, wl.data.userAccountSetting
          );
          oTplData.hi_value = Utils.formatSensorReading('Temperature',
            wl.data.stationHilow.temp_in_hi, wl.data.userAccountSetting
          );
          oTplData.low_value = Utils.formatSensorReading(
            'Temperature', wl.data.stationHilow.temp_in_low, wl.data
            .userAccountSetting);
          break;
        case this.lsid + '_hum':
          oTplData.unit = wl.data.unitLabelPercent;
          oTplData.name = "Humidity";
          oTplData.current_value = Utils.formatSensorReading(
            'Humidity', wl.data.stationData.hum_in, wl.data.userAccountSetting
          );
          oTplData.hi_value = Utils.formatSensorReading('Humidity',
            wl.data.stationHilow.hum_in_hi, wl.data.userAccountSetting
          );
          oTplData.low_value = Utils.formatSensorReading('Humidity',
            wl.data.stationHilow.hum_in_low, wl.data.userAccountSetting
          );
          break;
        default:
          return false;
      }
      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /*******************
   * ISS - ET
   ******************/
  _oContentsViews.et_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-et graph-view',
    afterInit: function() {
      var that = this;
      this.categoryLabels = [];
      var categoriesKeys = ['day', 'month', 'year'];
      _.each(categoriesKeys, function(key) {
        var prom = document.l10n.formatValue(key);
        that.promises.push(prom);
        prom.then(function(result) {
          that.categoryLabels[key] = result;
        });
      });
      this.model.set('unit', wl.data.unitLabelRainEt);
      this.colorDay = '#29b574';
      this.colorMonth = '#29b574';
      this.colorYear = '#3288c2';
      this.oChartOptions.yAxis = {
        labels: {
          formatter: function() {
            return Utils.formatSensorReading('ET', this.value, wl
              .data.userAccountSetting) + " " + that.model.get(
              'unit');
          }
        },
        title: null
      };
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return Utils.formatSensorReading('ET', this.y, wl.data.userAccountSetting)
        }
      this.oChartOptions.chart.marginTop = 24;
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var iEtDay = null;
      var iEtMonth = null;
      var iEtYear = null;
      if (_hasStationData()) {
        iEtDay = wl.data.stationData.et_day;
        iEtMonth = wl.data.stationData.et_month;
        iEtYear = wl.data.stationData.et_year;
      }

      //If all values are 0, then we need to set yaxis max so that the yaxis is shown.
      if (iEtDay === 0 && iEtYear === 0 && iEtYear === 0) {
        this.oChartOptions.yAxis.min = 0;
        this.oChartOptions.yAxis.max = 1;
      }
      var arrData = [
        _createHighChartDataPoint('sensor_et_day', this.categoryLabels[
          'day'], iEtDay, this.colorDay),
        _createHighChartDataPoint('sensor_et_month', this.categoryLabels[
          'month'], iEtMonth, this.colorMonth),
        _createHighChartDataPoint('sensor_et_year', this.categoryLabels[
          'year'], iEtYear, this.colorYear)
      ]

      return [{
        id: 'et',
        name: 'evapotranspiration',
        colorDay: this.colorDay,
        colorMonth: this.colorMonth,
        colorYear: this.colorYear,
        data: arrData
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    }
  });

  /***********************
   * ISS - Current Rain
   ***********************/
  _oContentsViews.rain_current_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-rain-current graph-view',
    afterInit: function() {
      var translationKeys = ['day', 'storm', 'rate'];
      this.translations = [];
      this.promises = _getTranslation(translationKeys, this.translations);
      this.model.set('unit', wl.data.unitLabelRainEt);
      this.dayColor = '#3c464c';
      this.stormColor = '#00a89c';
      this.rateColor = '#29b574';
      this.oChartOptions.plotOptions.series.stacking = 'normal';
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return this.point.id === "" ? undefined : Utils.formatSensorReading(
            'Rain', this.y, wl.data.userAccountSetting)
        }
      this.oChartOptions.chart.marginTop = 24;
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.xAxis = this.getXAxis();
      this.oChartOptions.yAxis = this.getYAxis();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getXAxis: function() {
      return [{
        categories: [this.translations['day'], this.translations[
          'storm'], this.translations['rate']],
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          x: 5,
          style: {
            textOverflow: 'none'
          }
        }
      }];
    },
    getYAxis: function() {
      var that = this;
      var iRainRateVal = null;
      var tickPositions = null;
      var gridLineWidth = 1;
      var yAxisMin = null;
      var yAxisMax = null;
      if (_hasStationData()) {
        iRainRateVal = wl.data.stationData.rain_rate;
      }
      //If rate value is 0, then we need to set yaxis max so that the yaxis is shown.
      if (iRainRateVal === 0) {
        yAxisMin = 0;
        yAxisMax = Utils.formatSensorReading('Rain', 0.2, wl.data.userAccountSetting);
        tickPositions = [0, Utils.formatSensorReading('Rain', 0.1, wl
          .data.userAccountSetting), yAxisMax];
        gridLineWidth = 0;
      }

      return [{
        labels: {
          formatter: function() {
            return Utils.formatSensorReading('Rain', this.value,
              wl.data.userAccountSetting) + ' ' + that.model.get(
              'unit');
          }
        },
        title: null,
        opposite: false
      }, {
        labels: {
          formatter: function() {
            return Utils.formatSensorReading('Rain', this.value,
              wl.data.userAccountSetting) + ' ' + that.model.get(
              'unit') + "/hr";
          }
        },
        title: null,
        opposite: true,
        min: yAxisMin,
        max: yAxisMax,
        tickPositions: tickPositions,
        gridLineWidth: gridLineWidth
      }]
    },
    getSeries: function() {
      var iRainDayVal = null;
      var iRainStormVal = null;
      var iRainRateVal = null;
      if (_hasStationData() && !wl.app.oMapper.checkOutdatedData(this
          .lsid)) {
        iRainDayVal = wl.data.stationData.rain_day;
        iRainStormVal = wl.data.stationData.rain_storm;
        iRainRateVal = wl.data.stationData.rain_rate;
      }

      return [{
        id: 'day_storm',
        yAxis: 0, //Map to to yAxis Label index.
        data: [_createHighChartDataPoint('sensor_rain_day', 'day',
            iRainDayVal, this.dayColor),
          _createHighChartDataPoint('sensor_rain_storm',
            'storm', iRainStormVal, this.stormColor), {
            y: 0,
            id: ''
          }
        ]
      }, {
        id: 'rate',
        yAxis: 1, //Map to to yAxis Label index.
        data: [{
          y: 0,
          id: ''
        }, {
          y: 0,
          id: ''
        }, _createHighChartDataPoint('sensor_rain_rate',
          'rate', iRainRateVal, this.rateColor)]
      }]
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0], false);
      this.oChart.series[1].update(this.getSeries()[1], false);
      this.oChart.redraw();
    }
  });

  /******************************
   * ISS - Total Rain
   ******************************/
  _oContentsViews.rain_total_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-rain-total graph-view',
    afterInit: function() {
      var that = this;
      this.categoryLabels = [];
      var categoriesKeys = ['month', 'year'];
      _.each(categoriesKeys, function(key) {
        var prom = document.l10n.formatValue(key);
        that.promises.push(prom);
        prom.then(function(result) {
          that.categoryLabels[key] = result;
        });
      });
      this.model.set('unit', wl.data.unitLabelRainEt);
      this.model.set('hi', 400);
      this.model.set('low', 50);
      this.monthColor = '#29b574';
      this.yearColor = '#3288c2';
      this.oChartOptions.yAxis.labels = {
        useHTML: true,
        formatter: function() {
          if (this.value > 1000) {
            return Utils.abbreviateNumber(this.value, wl.data.userAccountSetting) +
              ' ' + that.model.get('unit');
          }
          return Utils.formatSensorReading('Rain', this.value, wl
            .data.userAccountSetting) + ' ' + that.model.get(
            'unit');
        },
        style: {
          textAlign: "right"
        },
        title: null
      };
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return Utils.formatSensorReading('Rain', this.y, wl.data.userAccountSetting)
        };
      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.spacingLeft = 0;
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];

      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 1, this.size.height - 4);

      return this;
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    getSeries: function() {
      var iRainMonthVal = null;
      var iRainYearVal = null;
      if (_hasStationData()) {
        iRainMonthVal = wl.data.stationData.rain_month;
        iRainYearVal = wl.data.stationData.rain_year;
      }
      //If all values are 0, then we need to set yaxis max so that the yaxis is shown.
      if (iRainMonthVal === 0 && iRainYearVal === 0) {
        this.oChartOptions.yAxis.min = 0;
        this.oChartOptions.yAxis.max = 1;
      }
      var arrData = [
        _createHighChartDataPoint('sensor_rain_month', this.categoryLabels[
          'month'], iRainMonthVal, this.monthColor),
        _createHighChartDataPoint('sensor_rain_year', this.categoryLabels[
          'year'], iRainYearVal, this.yearColor)
      ]

      return [{
        id: 'rain-total',
        name: 'rain-total',
        colorByPoint: true,
        data: arrData
      }];
    }
  });

  /***********************************
   * ISS - Solar Radiation
   ***********************************/
  _oContentsViews.solar_rad_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-solar-rad graph-view',
    maxDialVal: 1000, //The max val for the dial. This is set in the getSeries function
    afterInit: function() {
      var that = this;
      this.model.set('unit', Utils.getAccountUnitsByDataName(wl.data.userAccountSetting,
        'Solar Radiation'));
      this.color = '#c42728';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var sData = '--';
      if (_hasStationData() && !_isDashed32767(wl.data.stationData.solar_rad) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        sData = wl.data.stationData.solar_rad;
      }

      //Ensure that the max limit is adjusted if the solar radition is above 1000
      if (sData > 1000) {
        this.oChartOptions.yAxis.max = 1367;
      }

      var sFormat =
        '<div style="text-align:center"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
        sData + '</span><br/>' +
        '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
        this.model.get('unit') + '</span></div>';

      return [{
        id: 'solar-rad',
        name: 'sensor_solar_rad',
        data: [sData],
        //color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          enabled: true,
          //						style: {
          //							fontSize: '20px',
          //							fontWeight: 'bold'
          //						}
          format: sFormat
        }
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function() {
      var oTplData = {
        name: '',
        tooltip_text: 'tooltip_value_unit',
        unit: this.model.get('unit'),
      };

      var sSolar = DASH_VALUE;
      var sSolarHi = DASH_VALUE;
      if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
        if (_hasStationData() && !_isDashed32767(wl.data.stationData.solar_rad)) {
          sSolar = wl.data.stationData.solar_rad;
        }
        if (_hasStationHilow() && !_isDashed32767(wl.data.stationHilow
            .solar_rad_hi) && sSolar !== DASH_VALUE) {
          sSolarHi = wl.data.stationHilow.solar_rad_hi;
        }
      }

      oTplData.current_value = sSolar;
      oTplData.hi_value = sSolarHi;

      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /****************************************
   * ISS - UV
   ****************************************/
  _oContentsViews.uv_graph = _oContentsViews.solar_rad_graph.extend({
    className: 'portlet-uv text-view',
    afterInit: function() {
      var that = this;
      this.translations = [];
      var prom = document.l10n.formatValue('uv_index_label');
      that.promises.push(prom);
      prom.then(function(result) {
        that.model.set('unit', result);
      });
      this.color = '#e97f24';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
    },
    buildGraph: function() {
      this.oChartOptions.yAxis.max = 16;
      this.oChartOptions.yAxis.minTickInterval = 1;
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var dRawData = 0;
      var sData = DASH_VALUE;
      if (_hasStationData() && !_isDashed255(wl.data.stationData.uv) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        dRawData = wl.data.stationData.uv;
        sData = Utils.formatSensorReading("UV Index", dRawData, wl.data
          .userAccountSetting);
      }

      return [{
        id: 'sensor_uv',
        name: 'sensor_uv',
        data: [dRawData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            sData + '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            this.model.get('unit') + '</span></div>'
        }
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function() {
      var oTplData = {
        unit: this.model.get('unit'),
        tooltip_text: 'tooltip_value_uv_index',
        name: ''
      };

      var sUv = DASH_VALUE;
      var sUvHi = DASH_VALUE;
      if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
        if (_hasStationData() && !_isDashed255(wl.data.stationData.uv)) {
          sUv = Utils.formatSensorReading("UV Index", wl.data.stationData
            .uv, wl.data.userAccountSetting);
        }

        if (_hasStationHilow() && !_isDashed255(wl.data.stationHilow.uv_hi) &&
          sUv != DASH_VALUE) {
          sUvHi = Utils.formatSensorReading("UV Index", wl.data.stationHilow
            .uv_hi, wl.data.userAccountSetting);
        }
      }


      oTplData.current_value = sUv;
      oTplData.hi_value = sUvHi;

      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /*******************************************
   * ISS - Wind Speed
   *****************************************/
  _oContentsViews.wind_speed_graph = _oContentsViews.solar_rad_graph.extend({
    className: 'portlet-wind-speed graph-view',
    aMaxDial: [20, 30, 40, 50, 60, 70, 80, 90, 100], //the list of max gauge limit to set based on the current value
    afterInit: function() {
      var that = this;
      this.model.set('unit', wl.data.unitLabelWindSpeed);
      this.model.set('max_unit', 30);
      this.color = '#29b574';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.oChart = false;
      this.size = Marionette.getOption(this, 'size');
      // end constuctor
    },
    buildGraph: function() {
      this.oChartOptions.yAxis.max = this.aMaxDial[0];
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var sData = DASH_VALUE;
      var dRawData = 0;
      if (_hasStationData() && !_isDashed255(wl.data.stationData.wind_speed) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        dRawData = wl.data.stationData.wind_speed;
        this.oChartOptions.yAxis.max = Utils.slidingScaleMax(dRawData,
          this.aMaxDial);

        sData = Utils.formatSensorReading('Wind Speed', dRawData, wl.data
          .userAccountSetting);
      }
      return [{
        id: 'wind-speed',
        name: 'sensor_wind_speed',
        data: [dRawData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            sData + '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            this.model.get('unit') + '</span></div>'
        }
      }];
    },
    updateData: function() {
      var wind_speed = Boolean(wl.data.stationData) ? wl.data.stationData
        .wind_speed : 0;
      this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(
        wind_speed, this.aMaxDial), true, false);
      this.oChart.series[0].update(this.getSeries()[0]);
      window.thechart = this.oChart;
    },
    _getTooltip: function() {
      var oTplData = {
        //				name: 'sensor_wind_speed',
        tooltip_text: 'tooltip_value_unit',
        unit: this.model.get('unit')
      };

      var sWindSpeed = DASH_VALUE;
      var sWindSpeedHi = DASH_VALUE;
      if (_hasStationData() && !wl.app.oMapper.checkOutdatedData(this
          .lsid) && !_isDashed255(wl.data.stationData.wind_speed)) {
        sWindSpeed = Utils.formatSensorReading('Wind Speed', wl.data.stationData
          .wind_speed, wl.data.userAccountSetting);
      }

      if (_hasStationHilow() && !wl.app.oMapper.checkOutdatedData(
          this.lsid) && !_isDashed255(wl.data.stationHilow.wind_speed_hi)) {
        sWindSpeedHi = Utils.formatSensorReading('Wind Speed', wl.data
          .stationHilow.wind_speed_hi, wl.data.userAccountSetting);
      }
      oTplData.current_value = sWindSpeed;
      oTplData.hi_value = sWindSpeedHi;

      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /**********************************
   * ISS - Wind Direction
   *********************************/
  _oContentsViews.wind_direction_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-wind-direction graph-view',
    afterInit: function() {
      var that = this;
      this.color = '#3288c2';
      this.oChartOptions = {
        chart: {
          polar: true, // set this to false to get a better idea of how this chart works :)
          type: 'column',
          backgroundColor: _oConfig.chart_bg_color,
          plotBackgroundColor: _oConfig.chart_bg_color
        },
        credits: {
          enabled: false
        },
        legend: {
          enabled: false
        },
        series: {},
        title: null,
        tooltip: {
          enabled: true,
          useHTML: true,
          borderColor: '#3c464c',
          backgroundColor: '#3c464c',
          shadow: false,
          style: {
            color: '#fff',
            fontFamily: 'Open Sans'
          },
          formatter: function() {
            return that._getTooltip(this)
          }
        },
        pane: {
          startAngle: 0,
          endAngle: 360
        },
        xAxis: {
          tickInterval: 45,
          min: 0,
          max: 360,
          labels: {
            formatter: function() {
              return Utils.getCardinalFromDeg(this.value);
            },
			useHTML: true
          }
        },
        yAxis: {
          min: 0,
          max: 100,
          labels: {
            enabled: false
          }
        },
        plotOptions: {
          series: {
            pointStart: 0,
            pointInterval: 22.5,
            stacking: 'normal',
            shadow: false,
            groupPadding: 0,
            pointPlacement: 'on',
            useHTML: true
          },
          column: {
            pointPadding: 0,
            groupPadding: 0
          }
        }
      };
    },
    buildData: function(iDirection, iValue) {
      var aData = [];

      if (iDirection != null) {
        iPosition = Utils.getPositionFromDeg(iDirection);
        for (var i = 0; i <= 15; i++) {
          if (iPosition === i && iDirection !== 0) {
            aData.push(iValue);
          } else aData.push(0);
        }
      }
      return aData;
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
    },
    getSeries: function() {

      var sDirection = 0;
      var sStrength = 0;
      if (_hasStationData() && !wl.app.oMapper.checkOutdatedData(this
          .lsid)) {
        sDirection = wl.data.stationData.wind_direction;
        sStrength = 100;
      }
      return [{
        id: 'wind_direction',
        name: 'wind_direction',
        color: this.color,
        data: this.buildData(sDirection, sStrength)
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function() {
      var oTplData = {
        wind_direction: wl.data.stationData.wind_direction
      };
      return window.tpl['tooltip-wind-direction'](oTplData);
    }
  });

  /*******************************************
   * Rain Rate - structure 17
   *****************************************/
  _oContentsViews.structure_type_17_rain_rate_graph = _oContentsViews.solar_rad_graph
    .extend({
      className: 'portlet-rain-rate graph-view',
      maxDialVal: 10,
      getStructure: function () {
        return wl.constants.structureType17FieldName;
      },
      afterInit: function () {
        var that = this;
        this.model.set('unit', wl.data.unitLabelRainEt);
        this.model.set('max_unit', 10);
        this.color = '#3288c2';
        this.oChartOptions = this.getSolidGaugeChartOptions();
        this.oChartOptions.tooltip.enabled = false;
        this.oChart = false;
        this.size = Marionette.getOption(this, 'size');
        // end constuctor
      },
      buildGraph: function () {
        this.oChartOptions.chart.renderTo = this.$(
          '.highcharts-container')[0];
        this.oChartOptions.series = this.getSeries();
        this.oChart = new Highcharts.Chart(this.oChartOptions);
        this.oChart.setSize(this.size.width - 4, this.size.height - 4);
        this.oChart.yAxis[0].setExtremes(0, this.maxDialVal,
          true, false);
        return this;
      },
      getSeries: function () {
        var conStructure = this.getStructure();
        //Execute the get data function
        this.portletSensorData = _getMaiaSensorData(this.lsid,
          conStructure);

        var sData = DASH_VALUE;
        var dRawData = 0;

        if (_hasMaiaData(this.portletSensorData[conStructure.rain_rate_high]) &&
          !wl.app.oMapper.checkOutdatedData(this.lsid)) {
          if (!_isDashed255(this.portletSensorData[conStructure.rain_rate_high])) {
            dRawData = this.portletSensorData[conStructure.rain_rate_high];
            this.maxDialVal = Utils.slidingScaleMax(dRawData);
            sData = Utils.formatSensorReading('Rain Rate', dRawData,
              wl.data.userAccountSetting);
          }
        }

        return [{
          id: 'rain-rate',
          name: 'rain_rate',
          data: [dRawData],
          color: this.color,
          dataLabels: {
            style: {
              fontWeight: 'normal'
            },
            y: 32,
            format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            sData + '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            this.model.get('unit') + '/hr</span></div>'
          }
        }];
      },
      updateData: function () {
        this.oChart.series[0].update(this.getSeries()[0]);
      }
    });

  /**********************************
   * ISS - Wind Rose Day
   *********************************/
  _oContentsViews.wind_rose_day = _oViews.BaseGraphView.extend({
    className: 'portlet-wind-rose graph-view',
    afterInit: function() {
      var formatter = new Utils.RenderUtils(wl.data.userAccountSetting);
      this.color = '#3288c2';

      this.oChartOptions = {
        chart: {
          polar: true,
          type: 'column',
          backgroundColor: _oConfig.chart_bg_color,
          plotBackgroundColor: _oConfig.chart_bg_color,
          spacing: [20, 20, 20, 20]
        },
        credits: {
          enabled: false
        },
        legend: {
          verticalAlign: 'bottom',
          margin: 50,
          labelFormatter: function() {
            //define fixed item label width
            return _.repeat('_', 17);
          }
        },
        series: {},
        title: null,
        tooltip: {
          enabled: true,
          useHTML: true,
          borderColor: '#3c464c',
          backgroundColor: '#3c464c',
          shadow: false,
          valueSuffix: '%',
          style: {
            fontFamily: 'Open Sans'
          },
          formatter: function() {
            var oTplData = {
              color: this.color,
              direction: Utils.getCardinalFromDeg(this.x),
              value: formatter.formatNumber(this.y),
              name: this.series.name
            };
            return window.tpl['tooltip-wind-rose'](oTplData);
          }
        },
        xAxis: {
          tickInterval: 45,
          min: 0,
          max: 360,
          labels: {
            formatter: function() {
              return Utils.getCardinalFromDeg(this.value);
            },
            useHTML: true
          },
          lineColor: "#979797"
        },
        yAxis: {
          min: 0,
          endOnTick: false,
          showLastLabel: true,
          labels: {
            formatter: function() {
              return this.value + '%';
            }
          },
          reversedStacks: false
        },
        plotOptions: {
          series: {
            pointStart: 0,
            pointInterval: 22.5,
            stacking: 'normal',
            shadow: false,
            groupPadding: 0,
            pointPlacement: 'on',
            useHTML: true
          },
          column: {
            pointPadding: 0,
            groupPadding: 0
          }
        }
      };
    },
    getGroupLabels: function(groups, unit) {
      var userSetting = wl.data.userAccountSetting;
      var name = "Wind Speed";
      return _.map(groups, function(item, index) {
        if (index < groups.length - 1) {
          return Utils.formatSensorReading(name, item,
              userSetting) + " - " +
            Utils.formatSensorReading(name, groups[index + 1],
              userSetting) + " " + unit;
        } else {
          return "> " + Utils.formatSensorReading(name, item,
            userSetting) + " " + unit;
        }
      });
    },
    drawRangeSel: function() {
      var viewName = this.options.configModel.get('sViewName');
      var rangeSel = $('<div id="rangeSel"></div>');
      var ranges = wl.data.isOwner ? ["day", "week", "month"] : [
        "day"
      ];

      if (wl.data.windRoseData[this.lsid] == null) {
        return rangeSel;
      }

      _.forEach(ranges, function(range, i) {
        var link = $('<a data-l10n-id="' + range + '" data-id="' +
          (i + 1) + '"></a>');
        if (range === viewName) {
          link.addClass('selected');
        }
        rangeSel.append(link);
      });

      if (wl.data.windRoseData[this.lsid] == null) {
        rangeSel.addClass('no-legend');
      }

      return rangeSel;
    },
    attachRangeSelHandlers: function() {
      var self = this;
      this.$('#rangeSel a').click(function(e) {
        var iRangeId = Number($(e.target).attr("data-id"));
        if (!self._isUpdating) { //prevent multiple requests
          self._isUpdating = true;
          oApp.Ajax.saveWindRoseRange(iRangeId, self.lsid);
        }
      });
    },
    drawLegend: function() {
      var legendContainer = $('<div id="legendContainer"></div>');
      var legend = $('<div id="legend"></div>');
      legendContainer.append(legend);
      if (wl.data.windRoseData[this.lsid] == null) {
        return legendContainer;
      }
      var wind_rose = wl.data.windRoseData[this.lsid] || {};
      wind_rose.groups = wind_rose.groups || [];
      var unit = wind_rose.unit;
      var labels = this.getGroupLabels(wind_rose.groups, unit);

      _.forEach(labels, function(label, i) {
        legend.append('<a class="item-' + i + '" data-id="' + i +
          '">' + label + '</a>');
      });
      return legendContainer;
    },
    attachLegendItemHandlers: function() {
      var self = this;
      this.$('#legend a').click(function(e) {
        var itemNumber = Number($(e.target).attr("data-id")) + 1;
        self.$('.highcharts-legend-item:nth-child(' + itemNumber +
          ')').click();
        $(this).toggleClass("disabled");
      });
    },
    buildGraph: function() {
      this.$('.highcharts-container').after(this.drawLegend()).after(
        this.drawRangeSel());
      this.attachRangeSelHandlers();
      this.attachLegendItemHandlers();
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
    },
    getSeries: function() {
      if (wl.data.windRoseData[this.lsid] == null) {
        return [{}];
      }
      var wind_rose = wl.data.windRoseData[this.lsid] || {};
      var series = [];
      wind_rose.groups = wind_rose.groups || [];
      var unit = wind_rose.unit;
      var labels = this.getGroupLabels(wind_rose.groups, unit);
      var directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE',
        'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'
      ];
      var colors = ['#0bab8b', '#9abba7', '#328ac3', '#c39bab',
        '#faae3f', '#f04a27', '#1e384a'
      ];

      _.forEach(labels, function(label, index) {
        var data = [];
        _.forEach(directions, function(direction) {
          if (!wl.app.oMapper.checkOutdatedData(this.lsid) &&
            wind_rose[direction]) {
            data.push(wind_rose[direction][index]);
          } else data.push(0);
        });
        series.push({
          "name": label,
          "data": data,
          "color": colors[index]
        });
      });

      //needed to display empty gauge
      if (series.length == 0) {
        series.push({});
      }

      return series;
    },
    updateData: function() {
      var self = this;
      var iRangeId = 0;
      this._isUpdating = false;

      if (wl.data.windRoseData[this.lsid]) {
        iRangeId = wl.data.windRoseData[this.lsid].range;
      }

      if (this.oChart.series.length === 1 || this.getSeries().length ===
        1) {
        this.$('#legend, #rangeSel').remove();
        this.oChart.destroy();
        this.buildGraph();
      }

      if (this.getSeries().length > 1) {
        _.forEach(this.oChart.series, function(series, i) {
          series.update(self.getSeries()[i], false);
        });
      }

      this.$('#rangeSel a').removeClass('selected');
      this.$('#rangeSel a[data-id="' + iRangeId + '"]').addClass(
        'selected');

      this.oChart.redraw();
    }
  });

  //for now it's the same
  _oContentsViews.wind_rose_week = _oContentsViews.wind_rose_day.extend();
  _oContentsViews.wind_rose_month = _oContentsViews.wind_rose_day.extend();
  _oContentsViews.wind_rose_year = _oContentsViews.wind_rose_day.extend();


  /**********************************
   * Davis Anemometer - Wind Rose - Structure 18
   *********************************/
  _oContentsViews.structure_type_18_wind_rose_day = _oContentsViews.wind_rose_day
    .extend();
  _oContentsViews.structure_type_18_wind_rose_week = _oContentsViews.wind_rose_week
    .extend();
  _oContentsViews.structure_type_18_wind_rose_month = _oContentsViews.wind_rose_month
    .extend();
  _oContentsViews.structure_type_18_wind_rose_year = _oContentsViews.wind_rose_year
    .extend();

  /*******************************************
   * Davis Anemomitor - Wind Speed - Structure 18
   *****************************************/
  _oContentsViews.structure_type_18_wind_speed_graph = _oContentsViews.solar_rad_graph
    .extend({
      getStructure: function () {
        return wl.constants.structureType18FieldName;
      },
      className: 'portlet-wind-speed graph-view',
      aMaxDial: [20, 30, 40, 50, 60, 70, 80, 90, 100], //the list of max gauge limit to set based on the current value
      afterInit: function() {
        var that = this;
        this.model.set('unit', wl.data.unitLabelWindSpeed);
        this.model.set('max_unit', 30);
        this.color = '#29b574';
        this.oChartOptions = this.getSolidGaugeChartOptions();
        this.oChartOptions.tooltip.enabled = true;
        this.oChartOptions.tooltip.useHTML = true;
        this.oChartOptions.tooltip.formatter = function() {
          return that._getTooltip(this);
        };
        this.oChart = false;
        this.size = Marionette.getOption(this, 'size');
        // end constuctor
      },
      buildGraph: function() {
        this.oChartOptions.yAxis.max = this.aMaxDial[0];
        this.oChartOptions.chart.renderTo = this.$(
          '.highcharts-container')[0];
        this.oChartOptions.series = this.getSeries();
        this.oChart = new Highcharts.Chart(this.oChartOptions);
        this.oChart.setSize(this.size.width - 4, this.size.height - 4);
        return this;
      },
      getSeries: function() {
        var conStructure = this.getStructure();
        //Execute the get data function
        this.portletSensorData = _getMaiaSensorData(this.lsid,
            conStructure);

        var sData = DASH_VALUE;
        var dRawData = 0;

        if (_hasMaiaData(this.portletSensorData[conStructure.wind_speed_avg]) &&
          !wl.app.oMapper.checkOutdatedData(this.lsid)) {
          if (!_isDashed255(this.portletSensorData[conStructure.wind_speed_avg])) {
            dRawData = this.portletSensorData[conStructure.wind_speed_avg];
            this.oChartOptions.yAxis.max = Utils.slidingScaleMax(
              dRawData, this.aMaxDial);

            sData = Utils.formatSensorReading('Wind Speed', dRawData,
              wl.data.userAccountSetting);
          }
        }



        return [{
          id: 'wind-speed',
          name: 'sensor_wind_speed',
          data: [dRawData],
          color: this.color,
          dataLabels: {
            style: {
              fontWeight: 'normal'
            },
            y: 32,
            format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
              sData + '</span><br/>' +
              '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
              this.model.get('unit') + '</span></div>'
          }
        }];
      },
      updateData: function() {
        var wind_speed = Boolean(wl.data.stationData) ? wl.data.stationData
          .wind_speed : 0;
        this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(
          wind_speed, this.aMaxDial), true, false);
        this.oChart.series[0].update(this.getSeries()[0]);
        window.thechart = this.oChart;
      },
      _getTooltip: function() {
        var oTplData = {
          //				name: 'sensor_wind_speed',
          tooltip_text: 'tooltip_value_unit',
          unit: this.model.get('unit')
        };

        var conStructure = this.getStructure();
        //Execute the get data function
        this.portletSensorData = _getMaiaSensorData(this.lsid,
            conStructure);

        var sWindSpeed = DASH_VALUE;
        var sWindSpeedHi = DASH_VALUE;
        if (_hasMaiaData(this.portletSensorData[conStructure.wind_speed_avg]) &&
          !wl.app.oMapper.checkOutdatedData(this.lsid)) {
          if (!_isDashed255(this.portletSensorData[conStructure.wind_speed_avg])) {
            sWindSpeed = Utils.formatSensorReading('Wind Speed', this.portletSensorData[
              conStructure.wind_speed_avg], wl.data.userAccountSetting);

          }
          if (!_isDashed255(this.portletSensorData[conStructure.wind_speed_hi])) {
            sWindSpeedHi = Utils.formatSensorReading('Wind Speed', this
              .portletSensorData[conStructure.wind_speed_hi], wl.data
              .userAccountSetting);

          }
        }

        oTplData.current_value = sWindSpeed;
        oTplData.hi_value = sWindSpeedHi;

        return window.tpl['tooltip-hilow-single'](oTplData);
      }
    });

  /**********************************
   * Davis Anemometer - Wind Direction - Structure 18
   *********************************/
  _oContentsViews.structure_type_18_wind_direction_graph = _oViews.BaseGraphView
    .extend({
      getStructure: function () {
        return wl.constants.structureType18FieldName;
      },
      className: 'portlet-wind-direction graph-view',
      afterInit: function() {
        this.color = '#3288c2';
        var self = this;
        this.oChartOptions = {
          chart: {
            polar: true, // set this to false to get a better idea of how this chart works :)
            type: 'column',
            backgroundColor: _oConfig.chart_bg_color,
            plotBackgroundColor: _oConfig.chart_bg_color
          },
          credits: {
            enabled: false
          },
          legend: {
            enabled: false
          },
          series: {},
          title: null,
          tooltip: {
            enabled: true,
            useHTML: true,
            borderColor: '#3c464c',
            backgroundColor: '#3c464c',
            shadow: false,
            style: {
              color: '#fff',
              fontFamily: 'Open Sans'
            },
            formatter: function() {
              var windDir = self.portletSensorData[self.getStructure()
                .wind_dir_dominant];
              var oTplData = {
                wind_direction: Utils.formatWindDirectionDeg(
                  windDir, wl.data.userAccountSetting)
              };
              return window.tpl['tooltip-wind-direction'](oTplData);
            }
          },
          pane: {
            startAngle: 0,
            endAngle: 360
          },
          xAxis: {
            tickInterval: 45,
            min: 0,
            max: 360,
            labels: {
              formatter: function() {
                return Utils.getCardinalFromDeg(this.value);
              },
              useHTML: true
            }
          },
          yAxis: {
            min: 0,
            max: 100,
            labels: {
              enabled: false
            }
          },
          plotOptions: {
            series: {
              pointStart: 0,
              pointInterval: 22.5,
              stacking: 'normal',
              shadow: false,
              groupPadding: 0,
              pointPlacement: 'on',
              useHTML: true
            },
            column: {
              pointPadding: 0,
              groupPadding: 0
            }
          }
        };
      },
      buildData: function(iDirection, iValue) {
        var aData = [];

        if (iDirection != null) {
          var iPosition = Math.floor(iDirection / 22.5);
          var sectionsQty = 360 / 22.5;
          for (var i = 0; i <= sectionsQty; i++) {
            if (iPosition == i) {
              aData.push(iValue);
            } else aData.push(0);
          }
        }
        return aData;
      },
      buildGraph: function() {
        this.oChartOptions.chart.renderTo = this.$(
          '.highcharts-container')[0];
        this.oChartOptions.series = this.getSeries();
        this.oChart = new Highcharts.Chart(this.oChartOptions);
        this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      },
      getSeries: function() {
        var conStructure = this.getStructure();
        this.portletSensorData = _getMaiaSensorData(this.lsid,
          conStructure);

        var sDirection = 0;
        var sStrength = 0;

        if (_hasMaiaData(this.portletSensorData[conStructure.wind_dir_dominant]) &&
          this.portletSensorData[conStructure.wind_dir_dominant] !==
          0 && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
          sDirection = this.portletSensorData[conStructure.wind_dir_dominant];
          sStrength = 100;
        }

        return [{
          id: 'wind_direction',
          name: 'wind_direction',
          color: this.color,
          data: this.buildData(sDirection, sStrength)
        }];
      },
      updateData: function() {
        this.oChart.series[0].update(this.getSeries()[0]);
      }
    });

  /**************************************
   * ISS - Forecast
   **************************************/
  _oContentsViews.forecast_main = _oViews.BaseTextView.extend({
    className: 'portlet-forecast text-view',
    initialize: function() {
      this.model = new Backbone.Model();
    },
    getStartWith: function(localTime) {
      var hours = localTime.hour();
      var startWith;
      if (hours >= 5 && hours < 11) {
        startWith = 'morning';
      } else if (hours >= 11 && hours < 17) {
        startWith = 'afternoon';
      } else if (hours >= 17 && hours < 23) {
        startWith = 'evening';
      } else if ((hours >= 23 && hours < 24) || (hours >= 0 && hours <
          5)) {
        startWith = 'night';
      }
      return startWith;
    },
    getReadingsArray: function(readingsQuantity, stationOverview,
      startWith) {
      var readingsArr = [];
      var startReadingFound = false;
      if (stationOverview && stationOverview.length > 0) {
        //loop through today

        _.forIn(stationOverview[0], function(value, key) {
          if (value != null && typeof(value) === "object") {
            value.temp_formatted = Utils.formatSensorReading(
              'Temperature', value.temp, wl.data.userAccountSetting
            ) + wl.data.unitLabelTemperature;

            if (key === startWith) {
              startReadingFound = true;
            }
            if (startReadingFound && readingsArr.length <
              readingsQuantity) {
              value.day_part = capitalizeFirstLetter(key);
              readingsArr.push(value);
            }
          }
        });
        //if readings quantity less than required - loop through the next day
        if (readingsArr.length < readingsQuantity) {
          _.forIn(stationOverview[1], function(value, key) {
            if (typeof(value) === "object") {
              value.temp_formatted = value.temp + wl.data.unitLabelTemperature;
              if (readingsArr.length < readingsQuantity) {
                value.day_part = capitalizeFirstLetter(key);
                readingsArr.push(value);
              }
            }
          });
        }
      }

      function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
      };
      return readingsArr;
    },
    getReadingsQuantity: function() {
      var readingsQuantity;
      var gridWidth = this.options.configModel.get('iGridWidth');
      if (gridWidth === 1) {
        readingsQuantity = 1;
      } else if (gridWidth === 2) {
        readingsQuantity = 3;
      } else {
        readingsQuantity = 4;
      }
      return readingsQuantity;
    },
    onBeforeRender: function() {
      var localTime = dayjs().utcOffset(wl.data.timezoneOffset);
      var readingsQuantity = this.getReadingsQuantity();
      var stationOverview = wl.data.forecastOverview;
      var startWith = this.getStartWith(localTime);
      var readingsArray = this.getReadingsArray(readingsQuantity,
        stationOverview, startWith);

      //Verify if there is data, if not, then we will show the no-data template.
      this.template = _checkSensorDataForTemplate(
        'portlet-forecast-images', _hasLocalForecastData());
      this.model.set('readings_array', readingsArray);

      //if there's no readings in forecastOverview
      if (readingsArray.length === 0) {
        this.model.set('no_data_text', 'forecast_str_20');
      }
    }
  });

  /**************************************
   * ISS - Sunrise/Sunset
   **************************************/
  _oContentsViews.sunrise_main = _oViews.BaseTextView.extend({
    className: 'portlet-sunrise text-view',
    initialize: function(options) {
      this.model = new Backbone.Model();
      this.size = options.size;
    },
    onBeforeRender: function() {
      this.template = window.tpl['portlet-sunrise-graph'];
      this.model.set('rise_time', wl.data.sunrise);
      this.model.set('set_time', wl.data.sunset);
      return this;
    }
  });

  /*************************************
   * ISS - Moon Phase
   **************************************/
  _oContentsViews.moon_phase_main = _oViews.BaseTextView.extend({
    className: 'portlet-moon-phase text-view',
    initialize: function(options) {
      this.size = options.size;
      this.model = new Backbone.Model();
    },
    onBeforeRender: function() {
      this.template = window.tpl['portlet-moon-phase-main'];

      var iValue = wl.data.moonPhase;
      var sMoonPhaseUrl = '/static/img/moonphases/moon_phase_' +
        iValue + '.svg';
      var sMoonPhase = 'moon_phase_' + iValue;

      this.model.set('img_url', sMoonPhaseUrl);
      this.model.set('text', sMoonPhase);
      return this;
    }
  });

  /**********************************************
   * Station - Barometer
   **********************************************/
  _oContentsViews.barometer_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-barometer graph-view',
    onBeforeRender: function() {
      if (_hasBarometerData()) {
        var iBarHat = wl.data.barometerData.lastUpdatedTs;
        this.barDataLastUpdated = iBarHat + wl.data.barometerData.tzOffsetSec;

        if (wl.app.oMapper.checkLastUpdatedTime(this.barDataLastUpdated, wl.data.outdatedDataBufferSec
          )) {
          //Display dashed value for stale data
          this.template = this.getCurrentBarTemplate();
        } else {
          this.template = _getNoDataTemplate();
        }
      } else {
      	if (wl.data.barometerData.barCurrent) {
      		this.template = this.getCurrentBarTemplate(wl.data.barometerData.barCurrent);
      	} else {
          this.template = _getNoDataTemplate();
      	}
      }
    },
    afterInit: function() {
      var that = this;
      this.model = new Backbone.Model();
      this.model.set('unit', wl.data.unitLabelBarometer);

      this.sXAxisDateFormat = "%l %p"; //Default to 12 hrs.
      if (wl.data.timeFormat === "HH:mm") {
        //Display as 24 hrs.
        this.sXAxisDateFormat = "%H:%M"
      }
      this.oChartOptions = _highchartsOptions({
        chart: {
          type: 'line',
          marginTop: 32,
          marginBottom: 40
        },
        title: null,
        pane: {
          center: ['50%', '85%'],
          size: '120%',
          startAngle: -90,
          endAngle: 90,
          background: {
            backgroundColor: '#eee', // bg color of the arc
            innerRadius: '60%',
            outerRadius: '100%',
            shape: 'arc'
          }
        },
        tooltip: {
          enabled: true,
          backgroundColor: '#3c464c',
          style: {
            color: '#fff',
            fontFamily: 'Open Sans'
          },
          formatter: function() {
            var sOutput = Utils.formatSensorReading('Barometer',
                this.y, wl.data.userAccountSetting) + " " +
              that.model.get('unit') + "<br>" +
              dayjs.utc(this.x).format(wl.data.timeFormat);
            return sOutput;
          }
        },
        yAxis: {
          labels: {
            formatter: function() {
              return Utils.formatSensorReading('Barometer',
                  this.value, wl.data.userAccountSetting) + ' ' +
                that.model.get('unit');
            }
          },
          title: null,
          tickPositioner: function() {
            var formattedArr = _.map(this.tickPositions,
              function(tick) {
                return Utils.formatSensorReading('Barometer',
                  tick, wl.data.userAccountSetting)
              })
            var uniqArr = _.uniq(formattedArr);
            return formattedArr.length === uniqArr.length ?
              this.tickPositions : uniqArr;
          }
        },
        xAxis: {
          type: 'datetime',
          tickInterval: 3600 * 1000,
          dateTimeLabelFormats: {
            hour: this.sXAxisDateFormat
          }
        },
        credits: {
          enabled: false
        },
        plotOptions: {
          series: {
            states: {
              hover: {
                enabled: false
              }
            }
          },
          line: {
            marker: {
              enabled: false
            }
          }
        }
      });
    },
    buildGraph: function() {
      if (_hasBarometerData() && !wl.app.oMapper.checkLastUpdatedTime(
          this.barDataLastUpdated, wl.data.outdatedDataBufferSec)) {
        if (!this.color) {
          this.color = '#3c464c';
        }
        this.oChartOptions.chart.renderTo = this.$(
          '.highcharts-container')[0] || this.$('.out').parent()[0];
        this.oChartOptions.series = this.getSeries();
        this.oChart = new Highcharts.Chart(this.oChartOptions);
        this.oChart.setSize(this.size.width - 4, this.size.height - 4);
        return this;
      }
    },
    getSeries: function() {
      if (_hasBarometerData()) {
        var iLoopCounter = 1;
        var aMappedData = _.map(wl.data.barometerData.barData,
          function(oBarInfo, iIndex) {
            var iLocalHat = oBarInfo.hat + wl.data.barometerData.tzOffsetSec *
              1000;
            return {
              y: oBarInfo.val,
              x: iLocalHat,
              id: 'sensor_barometer',
              dataLabels: {
                enabled: false, // bEnabled,
                format: '{y}'
              }
            };
          });

        return [{
          id: 'barometer',
          name: 'sensor_barometer',
          color: this.color,
          data: aMappedData
        }];
      }
    },
    updateData: function() {
      if (_hasBarometerData()) {
        if (!this.oChart && !wl.app.oMapper.checkLastUpdatedTime(this
            .barDataLastUpdated, wl.data.outdatedDataBufferSec)) {
          this.buildGraph();
        }
        if (!this.oChart) {
          return;
        }
        this.oChart.series[0].update(this.getSeries()[0]);
      } else if (_hasStationData()) {
        this.render();
      }
    },
    getCurrentBarTemplate: function(currentData) {
      var oTplData = {
        barCurrent: currentData || DASH_VALUE, //dash stale data
        barUnit: this.model.get('unit')
      };
      return window.tpl['portlet-barometer-current'](oTplData);
    }
  });

  /*************************************
   * ISS EXTRA SENSORS
   *************************************/

  /*************************************
   * ISS - Extra Temperature 1
   *************************************/

  _oContentsViews.extra_temp_1_graph = _oViews.BaseGraphView.extend({
    //define stationData and stationHiLow names
    options: {
      current: 'extraTemp1',
      high: 'extra_temp1_day_high',
      low: 'extra_temp1_day_low'
    },
    className: 'graph-view',
    maxDialVal: 10, //The max val for the dial. This is set in the getSeries function
    afterInit: function() {
      var that = this;
      this.model.set('unit', wl.data.unitLabelTemperature);
      this.model.set('max_unit', 100);
      this.color = '#00a89c';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.size = Marionette.getOption(this, 'size');
    },

    buildGraph: function() {
      this.oChartOptions.yAxis.max = this.maxDialVal;
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis.max = Boolean(this.negativeScale) ? 0 :
        this.maxDialVal;
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var sData = DASH_VALUE;
      if (_hasStationData() && !_isDashed255(wl.data.stationData[this
          .options.current]) && !wl.app.oMapper.checkOutdatedData(
          this.lsid)) {
        sData = wl.data.stationData[this.options.current];
        this.maxDialVal = Utils.slidingScaleMax(sData);
      }
      return [{
        id: 'temperature',
        name: this.options.current,
        data: [sData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            Utils.formatSensorReading('Temperature',
              sData, wl.data.userAccountSetting) +
            '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            this.model.get('unit') + '</span></div>'
        }
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function() {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit',
        unit: this.model.get('unit')
      };

      var currentVal = DASH_VALUE;
      if (_hasStationData() && !wl.app.oMapper.checkOutdatedData(this
          .lsid) && !_isDashed255(wl.data.stationData[this.options.current])) {
        currentVal = wl.data.stationData[this.options.current];
      }

      var hiVal = DASH_VALUE;
      var lowVal = DASH_VALUE;
      if (_hasStationHilow() && !wl.app.oMapper.checkOutdatedData(
          this.lsid)) {
        if (!_isDashed255(wl.data.stationHilow[this.options.high])) {
          hiVal = wl.data.stationHilow[this.options.high];
        }
        if (!_isDashed255(wl.data.stationHilow[this.options.low])) {
          lowVal = wl.data.stationHilow[this.options.low];
        }
      }
      oTplData.current_value = Utils.formatSensorReading(
        'Temperature',
        currentVal, wl.data.userAccountSetting);
      oTplData.hi_value = Utils.formatSensorReading('Temperature',
        hiVal, wl.data.userAccountSetting);
      oTplData.low_value = Utils.formatSensorReading('Temperature',
        lowVal, wl.data.userAccountSetting);

      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /*************************************
   * ISS - Extra Temperature 2
   *************************************/

  _oContentsViews.extra_temp_2_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'extraTemp2',
      high: 'extra_temp2_day_high',
      low: 'extra_temp2_day_low'
    }
  });

  /*************************************
   * ISS - Extra Temperature 3
   *************************************/

  _oContentsViews.extra_temp_3_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'extraTemp3',
      high: 'extra_temp3_day_high',
      low: 'extra_temp3_day_low'
    }
  });

  /*************************************
   * ISS - Extra Temperature 4
   *************************************/

  _oContentsViews.extra_temp_4_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'extraTemp4',
      high: 'extra_temp4_day_high',
      low: 'extra_temp4_day_low'
    }
  });

  /*************************************
   * ISS - Extra Temperature 5
   *************************************/

  _oContentsViews.extra_temp_5_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'extraTemp5',
      high: 'extra_temp5_day_high',
      low: 'extra_temp5_day_low'
    }
  });

  /*************************************
   * ISS - Extra Temperature 6
   *************************************/

  _oContentsViews.extra_temp_6_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'extraTemp6',
      high: 'extra_temp6_day_high',
      low: 'extra_temp6_day_low'
    }
  });

  /*************************************
   * ISS - Extra Temperature 7
   *************************************/

  _oContentsViews.extra_temp_7_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'extraTemp7',
      high: 'extra_temp7_day_high',
      low: 'extra_temp7_day_low'
    }
  });

  /*************************************
   * ISS - Soil Temperature 1
   *************************************/

  _oContentsViews.soil_temp_1_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'soilTemp1',
      high: 'soil_temp1_day_high',
      low: 'soil_temp1_day_low'
    }
  });

  /*************************************
   * ISS - Soil Temperature 2
   *************************************/

  _oContentsViews.soil_temp_2_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'soilTemp2',
      high: 'soil_temp2_day_high',
      low: 'soil_temp2_day_low'
    }
  });

  /*************************************
   * ISS - Soil Temperature 3
   *************************************/

  _oContentsViews.soil_temp_3_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'soilTemp3',
      high: 'soil_temp3_day_high',
      low: 'soil_temp3_day_low'
    }
  });

  /*************************************
   * ISS - Soil Temperature 4
   *************************************/

  _oContentsViews.soil_temp_4_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'soilTemp4',
      high: 'soil_temp4_day_high',
      low: 'soil_temp4_day_low'
    }
  });

  /*************************************
   * ISS - Leaf Temperature 1
   *************************************/

  _oContentsViews.leaf_temp_1_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'leafTemp1',
      high: 'leaf_temp1_day_high',
      low: 'leaf_temp1_day_low'
    }
  });

  /*************************************
   * ISS - Leaf Temperature 2
   *************************************/

  _oContentsViews.leaf_temp_2_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'leafTemp2',
      high: 'leaf_temp2_day_high',
      low: 'leaf_temp2_day_low'
    }
  });

  /*************************************
   * ISS - Leaf Temperature 3
   *************************************/

  _oContentsViews.leaf_temp_3_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'leafTemp3',
      high: 'leaf_temp3_day_high',
      low: 'leaf_temp3_day_low'
    }
  });

  /*************************************
   * ISS - Leaf Temperature 4
   *************************************/

  _oContentsViews.leaf_temp_4_graph = _oContentsViews.extra_temp_1_graph.extend({
    options: {
      current: 'leafTemp4',
      high: 'leaf_temp4_day_high',
      low: 'leaf_temp4_day_low'
    }
  });

  /************************
   * ISS - Extra Humidity 1
   ************************/
  _oContentsViews.extra_hum_1_graph = _oContentsViews.humidity_graph.extend({
    options: {
      current: 'extraHum1',
      high: 'extra_hum1_day_high',
      low: 'extra_hum1_day_low'
    }
  });

  /************************
   * ISS - Extra Humidity 2
   ************************/
  _oContentsViews.extra_hum_2_graph = _oContentsViews.humidity_graph.extend({
    options: {
      current: 'extraHum2',
      high: 'extra_hum2_day_high',
      low: 'extra_hum2_day_low'
    }
  });

  /************************
   * ISS - Extra Humidity 3
   ************************/
  _oContentsViews.extra_hum_3_graph = _oContentsViews.humidity_graph.extend({
    options: {
      current: 'extraHum3',
      high: 'extra_hum3_day_high',
      low: 'extra_hum3_day_low'
    }
  });

  /************************
   * ISS - Extra Humidity 4
   ************************/
  _oContentsViews.extra_hum_4_graph = _oContentsViews.humidity_graph.extend({
    options: {
      current: 'extraHum4',
      high: 'extra_hum4_day_high',
      low: 'extra_hum4_day_low'
    }
  });

  /************************
   * ISS - Extra Humidity 5
   ************************/
  _oContentsViews.extra_hum_5_graph = _oContentsViews.humidity_graph.extend({
    options: {
      current: 'extraHum5',
      high: 'extra_hum5_day_high',
      low: 'extra_hum5_day_low'
    }
  });

  /************************
   * ISS - Extra Humidity 6
   ************************/
  _oContentsViews.extra_hum_6_graph = _oContentsViews.humidity_graph.extend({
    options: {
      current: 'extraHum6',
      high: 'extra_hum6_day_high',
      low: 'extra_hum6_day_low'
    }
  });

  /************************
   * ISS - Extra Humidity 7
   ************************/
  _oContentsViews.extra_hum_7_graph = _oContentsViews.humidity_graph.extend({
    options: {
      current: 'extraHum7',
      high: 'extra_hum7_day_high',
      low: 'extra_hum7_day_low'
    }
  });

  /*************************************
   * ISS - Soil Moisture 1
   *************************************/

  _oContentsViews.soil_moisture_1_graph = _oViews.BaseGraphView.extend({
    //define stationData and stationHiLow names
    options: {
      current: 'soilMoist1',
      high: 'soil_moisture1_day_high',
      low: 'soil_moisture1_day_low'
    },
    className: 'graph-view',
    maxDialVal: 10, //The max val for the dial. This is set in the getSeries function
    afterInit: function() {
      var that = this;
      this.unitLabelSoilMoisture = Utils.getAccountSoilUnit("cb", wl.data
        .userAccountSetting.unitsSoilMoistureTypeId);
      this.color = '#3c464c';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.size = Marionette.getOption(this, 'size');
    },

    buildGraph: function() {
      this.oChartOptions.yAxis.max =
        _getSoilMoisturePositiveValueMaxForGauge(this.unitLabelSoilMoisture);
      this.oChartOptions.yAxis.min =
        _getSoilMoisturePositiveValueMinForGauge(this.unitLabelSoilMoisture);
      this.oChartOptions.yAxis.tickPositions = [this.oChartOptions.yAxis
        .min, this.oChartOptions.yAxis.max
      ];
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var sData = DASH_VALUE;
      var dRawData = 0;
      if (this.unitLabelSoilMoisture === "cb") {
        dRawData = 200;
      }
      if (this.unitLabelSoilMoisture === "bar") {
        dRawData = 2;
      }
      if (_hasStationData() && !_isDashed255(wl.data.stationData[this
          .options.current]) && !wl.app.oMapper.checkOutdatedData(
          this.lsid)) {
        dRawData = wl.data.stationData[this.options.current];
        sData = Utils.formatSensorReading('Soil Moisture ' + this.unitLabelSoilMoisture,
          dRawData, wl.data.userAccountSetting);
        if (dRawData >= this.oChartOptions.yAxis.min) {
          this.oChartOptions.yAxis.tickPositions = [this.oChartOptions
            .yAxis.min, this.oChartOptions.yAxis.max
          ];
        }
      }

      return [{
        id: 'soilMoisture',
        data: [dRawData],
        color: this.color,
        threshold: this.oChartOptions.yAxis.min,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            sData + '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            this.unitLabelSoilMoisture + '</span></div>'
        }
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function() {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit',
        unit: this.unitLabelSoilMoisture
      };
      var scaleUnit = 'Soil Moisture ' + this.unitLabelSoilMoisture;

      var currentVal = DASH_VALUE;
      if (_hasStationData() && !wl.app.oMapper.checkOutdatedData(this
          .lsid) && !_isDashed255(wl.data.stationData[this.options.current])) {
        currentVal = Utils.formatSensorReading(scaleUnit, wl.data.stationData[
          this.options.current], wl.data.userAccountSetting);
      }

      var hiVal = DASH_VALUE;
      var lowVal = DASH_VALUE;
      if (_hasStationHilow() && !wl.app.oMapper.checkOutdatedData(
          this.lsid)) {
        if (!_isDashed255(wl.data.stationHilow[this.options.high])) {
          hiVal = Utils.formatSensorReading(scaleUnit, wl.data.stationHilow[
            this.options.high], wl.data.userAccountSetting);
        }
        if (!_isDashed255(wl.data.stationHilow[this.options.low])) {
          lowVal = Utils.formatSensorReading(scaleUnit, wl.data.stationHilow[
            this.options.low], wl.data.userAccountSetting);
        }
      }
      oTplData.current_value = currentVal;
      oTplData.hi_value = hiVal;
      oTplData.low_value = lowVal;

      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /*************************************
   * ISS - Soil Moisture 2
   *************************************/
  _oContentsViews.soil_moisture_2_graph = _oContentsViews.soil_moisture_1_graph
    .extend({
      //define stationData and stationHiLow names
      options: {
        current: 'soilMoist2',
        high: 'soil_moisture2_day_high',
        low: 'soil_moisture2_day_low'
      }
    });

  /*************************************
   * ISS - Soil Moisture 3
   *************************************/
  _oContentsViews.soil_moisture_3_graph = _oContentsViews.soil_moisture_1_graph
    .extend({
      //define stationData and stationHiLow names
      options: {
        current: 'soilMoist3',
        high: 'soil_moisture3_day_high',
        low: 'soil_moisture3_day_low'
      }
    });

  /*************************************
   * ISS - Soil Moisture 4
   *************************************/
  _oContentsViews.soil_moisture_4_graph = _oContentsViews.soil_moisture_1_graph
    .extend({
      //define stationData and stationHiLow names
      options: {
        current: 'soilMoist4',
        high: 'soil_moisture4_day_high',
        low: 'soil_moisture4_day_low'
      }
    });

  /*************************************
   * ISS - Leaf Wetness 1
   *************************************/
  _oContentsViews.leaf_wetness_1_graph = _oViews.BaseGraphView.extend({
    //define stationData and stationHiLow names
    options: {
      current: 'leafWet1',
      high: 'leaf_wetness1_day_high',
      low: 'leaf_wetness1_day_low'
    },
    className: 'graph-view',
    maxDialVal: 15, //The max val for the dial. This is set in the getSeries function
    afterInit: function() {
      var that = this;
      this.model.set('max_unit', 100);
      this.model.set('unit', '');
      this.color = '#29b574';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.size = Marionette.getOption(this, 'size');
    },

    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis.max = this.maxDialVal;
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var sData = DASH_VALUE;
      if (_hasStationData() && !_isDashed255(wl.data.stationData[this
          .options.current]) && !wl.app.oMapper.checkOutdatedData(
          this.lsid)) {
        sData = wl.data.stationData[this.options.current];
        this.maxDialVal = 15;
      }
      return [{
        id: 'leafWetness',
        data: [sData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: -30,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            Utils.formatSensorReading('Leaf Wetness', sData, wl.data
              .userAccountSetting) + '</span></div>'
        }
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function() {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit',
        unit: '',
        name: 'Leaf Wetness'
      };

      var currentVal = DASH_VALUE;
      if (_hasStationData() && !wl.app.oMapper.checkOutdatedData(this
          .lsid) && !_isDashed255(wl.data.stationData[this.options.current])) {
        currentVal = wl.data.stationData[this.options.current];
      }

      var hiVal = DASH_VALUE;
      var lowVal = DASH_VALUE;
      if (_hasStationHilow() && !wl.app.oMapper.checkOutdatedData(
          this.lsid)) {
        if (!_isDashed255(wl.data.stationHilow[this.options.high])) {
          hiVal = wl.data.stationHilow[this.options.high];
        }
        if (!_isDashed255(wl.data.stationHilow[this.options.low])) {
          lowVal = wl.data.stationHilow[this.options.low];
        }
      }
      oTplData.current_value = Utils.formatSensorReading(
        'Leaf Wetness', currentVal, wl.data.userAccountSetting);
      oTplData.hi_value = Utils.formatSensorReading('Leaf Wetness',
        hiVal, wl.data.userAccountSetting);
      oTplData.low_value = Utils.formatSensorReading('Leaf Wetness',
        lowVal, wl.data.userAccountSetting);

      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /*************************************
   * ISS - Leaf Wetness 2
   *************************************/

  _oContentsViews.leaf_wetness_2_graph = _oContentsViews.leaf_wetness_1_graph
    .extend({
      //define stationData and stationHiLow names
      options: {
        current: 'leafWet2',
        high: 'leaf_wetness2_day_high',
        low: 'leaf_wetness2_day_low'
      }
    });

  /*************************************
   * ISS - Leaf Wetness 3
   *************************************/

  _oContentsViews.leaf_wetness_3_graph = _oContentsViews.leaf_wetness_1_graph
    .extend({
      //define stationData and stationHiLow names
      options: {
        current: 'leafWet3',
        high: 'leaf_wetness3_day_high',
        low: 'leaf_wetness3_day_low'
      }
    });

  /*************************************
   * ISS - Leaf Wetness 4
   *************************************/

  _oContentsViews.leaf_wetness_4_graph = _oContentsViews.leaf_wetness_1_graph
    .extend({
      //define stationData and stationHiLow names
      options: {
        current: 'leafWet4',
        high: 'leaf_wetness4_day_high',
        low: 'leaf_wetness4_day_low'
      }
    });

  // Options View launched by the 'Show Hidden' portlet or 'Options' button

  _oViews.OptionsView = Marionette.ItemView.extend({
    template: window.tpl['bulletin-config'],
    className: 'dashboard-options',
    events: {
      'click .js-mark-all': 'markAllCheckboxes'
    },
    initialize: function() {
      this.model = new Backbone.Model();
      this.listenTo(wl.app.Modal, 'modal:update', function() {
        this.onUpdate();
      });
    },
    onDestroy: function() {
      this.stopListening();
    },
    onUpdate: function() {
      this.stopListening();
      var $checked = this.$('input:checked');
      var aConfigsToShow = [];
      $checked.each(function() {
        var id = $(this).val();
        id = Number(id);
        var oConfig = wl.data.portletConfigs.get(id);
        if (oConfig) {
          aConfigsToShow.push(oConfig);
        }
      });
      _showHiddenPortlets(aConfigsToShow);
    },
    onBeforeRender: function() {
      // Collect hidden portlets
      var aInvisiblePortlets;
      var aVisible = wl.data.portletConfigs.filter(function(oConfig) {
        return oConfig.get('iVisible') === 0 && oConfig.id !== wl
          .constants.showHiddenId && oConfig.get('iAvailable') ===
          1;
      });
      aInvisiblePortlets = _.map(aVisible, function(oConfig) {
        return {
          id: oConfig.id,
          title: 'portlet_title_' + oConfig.get('sType')
        };
      });
      this.model.set('aPortlets', aInvisiblePortlets);
      // collect unavaialble portlets
      var aUnavilable = wl.data.portletConfigs.filter(function(
        oConfig) {
        return oConfig.get('iAvailable') === 0 && oConfig.id !==
          wl.constants.showHiddenId;
      });
      var aUnavaiablePortlets = _.map(aUnavilable, function(oConfig) {
        return {
          id: oConfig.id,
          title: 'portlet_title_' + oConfig.get('sType')
        };
      });
      this.model.set('aUnavaiablePortlets', aUnavaiablePortlets);
      return this;
    },
    markAllCheckboxes: function(e) {
      e.preventDefault();
      this.$('input[type=checkbox]').each(function() {
        $(this).prop('checked', true);
      });
    }
  });


  /****************************************
   * ISS - THW
   ****************************************/
  _oContentsViews.thw_graph =  _oViews.BaseGraphView.extend({
    className: 'graph-view',
    maxDialVal: 10, //The max val for the dial. This is set in the getSeries function
    getDataName: function () {
      return 'thwIndex';
    },
    afterInit: function() {
      var that = this;
      this.model.set('unit', wl.data.unitLabelTemperature);
      this.color = "#00a89c";
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.size = Marionette.getOption(this, 'size');
      // end constructor
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis.max = Boolean(this.negativeScale) ? 0 :
        this.maxDialVal;
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var dRawData = 0;
      var sData = DASH_VALUE;
      var threshold = null;
      this.oChartOptions.yAxis.labels.step = 1;

      if (_hasStationData() && !_isDashed255(wl.data.stationData[this.getDataName()]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        dRawData = wl.data.stationData[this.getDataName()];
        sData = Utils.formatSensorReading('Temperature', dRawData, wl.data.userAccountSetting);
        this.maxDialVal = Utils.slidingScaleMax(Math.abs(dRawData));
      }

      if (dRawData < 0) {
        threshold = 0;
        this.negativeScale = true;
        this.oChartOptions.yAxis.max = 0;
        this.oChartOptions.yAxis.min = -this.maxDialVal;
        this.oChartOptions.yAxis.tickPositions = [-this.maxDialVal, 0];
      } else {
        this.oChartOptions.yAxis.max = this.maxDialVal;
        this.oChartOptions.yAxis.min = 0;
        this.oChartOptions.yAxis.tickPositions = [0, this.maxDialVal];
      }

      if (this.oChart.yAxis) {
        this.oChart.yAxis[0].update(this.oChartOptions.yAxis);
      }

      return [{
        id: 'temperature',
        data: [dRawData],
        color: this.color,
        threshold: threshold,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 30,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' + sData + '</span><br/>'
            + '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' + wl.data.unitLabelTemperature + '</span></div>'
        }
      }];
    },
    _getTooltip: function() {
      var current_value = DASH_VALUE;
      if (_hasStationData() && !_isDashed255(wl.data.stationData[this.getDataName()]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        current_value = Utils.formatSensorReading('Temperature', wl.data.stationData[this.getDataName()], wl.data.userAccountSetting);
      }

      var oTplData = {
        unit: wl.data.unitLabelTemperature,
        name: "Temperature",
        tooltip_text: 'tooltip_value_unit',
        current_value: current_value
      };
      return window.tpl['tooltip-hilow-single'](oTplData);
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    }
  })

  /****************************************
   * ISS - THSW
   ****************************************/
  _oContentsViews.thsw_graph = _oContentsViews.thw_graph.extend({
    getDataName: function () {
      return 'thswIndex';
    },
  })

  /*************************************
   * Temp/Hum Sensor - Structure 16
   *************************************/
  _oContentsViews.structure_type_16_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-structure-type-16 graph-view',
    portletSensorData: [],
    afterInit: function() {
      var that = this;
      this.translationKeys = ['temp', 'hum', 'sensor_temp_heat', 'sensor_temp_dew', 'sensor_wet_bulb'];
      this.translations = [];
      this.promises = _getTranslation(this.translationKeys, this.translations);
      this.model.set('unit', wl.data.unitLabelPercent);
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.positioner = function(boxWidth,
        boxHeight, point) {
        return {
          x: point.plotX,
          y: point.plotY + 30
        };
      };
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.oChartOptions.chart.alignTicks = false;
      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.marginBottom = 50;
      this.oChartOptions.plotOptions.column.grouping = false;
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return this.point.id === "" ? undefined : Utils.formatSensorReading(
            'Temperature', this.y, wl.data.userAccountSetting);
        };
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.xAxis = this.getXAxis();
      this.oChartOptions.yAxis = this.getYAxis();
      this.oChart = new Highcharts.Chart(this.oChartOptions);

      var w, h;

      w = this.size.width - 10;
      h = this.size.height - 10;
      this.oChart.setSize(w, h, true);
    },
    getSeries: function() {
      var conStructure16 = wl.constants.structureType16FieldName;
      //Execute the get data function
      this.portletSensorData = _getMaiaSensorData(this.lsid,
        conStructure16);

      var dTemp = null;
      var dHum = null;
      var dTempHeat = null;
      var dTempDew = null;
      var dWetBulb = null;
      if (_hasMaiaData(this.portletSensorData[conStructure16.temp_avg]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        if (!_isDashed32767(this.portletSensorData[conStructure16.temp_avg])) {
          dTemp = this.portletSensorData[conStructure16.temp_avg];
        }
        if (!_isDashed32767(this.portletSensorData[conStructure16.hum_avg])) {
          dHum = this.portletSensorData[conStructure16.hum_avg];
        }
        if (!_isDashed32767(this.portletSensorData[conStructure16.heat_index])) {
          dTempHeat = this.portletSensorData[conStructure16.heat_index];
        }
        if (!_isDashed32767(this.portletSensorData[conStructure16.dew_point])) {
          dTempDew = this.portletSensorData[conStructure16.dew_point];
        }
        if (!_isDashed32767(this.portletSensorData[conStructure16.wet_bulb])) {
          dWetBulb = this.portletSensorData[conStructure16.wet_bulb];
        }
      }

      var arrData = [dTemp, dHum, dTempHeat, dTempDew, dWetBulb];

      if (_.every(arrData, function (el) {return el === 0}) && this.oChart.yAxis) {
        this.oChart.yAxis[0].setExtremes(0, 5);
      }

      var minVal = Math.min.apply(null, arrData);
      var threshold = 0;
      if (minVal < 0) {
        this.oChartOptions.yAxis.min = Math.floor(minVal / 5) * 5;
        threshold = _getThresholdForNegativeVal(minVal);
      }

      var blankPoint = {y: 0, id: '', color: 'transparent'}

      return [{
        id: 'temp',
        yAxis: 0,
        data: [_createHighChartDataPoint(this.lsid + '_temp', " ",
          dTemp, "#c42728"), blankPoint, blankPoint, blankPoint, blankPoint],
        threshold: threshold
      }, {
        id: 'hum',
        yAxis: 1,
        data: [blankPoint, _createHighChartDataPoint(this.lsid + '_hum', " ",
          dHum, "#f0c619"), blankPoint, blankPoint, blankPoint]
      }, {
        id: 'heat_index',
        yAxis: 0,
        data: [blankPoint, blankPoint, _createHighChartDataPoint(this.lsid + '_heat_index', " ",
          dTempHeat, "#e97f24"), blankPoint, blankPoint],
        threshold: threshold
      }, {
        id: 'dew_point',
        yAxis: 0,
        data: [blankPoint, blankPoint, blankPoint, _createHighChartDataPoint(this.lsid + '_dew_point', " ",
          dTempDew, "#38916d"), blankPoint],
        threshold: threshold
      }, {
        id: 'wet_bulb',
        yAxis: 0,
        data: [blankPoint, blankPoint, blankPoint, blankPoint, 
          _createHighChartDataPoint(this.lsid + '_wet_bulb', " ", dWetBulb, "#3288c2")],
        threshold: threshold
      }]
    },
    getXAxis: function () {
      return [{
        categories: [this.translations['temp'], this.translations['hum'],
          this.translations['sensor_temp_heat'], this.translations['sensor_temp_dew'],
          this.translations['sensor_wet_bulb']],
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          style: {
            textOverflow: 'none'
          }
        }
      }];
    },
    getYAxis: function () {
      var minRange = null;
      var min = null;
      if (!this.oChartOptions.series[0].data[0].y) {
        minRange = 50;
        min = 0;
      }

      return [{
        labels: {
          format: '{value}' + wl.data.unitLabelTemperature
        },
        title: null,
        opposite: false,
        min: min,
        minRange: minRange
      }, {
        labels: {
          format: '{value}' + wl.data.unitLabelPercent
        },
        max: 100,
        gridLineWidth: 0,
        title: null,
        opposite: true
      }]
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
      this.oChart.series[1].update(this.getSeries()[1]);
      this.oChart.series[2].update(this.getSeries()[2]);
      this.oChart.series[3].update(this.getSeries()[3]);
      this.oChart.series[4].update(this.getSeries()[4]);
    },
    _getTooltip: function(oHcData) {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit'
      };

      var conStructure16 = wl.constants.structureType16FieldName;

      switch (oHcData.point.id) {
        case this.lsid + '_temp':
          oTplData.unit = wl.data.unitLabelTemperature;
          oTplData.name = 'sensor_temp';
          oTplData.current_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure16.temp_avg],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Temperature',
            this.portletSensorData[conStructure16.temp_high], wl.data
            .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure16.temp_low],
            wl.data.userAccountSetting);
          break;
        case this.lsid + '_hum':
          oTplData.unit = wl.data.unitLabelPercent;
          oTplData.name = 'sensor_hum';
          oTplData.current_value = Utils.formatSensorReading(
            'Humidity', this.portletSensorData[conStructure16.hum_avg],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Humidity',
            this.portletSensorData[conStructure16.hum_high], wl.data
            .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading('Humidity',
            this.portletSensorData[conStructure16.hum_low], wl.data
            .userAccountSetting);
          break;
        case this.lsid + '_heat_index':
            oTplData.unit = wl.data.unitLabelTemperature;
            oTplData.name = 'sensor_temp_heat';
            oTplData.current_value = Utils.formatSensorReading(
              'Temperature', this.portletSensorData[conStructure16.heat_index],
              wl.data.userAccountSetting);
            oTplData.hi_value = Utils.formatSensorReading('Temperature',
              this.portletSensorData[conStructure16.heat_index_high], wl.data
              .userAccountSetting);
            break;
        case this.lsid + '_dew_point':
            oTplData.unit = wl.data.unitLabelTemperature;
            oTplData.name = 'sensor_temp_dew';
            oTplData.current_value = Utils.formatSensorReading(
              'Temperature', this.portletSensorData[conStructure16.dew_point],
              wl.data.userAccountSetting);
            oTplData.hi_value = Utils.formatSensorReading('Temperature',
              this.portletSensorData[conStructure16.dew_point_high], wl.data
              .userAccountSetting);
            oTplData.low_value = Utils.formatSensorReading('Temperature',
              this.portletSensorData[conStructure16.dew_point_low], wl.data
              .userAccountSetting);
            break;
        case this.lsid + '_wet_bulb':
            oTplData.unit = wl.data.unitLabelTemperature;
            oTplData.name = 'sensor_wet_bulb';
            oTplData.current_value = Utils.formatSensorReading(
              'Temperature', this.portletSensorData[conStructure16.wet_bulb],
              wl.data.userAccountSetting);
            oTplData.low_value = Utils.formatSensorReading('Temperature',
              this.portletSensorData[conStructure16.wet_bulb_low], wl.data
              .userAccountSetting);
            break;
        default:
          return false;
      }
      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /*************************************
   * Rain - Structure 17
   *************************************/
  _oContentsViews.structure_type_17_rain_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-structure-type-17 graph-view',
    afterInit: function() {
      var that = this;
      this.model.set('unit', wl.data.unitLabelRainEt);
      this.oChartOptions.tooltip.enabled = false;
      var delimiter = wl.data.userAccountSetting.unitsRainEtTypeId ===
        2 ? '<br>' : ' ';
      this.oChartOptions.yAxis.labels = {
        useHTML: true,
        formatter: function() {
          return Utils.formatSensorReading('Rain', this.value, wl
            .data.userAccountSetting) + delimiter + that.model.get(
            'unit');
        },
        style: {
          textAlign: 'right',
          textOverflow: 'none',
          whiteSpace: 'nowrap',
          letterSpacing: "-0.7px"
        },
        x: -5,
        title: null
      };
      this.oChartOptions.chart.marginBottom = 50;

      //function to create the column/bar value label.
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return Utils.formatSensorReading('Rain', this.y, wl.data.userAccountSetting)
        }

      //Get the structure and data and save it into this context.
      this.portletSensorData = this.findPortletSensorData();
    },
    findPortletSensorData: function() {
      var lsid = this.lsid;
      return _.find(wl.data.totalRainData, function(arr) {
        return arr.iLogicalSensorId === lsid;
      });
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);

      var w, h;
      w = this.size.width - 10;
      h = this.size.height - 10;
      this.oChart.setSize(w, h, true);
    },
    getSeries: function() {
      //Execute the get data function
      this.portletSensorData = this.findPortletSensorData();

      var dTotalForToday = null;
      var dTotalForMonth = null;
      var dTotalForYear = null;
      if (this.portletSensorData) {
        dTotalForToday = this.portletSensorData.totalForToday.convertedVal;
        dTotalForMonth = this.portletSensorData.totalForMonth.convertedVal;
        dTotalForYear = this.portletSensorData.totalForYear.convertedVal;
      }

      if (dTotalForToday === 0 && dTotalForMonth === 0 &&
        dTotalForYear === 0) {
        this.oChartOptions.yAxis.min = 0;
        this.oChartOptions.yAxis.max = 1;
      }

      return [{
        id: 'rain',
        yAxis: 0,
        data: [
          _createHighChartDataPoint(this.lsid +
            '_total_rain_today', "Day", dTotalForToday,
            "#3c464c"),
          _createHighChartDataPoint(this.lsid +
            '_total_rain_month', "Month", dTotalForMonth,
            "#29b574"),
          _createHighChartDataPoint(this.lsid +
            '_total_rain_year', "Year", dTotalForYear,
            "#3288c2")
        ]
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    }
  });

  /***********************************
   * Solar Radiation - Structure 19
   ***********************************/
  _oContentsViews.structure_type_19_graph = _oViews.BaseGraphView.extend({
  	maxDialVal: 1000, //The max val for the dial. This is set in the getSeries function
    className: 'portlet-structure-type-21 graph-view',
    afterInit: function() {
      var that = this;
      this.conStructure19 = wl.constants.structureType19FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure19);
      this.model.set('unit', Utils.getAccountUnitsByDataName(wl.data.userAccountSetting,
        'Solar Radiation'));
      this.color = '#c42728';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {

      var sData = '--';
      var dRawData = 0;
      if (_hasMaiaData(this.portletSensorData[this.conStructure19.solar_rad]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        sData = this.portletSensorData[this.conStructure19.solar_rad];
        dRawData = sData;
      }

      //Ensure that the max limit is adjusted if the solar radition is above 1000
      if (dRawData > 1000) {
        this.oChartOptions.yAxis.max = 1367;
      }


      var sFormat =
        '<div style="text-align:center"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
        sData + '</span><br/>' +
        '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
        this.model.get('unit') + '</span></div>';

      return [{
        id: 'portlet-structure-type-21',
        name: 'sensor_solar_rad',
        data: [sData],
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          enabled: true,
          format: sFormat
        }
      }];
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function() {
      var oTplData = {
        name: '',
        tooltip_text: 'tooltip_value_unit',
        unit: this.model.get('unit'),
      };

      var sSolar = DASH_VALUE;
      var sSolarHi = DASH_VALUE;
      if (_hasMaiaData(this.portletSensorData[this.conStructure19.solar_rad]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        sSolar = this.portletSensorData[this.conStructure19.solar_rad];
      }
      if (_hasMaiaData(this.portletSensorData[this.conStructure19.solar_rad_high]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        sSolarHi = this.portletSensorData[this.conStructure19.solar_rad_high];
      }

      oTplData.current_value = sSolar;
      oTplData.hi_value = sSolarHi;

      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /*************************************
   * Leaf Wetness - Structure 21
   *************************************/
  _oContentsViews.structure_type_21_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-structure-type-21 graph-view',
    maxDialVal: 15, //The max val for the dial. This is set in the getSeries function
    afterInit: function() {
      var that = this;
      this.model.set('unit', '');
      this.conStructure21 = wl.constants.structureType21FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure21);
      this.color = "#29b574";
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.size = Marionette.getOption(this, 'size');
      // end constuctor
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis.max = this.maxDialVal;
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var iWet = '--';
      if (_hasMaiaData(this.portletSensorData[this.conStructure21.leaf_wetness]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        iWet = this.portletSensorData[this.conStructure21.leaf_wetness];
        this.maxDialVal = 15;
      }

      return [{
        id: 'leafWetness',
        data: [iWet],
        color: "#2cb17b",
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: -30,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            Utils.formatSensorReading('Leaf Wetness', iWet, wl.data
              .userAccountSetting) + '</span></div>'
        }
      }];
    },
    _getTooltip: function() {
      var current_value = DASH_VALUE;
      var hi_value = DASH_VALUE;

      if (_hasMaiaData(this.portletSensorData[this.conStructure21.leaf_wetness]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        current_value = Utils.formatSensorReading('Leaf Wetness',
            this.portletSensorData[this.conStructure21.leaf_wetness],
            wl.data.userAccountSetting),
          hi_value = Utils.formatSensorReading('Leaf Wetness', this.portletSensorData[
            this.conStructure21.leaf_wetness_high], wl.data.userAccountSetting)
      }

      var oTplData = {
        unit: '',
        tooltip_text: 'tooltip_value_unit',
        name: "Leaf Wetness",
        current_value: current_value,
        hi_value: hi_value
      };

      return window.tpl['tooltip-hilow-single'](oTplData);
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    }
  });

  /*************************************
   * Temperature Probe - Structure 22
   *************************************/
  _oContentsViews.structure_type_22_graph = _oViews.BaseGraphView.extend({
    className: 'graph-view',
    maxDialVal: 10, //The max val for the dial. This is set in the getSeries function
    afterInit: function() {
      var that = this;
      this.model.set('unit', wl.data.unitLabelTemperature);
      this.conStructure22 = wl.constants.structureType22FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure22);
      this.color = "#00a89c";
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.size = Marionette.getOption(this, 'size');
      // end constuctor
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis.max = Boolean(this.negativeScale) ? 0 :
        this.maxDialVal;
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var dRawData = '--';
      var threshold = null;
      this.oChartOptions.yAxis.labels.step = 1;

      if (_hasMaiaData(this.portletSensorData[this.conStructure22.temp_avg]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        dRawData = this.portletSensorData[this.conStructure22.temp_avg];
        this.maxDialVal = Utils.slidingScaleMax(Math.abs(dRawData));
      }

      if (dRawData < 0) {
        threshold = 0;
        this.negativeScale = true;
        this.oChartOptions.yAxis.max = 0;
        this.oChartOptions.yAxis.min = -this.maxDialVal;
        this.oChartOptions.yAxis.tickPositions = [-this.maxDialVal, 0];
      } else {
        this.oChartOptions.yAxis.max = this.maxDialVal;
        this.oChartOptions.yAxis.min = 0;
        this.oChartOptions.yAxis.tickPositions = [0, this.maxDialVal];
      }

      if (this.oChart.yAxis) {
        this.oChart.yAxis[0].update(this.oChartOptions.yAxis);
      }

      return [{
        id: 'temperature',
        data: [dRawData],
        color: this.color,
        threshold: threshold,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 30,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            Utils.formatSensorReading('Temperature', dRawData, wl
              .data.userAccountSetting) + '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            wl.data.unitLabelTemperature + '</span></div>'
        }
      }];
    },
    _getTooltip: function() {
      var current_value = DASH_VALUE;
      var hi_value = DASH_VALUE;
      var low_value = DASH_VALUE;
      if (_hasMaiaData(this.portletSensorData[this.conStructure22.temp_avg]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        current_value = Utils.formatSensorReading('Temperature', this
            .portletSensorData[this.conStructure22.temp_avg], wl.data.userAccountSetting
          ),
          hi_value = Utils.formatSensorReading('Temperature', this.portletSensorData[
            this.conStructure22.temp_high], wl.data.userAccountSetting),
          low_value = Utils.formatSensorReading('Temperature', this.portletSensorData[
            this.conStructure22.temp_low], wl.data.userAccountSetting)
      }

      var oTplData = {
        unit: wl.data.unitLabelTemperature,
        name: "Temperature",
        tooltip_text: 'tooltip_value_unit',
        current_value: current_value,
        hi_value: hi_value,
        low_value: low_value
      };
      return window.tpl['tooltip-hilow-single'](oTplData);
    },
    updateData: function() {
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure22);
      this.oChart.series[0].update(this.getSeries()[0]);
    }
  });
  
  /*************************************
   * Pressure Switch -  Structure 47
   *************************************/
  _oContentsViews.structure_type_47_text = _oViews.BaseTextView.extend({
    className: 'text-view',
    initialize: function() {
      this.model = new Backbone.Model();
      this.size = Marionette.getOption(this, 'size');
    },
    onBeforeRender: function() {
      var conStructure47 = wl.constants.structureType47FieldName;
      this.portletSensorData = _getMaiaSensorData(this.options.lsid,
        conStructure47);
      //Verify if there is data, if not, then we will show the no-data template.
      this.template = _checkSensorDataForTemplate(
        'portlet-pressure-switch-text', this.portletSensorData[
          conStructure47.switch_state]);
      var switchState = this.portletSensorData[conStructure47.switch_state];
      var iState = (switchState === wl.constants.pressure_flow_state.on ||
          switchState === wl.constants.pressure_flow_state.off_to_on) ?
        1 : 0;
      if (switchState != null && wl.app.oMapper.checkOutdatedData(
          this.options.lsid)) {
        iState = null;
      }
      this.model.set('switch_state', iState);
      return this;
    },
    updateData: function() {
      this.render();
    }
  });

  /*************************************
   * Pressure Sensor - Structure 49
   *************************************/
  _oContentsViews.structure_type_49_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-pressure-sensor graph-view',
    maxDialVal: 100, //The max value for the dial. This will be set by the getSeries function.
    afterInit: function() {
      this.model.set('unit', wl.data.unitLabelPressure);
      this.model.set('max_unit', this.maxDialVal);
      this.conStructure49 = wl.constants.structureType49FieldName;
      this.color = '#29b574';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.size = Marionette.getOption(this, 'size');
      // end constuctor
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(this.maxDialVal),
        true, false);
      return this;
    },
    getSeries: function() {
      var iRawData = 0;
      var sData = DASH_VALUE;

      this.portletSensorData = _getMaiaSensorData(this.options.lsid,
        this.conStructure49);
      if (this.portletSensorData[this.conStructure49.current_pressure] !=
        null && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        iRawData = this.portletSensorData[this.conStructure49.current_pressure]
        sData = Utils.formatSensorReading('Pressure', iRawData, wl.data
          .userAccountSetting);
        this.maxDialVal = Utils.slidingScaleMax(iRawData);
      }

      return [{
        id: 'pressure_sensor',
        name: 'sensor_pressure',
        data: [iRawData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            sData + '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            this.model.get('unit') + '</span></div>'
        }
      }];
    },
    updateData: function() {
      this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(this.getSeries()[
        0].data[0]), true, false);
      this.oChart.series[0].update(this.getSeries()[0]);
      window.thechart = this.oChart;
    }
  });

  /*************************************
   * Fluid Sensor (Pressure, Depth) - Structure 50
   *************************************/
  _oContentsViews.structure_type_50_graph = _oViews.BaseGraphView.extend({
    className: 'graph-view',
    portletSensorData: [],
    afterInit: function() {
      this.translationKeys = ['fluid_pressure', 'fluid_depth'];
      this.translations = [];
      this.promises = _getTranslation(this.translationKeys, this.translations);
      this.model.set('unit', wl.data.unitLabelPercent);
      this.oChartOptions.tooltip.enabled = false;

      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.marginBottom = 50;

      //Get the structure and data and save it into this context.
      this.conStructure50 = wl.constants.structureType50FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure50);

      this.depthUnit = Utils.getAccountWaterDepthUnit(wl.data.userAccountSetting
        .unitsWaterDepthTypeId);
      this.oChartOptions.plotOptions.column.grouping = false;
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          if (this.point.id === "") {
            return undefined;
          }
          return Utils.formatSensorReading(this.point.category, this.y,
            wl.data.userAccountSetting);
        };
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis = this.getYAxis();
      this.oChartOptions.xAxis = this.getXAxis();
      this.oChart = new Highcharts.Chart(this.oChartOptions);

      var w, h;

      w = this.size.width - 10;
      h = this.size.height - 10;
      this.oChart.setSize(w, h, true);
    },
    getSeries: function() {
      var pressureVal = null;
      var depthVal = null;

      if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
        pressureVal = this.portletSensorData[this.conStructure50.fluid_pressure];
        depthVal = this.portletSensorData[this.conStructure50.fluid_depth]
      }

      return [{
        id: 'fluidPressure',
        yAxis: 0, //Map to to yAxis Label index.
        data: [
          _createHighChartDataPoint(this.lsid +
            '_fluid_pressure', " ", pressureVal, "#29B574"), {
            y: 0,
            id: '',
            color: 'transparent'
          }
        ]
      }, {
        id: 'temperature',
        yAxis: 1, //Map to to yAxis Label index.
        data: [{
            y: 0,
            id: '',
            color: 'transparent'
          },
          _createHighChartDataPoint(this.lsid + '_fluid_depth',
            " ", depthVal, "#3288C2")
        ]
      }];
    },
    getXAxis: function() {
      var that = this;
      return [{
        categories: [that.translations['fluid_pressure'], that.translations[
          'fluid_depth']],
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          style: {
            textOverflow: 'none'
          }
        }
      }]
    },
    getYAxis: function() {
      var that = this;
      return [{
        labels: {
          format: '{value}' + wl.data.unitLabelPressure,
          useHTML: true,
          style: {
            "textAlign": "right"
          }
        },
        title: null,
        opposite: false
      }, {
        labels: {
          format: '{value} ' + that.depthUnit
        },
        title: null,
        opposite: true
      }]
    },
    updateData: function() {
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure50);
      this.oChart.series[0].update(this.getSeries()[0]);
      this.oChart.series[1].update(this.getSeries()[1]);
    }
  });

  /*************************************
   * Flow Meter - Structure 51
   *************************************/
  _oContentsViews.structure_type_51_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-flow-sensor graph-view',
    maxDialVal: 100, //The max value for the dial. This will be set by the getSeries function.
    afterInit: function() {
      this.model.set('unit', Utils.getAccountFlowUnit(wl.data.userAccountSetting
        .unitsFlowTypeId));
      this.model.set('max_unit', this.maxDialVal);
      this.color = '#29b574';
      this.conStructure51 = wl.constants.structureType51FieldName;
      this.size = Marionette.getOption(this, 'size');
      // end constuctor
    },
    getHighchartsOptions: function() {
      var self = this;
      return _highchartsOptions({
        chart: {
          type: 'solidgauge',
          events: {
            load: function() {
              if (self.offState) {
                $(this.container).parent().append(
                  '<div class="off-label">OFF</div>');
              }
            }
          }
        },
        title: null,
        pane: {
          center: ['50%', '66%'],
          size: '80%',
          startAngle: -90,
          endAngle: 90,
          background: {
            backgroundColor: this.offState ? '#F8F8F8' : '#eee', // bg color of the arc
            innerRadius: '60%',
            outerRadius: '100%',
            shape: 'arc'
          }
        },
        // the value axis
        yAxis: {
          stops: [
            [0.1, this.offState ? "transparent" : this.color]
          ],
          lineWidth: 0,
          minorTickInterval: null,
          //tickPixelInterval: 100,
          minTickInterval: 1,
          tickWidth: 1,
          title: {
            y: -70
          },
          labels: {
            y: 16,
            step: 100,
            distance: -15
          },
          min: 0,
          max: this.maxDialVal,
          showFirstLabel: !this.offState
        },
        credits: {
          enabled: false
        },
        plotOptions: {
          solidgauge: {
            dataLabels: {
              enabled: !this.offState,
              y: 15,
              borderWidth: 0,
              useHTML: true,
              zIndex: 1
            }
          }
        }
      });
    },
    getOffState: function() {
      var portletSensorData = _getMaiaSensorData(this.options.lsid,
        this.conStructure51);
      return Boolean(portletSensorData[this.conStructure51.flow_state] !=
        null && !wl.app.oMapper.checkOutdatedData(this.lsid) && (
          portletSensorData[this.conStructure51.flow_state] === wl.constants
          .pressure_flow_state.off ||
          portletSensorData[this.conStructure51.flow_state] === wl.constants
          .pressure_flow_state.on_to_off));
    },
    buildGraph: function() {
      this.offState = this.getOffState();
      this.oChartOptions = this.getHighchartsOptions();
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(this.maxDialVal),
        true, false);
      return this;
    },
    getSeries: function() {
      var iRawData = 0;
      var sData = DASH_VALUE;
      var flowRateTypeId = wl.data.userAccountSetting.unitsFlowRateTypeId;
      var timeRate = flowRateTypeId === 1 ? "hour" : "min";

      var totalFlowData = _.findWhere(wl.data.totalFlowData, {
        iLogicalSensorId: this.lsid
      });

      if (totalFlowData && !wl.app.oMapper.checkOutdatedData(this.lsid) &&
        !this.offState) {
        iRawData = totalFlowData.flowRatePerMin.convertedVal;
        iRawData = flowRateTypeId === 1 ? iRawData * 60 : iRawData;
        sData = iRawData > 0 && iRawData < 0.1 ? "> 0" : Utils.abbreviateNumber(
          iRawData, wl.data.userAccountSetting);
        this.maxDialVal = Utils.slidingScaleMax(iRawData);
      }

      return [{
        id: 'flow_sensor',
        name: 'sensor_flow',
        data: [iRawData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            sData + '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            this.model.get('unit') + '/' + timeRate +
            '</span></div>'
        }
      }];
    },
    updateData: function() {
      //when flow state changes the chart must be rebuilt
      if (this.getOffState() === this.offState) {
        if (!this.getOffState()) {
          this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(
            this.getSeries()[0].data[0]), true, false);
          this.oChart.series[0].update(this.getSeries()[0]);
          window.thechart = this.oChart;
        }
      } else {
        this.buildGraph();
      }
    }
  });

  /*******************
   * Flow Totals - Structure 51
   ******************/
  _oContentsViews.structure_type_51_flow_totals_graph = _oViews.BaseGraphView
    .extend({
      className: 'portlet-et graph-view',
      afterInit: function() {
        var that = this;
        this.categoryLabels = [];
        var categoriesKeys = ['day', 'month', 'year'];
        _.each(categoriesKeys, function(key) {
          var prom = document.l10n.formatValue(key);
          that.promises.push(prom);
          prom.then(function(result) {
            that.categoryLabels[key] = result;
          });
        });
        this.model.set('unit', Utils.getAccountFlowUnit(wl.data.userAccountSetting
          .unitsFlowTypeId));
        this.colorDay = '#29b574';
        this.colorMonth = '#29b574';
        this.colorYear = '#3288c2';
        this.oChartOptions.yAxis = {
          labels: {
            formatter: function() {
              return Utils.formatSensorReading('Flow Sum', this.value,
                wl.data.userAccountSetting) + " " + that.model.get(
                'unit');
            }
          },
          title: null
        };
        this.oChartOptions.xAxis.labels = {
          autoRotation: [-25, -35],
          y: 15,
          x: 5,
          style: {
            textOverflow: 'none'
          }
        }
        this.oChartOptions.plotOptions.series.dataLabels.formatter =
          function() {
            if (this.y > 0 && this.y < 0.1) {
              return " > 0";
            }
            return Utils.abbreviateNumber(this.y, wl.data.userAccountSetting)
          }
        this.oChartOptions.chart.marginTop = 24;
      },
      buildGraph: function() {
        this.oChartOptions.chart.renderTo = this.$(
          '.highcharts-container')[0];
        this.oChartOptions.series = this.getSeries();
        this.oChart = new Highcharts.Chart(this.oChartOptions);
        this.oChart.setSize(this.size.width - 4, this.size.height - 4);
        return this;
      },
      getSeries: function() {
        var iFlowTotalDay = null;
        var iFlowTotalMonth = null;
        var iFlowTotalYear = null;
        var totalFlowData = _.findWhere(wl.data.totalFlowData, {
          iLogicalSensorId: this.lsid
        });
        if (totalFlowData && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
          iFlowTotalDay = totalFlowData.totalForDay.convertedVal;
          iFlowTotalMonth = totalFlowData.totalForMonth.convertedVal;
          iFlowTotalYear = totalFlowData.totalForYear.convertedVal;
        }

        //If all values are 0, then we need to set yaxis max so that the yaxis is shown.
        if (iFlowTotalDay === 0 && iFlowTotalMonth === 0 &&
          iFlowTotalYear === 0) {
          this.oChartOptions.yAxis.min = 0;
          this.oChartOptions.yAxis.max = 1;
        }
        var arrData = [
          _createHighChartDataPoint('sensor_flow_day', this.categoryLabels[
            'day'], iFlowTotalDay, this.colorDay),
          _createHighChartDataPoint('sensor_flow_month', this.categoryLabels[
            'month'], iFlowTotalMonth, this.colorMonth),
          _createHighChartDataPoint('sensor_flow_year', this.categoryLabels[
            'year'], iFlowTotalYear, this.colorYear)
        ]

        return [{
          id: 'flow',
          name: 'flow',
          colorDay: this.colorDay,
          colorMonth: this.colorMonth,
          colorYear: this.colorYear,
          data: arrData
        }];
      },
      updateData: function() {
        this.oChart.series[0].update(this.getSeries()[0]);
      }
    });

  /*************************************
   * Water Analyzer Sensor (Temp, EC) - Structure 55
   *************************************/
  _oContentsViews.structure_type_55_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-structure-type-55 graph-view',
    portletSensorData: [],
    afterInit: function() {
      var that = this;
      this.translationKeys = ['temp', 'ec'];
      this.translations = [];
      this.promises = _getTranslation(this.translationKeys, this.translations);
      this.oChartOptions.chart.alignTicks = false;
      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.marginBottom = 50;
      this.oChartOptions.plotOptions.column.grouping = false;
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function () {
          if (this.point.id === "") {
            return undefined;
          }
          if (this.point.category === "Temp") {
            return Utils.formatSensorReading('Temperature',
              this.y, wl.data.userAccountSetting);
          } else if (this.point.category === "EC") {
            return Utils.formatSensorReading('EC', this
              .y, wl.data.userAccountSetting);
          }
        };
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.xAxis = this.getXAxis();
      this.oChartOptions.yAxis = this.getYAxis();
      this.oChart = new Highcharts.Chart(this.oChartOptions);

      var w, h;

      w = this.size.width - 10;
      h = this.size.height - 10;
      this.oChart.setSize(w, h, true);
    },
    getSeries: function() {
      var conStructure55 = wl.constants.structureType55FieldName;
      //Execute the get data function
      this.portletSensorData = _getMaiaSensorData(this.lsid,
        conStructure55);

      var dTemp = null;
      var dEc = null;
      if (_hasMaiaData(this.portletSensorData[conStructure55.temp]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        if (!_isDashed32767(this.portletSensorData[conStructure55.temp])) {
          dTemp = this.portletSensorData[conStructure55.temp];
        }
        if (!_isDashed32767(this.portletSensorData[conStructure55.salinity])) {
          dEc = this.portletSensorData[conStructure55.salinity];
        }
      }

      var threshold = 0;
      if (dTemp < 0) {
        threshold = _getThresholdForNegativeVal(dTemp);
      }

      return [{
        id: 'temp',
        yAxis: 0, //Map to to yAxis Label index.
        data: [_createHighChartDataPoint(this.lsid + '_temp', " ",
          dTemp, "#c42728"), {
          y: 0,
          id: '',
          color: 'transparent'
        }],
        threshold: threshold
      }, {
        id: 'ec',
        yAxis: 1, //Map to to yAxis Label index.
        data: [{
          y: 0,
          id: '',
          color: 'transparent'
        }, _createHighChartDataPoint(this.lsid + '_ec', " ",
          dEc, "#2cb17b")]
      }];
    },
    getXAxis: function() {
      return [{
        categories: [this.translations['temp'], this.translations[
          'ec']],
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          style: {
            textOverflow: 'none'
          }
        }
      }];
    },
    getYAxis: function() {
      var minRange = null;
      var min = null;
      if (!this.oChartOptions.series[0].data[0].y) {
        minRange = 50;
        min = 0;
      }

      return [{
        labels: {
          formatter: function() {
            return Utils.formatSensorReading('Temperature', this.value,
              wl.data.userAccountSetting) + ' ' + wl.data.unitLabelTemperature;
          }
        },
        title: null,
        opposite: false,
        min: min,
        minRange: minRange
      }, {
        labels: {
          formatter: function() {
            return Utils.formatSensorReading('EC', this.value,
              wl.data.userAccountSetting) + ' dS/m';
          }
        },
        gridLineWidth: 0,
        title: null,
        opposite: true
      }]
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
      this.oChart.series[1].update(this.getSeries()[1]);
    }
  });

  /*************************************
   * Decagon/Meter Depth Sensor (Depth, Temp, EC) - Structure 56
   *************************************/
  _oContentsViews.structure_type_56_graph = _oViews.BaseGraphView.extend({
    className: 'graph-view',
    portletSensorData: [],
    afterInit: function () {
      var that = this;
      this.thresholdDepth = 0;
      this.thresholdTemp = 0;
      this.translationKeys = ['fluid_depth', 'temp', 'ec'];
      this.translations = [];
      this.promises = _getTranslation(this.translationKeys, this.translations);
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function () {
        return that._getTooltip(this);
      };

      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.marginBottom = 50;
      this.oChartOptions.chart.marginRight = 92;

      //Get the structure and data and save it into this context.
      this.conStructure56 = wl.constants.structureType56FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure56);

      this.unitLabelDepth = Utils.getAccountWaterDepthUnit(wl.data.userAccountSetting.unitsWaterDepthTypeId);
      this.oChartOptions.plotOptions.column.grouping = false;
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function () {
          if (this.point.id === "") {
            return undefined;
          }
          if (this.point.category === "Depth") {
            return Utils.formatSensorReading('Depth',
              this.y, wl.data.userAccountSetting);
          } else if (this.point.category === "Temp") {
            return Utils.formatSensorReading('Temperature', this.y,
              wl.data.userAccountSetting);
          } else if (this.point.category === "EC") {
            return Utils.formatSensorReading('EC', this.y,
              wl.data.userAccountSetting);
          }
        };
    },
    buildGraph: function () {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis = this.getYAxis();
      this.oChartOptions.xAxis = this.getXAxis();
      this.oChart = new Highcharts.Chart(this.oChartOptions);

      var w, h;

      w = this.size.width - 10;
      h = this.size.height - 10;
      this.oChart.setSize(w, h, true);
    },
    getSeries: function () {
      var depthVal = null;
      var tempVal = null;
      var ecVal = null;

      if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
        depthVal = this.portletSensorData[this.conStructure56.depth];
        tempVal = this.portletSensorData[this.conStructure56.temp];
        ecVal = this.portletSensorData[this.conStructure56.ec];
      }


      if (depthVal < 0) {
        this.thresholdDepth = _getThresholdForNegativeVal(depthVal);
      }

      if (tempVal < 0) {
        this.thresholdTemp = _getThresholdForNegativeVal(tempVal);
      }

      return [{
        id: 'depth',
        yAxis: 0, //Map to to yAxis Label index.
        data: [
          _createHighChartDataPoint(this.lsid +
            '_depth', " ", depthVal, "#3288C2"), {
            y: 0,
            id: '',
            color: 'transparent'
          }, {
            y: 0,
            id: '',
            color: 'transparent'
          }
        ],
        threshold: this.thresholdDepth
      }, {
        id: 'temperature',
        yAxis: 1, //Map to to yAxis Label index.
        data: [{
          y: 0,
          id: '',
          color: 'transparent'
        },
          _createHighChartDataPoint(this.lsid +
            '_temp', " ", tempVal, "#C42728"),
          {
            y: 0,
            id: '',
            color: 'transparent'
          }
        ],
        threshold: this.thresholdTemp
      }, {
        id: 'ec',
        yAxis: 2, //Map to to yAxis Label index.
        data: [{
          y: 0,
          id: '',
          color: 'transparent'
        },
          {
            y: 0,
            id: '',
            color: 'transparent'
          },
          _createHighChartDataPoint(this.lsid +
            '_ec', " ", ecVal, "#2CB17B")
        ]
      }];
    },
    getXAxis: function () {
      var that = this;
      return [{
        categories: [that.translations['fluid_depth'], that.translations[
          'temp'], that.translations['ec']],
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          style: {
            textOverflow: 'none'
          }
        }
      }]
    },
    getYAxis: function () {
      var that = this;
      return [{
        labels: {
          format: '{value} ' + that.unitLabelDepth,
          formatter: function () {
            return Utils.formatSensorReading('Depth', this.value,
                wl.data.userAccountSetting) + ' ' + that.unitLabelDepth;
          }
        },
        title: null,
        opposite: false,
        min: this.thresholdDepth !== 0 ? this.thresholdDepth : null,
        max: this.thresholdDepth !== 0 ? 0 : null
      }, {
        labels: {
          formatter: function () {
            return Utils.formatSensorReading('Temp', this.value,
                wl.data.userAccountSetting) + ' ' + wl.data.unitLabelTemperature;
          }
        },
        title: null,
        opposite: true,
        offset: -12,
        min: this.thresholdTemp !== 0 ? this.thresholdTemp : null,
        max: this.thresholdTemp !== 0 ? 0 : null
      }, {
        labels: {
          formatter: function () {
            return Utils.formatSensorReading('EC', this.value,
                wl.data.userAccountSetting) + ' dS/m';
          }
        },
        title: null,
        opposite: true,
        offset: 24
      }]
    },
    updateData: function () {
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure56);
      this.oChart.series[0].update(this.getSeries()[0]);
      this.oChart.series[1].update(this.getSeries()[1]);
      this.oChart.series[2].update(this.getSeries()[2]);
    },
    _getTooltip: function (oHcData) {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit'
      };

      var conStructure56 = wl.constants.structureType56FieldName;

      switch (oHcData.point.id) {
        case this.lsid + '_temp':
          oTplData.unit = wl.data.unitLabelTemperature;
          oTplData.name = 'sensor_temp';
          oTplData.current_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure56.temp],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Temperature',
            this.portletSensorData[conStructure56.temp_high], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure56.temp_low],
            wl.data.userAccountSetting);
          break;
        case this.lsid + '_depth':
          oTplData.unit = this.unitLabelDepth;
          oTplData.name = 'fluid_depth';
          oTplData.current_value = Utils.formatSensorReading(
            'Depth', this.portletSensorData[conStructure56.depth],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Depth',
            this.portletSensorData[conStructure56.depth_high], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading('Depth',
            this.portletSensorData[conStructure56.depth_low], wl.data
              .userAccountSetting);
          break;
        case this.lsid + '_ec':
          oTplData.unit = 'dS/m';
          oTplData.name = 'ec';
          oTplData.current_value = Utils.formatSensorReading(
            'EC', this.portletSensorData[conStructure56.ec],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('EC',
            this.portletSensorData[conStructure56.ec_high], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading('EC',
            this.portletSensorData[conStructure56.ec_low], wl.data
              .userAccountSetting);
          break;
        default:
          return false;
      }
      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });

  /***********************************
   * PAR Sensor (PPFD) - Structure 59
   ***********************************/
  _oContentsViews.structure_type_59_PAR_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-solar-rad graph-view',
    maxDialVal: 100, //The max val for the dial. This is set in the getSeries function
    afterInit: function() {
      var that = this;
      this.model.set('unit', Utils.getAccountUnitsByDataName(wl.data.userAccountSetting, 'PAR'));
      this.conStructure59 = wl.constants.structureType59FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure59);
      this.color = '#FAAE3F';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.size = Marionette.getOption(this, 'size');
      // end constuctor
      // end constuctor
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(this.maxDialVal),
        true, false);
      return this;
    },
    getSeries: function() {
      var iRawData = 0;
      var sData = DASH_VALUE;

      this.portletSensorData = _getMaiaSensorData(this.options.lsid,
        this.conStructure59);
      if (this.portletSensorData[this.conStructure59.par_avg] !=
        null && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        iRawData = this.portletSensorData[this.conStructure59.par_avg];
        sData = Utils.formatSensorReading('PAR', iRawData, wl.data
          .userAccountSetting);
        this.maxDialVal = Utils.slidingScaleMax(iRawData);
      }

      return [{
        id: 'par_sensor',
        name: 'sensor_par',
        data: [iRawData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
          sData + '</span><br/>' +
          '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
          this.model.get('unit') + '</span></div>'
        }
      }];
    },
    updateData: function() {
      this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(this.getSeries()[
        0].data[0]), true, false);
      this.oChart.series[0].update(this.getSeries()[0]);
      window.thechart = this.oChart;
    },
    _getTooltip: function() {
      var current_value = DASH_VALUE;
      var hi_value = DASH_VALUE;
      var low_value = DASH_VALUE;

      if (_hasMaiaData(this.portletSensorData[this.conStructure59.par_avg]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        current_value = Utils.formatSensorReading('PAR',
          this.portletSensorData[this.conStructure59.par_avg],
          wl.data.userAccountSetting),
          hi_value = Utils.formatSensorReading('PAR', this.portletSensorData[
            this.conStructure59.par_high], wl.data.userAccountSetting),
          low_value = Utils.formatSensorReading('PAR', this.portletSensorData[
            this.conStructure59.par_low], wl.data.userAccountSetting)
      }

      var oTplData = {
        unit: this.model.get('unit'),
        tooltip_text: 'tooltip_value_unit',
        name: "PAR",
        current_value: current_value,
        hi_value: hi_value,
        low_value: low_value
      };

      return window.tpl['tooltip-hilow-single'](oTplData);
    },
  });

  /******************************
   * PAR Sensor - Daily Light Integral - Structure 59
   ******************************/
  _oContentsViews.structure_type_59_DLI_graph = _oViews.BaseGraphView.extend({
    className: 'portlet-dli graph-view',
    afterInit: function() {
      var that = this;
      this.categoryLabels = [];
      var categoriesKeys = ['current', 'projected'];
      _.each(categoriesKeys, function(key) {
        var prom = document.l10n.formatValue(key);
        that.promises.push(prom);
        prom.then(function(result) {
          that.categoryLabels[key] = result;
        });
      });
      this.model.set('unit', Utils.getAccountUnitsByDataName(wl.data.userAccountSetting, 'DLI'));
      this.currentColor = '#FAAE3F';
      this.projectedColor = '#FF8D00';
      this.oChartOptions.yAxis.labels = {
        useHTML: true,
        formatter: function() {
          return Utils.formatSensorReading('DLI', this.value, wl
              .data.userAccountSetting) + ' ' + that.model.get(
              'unit');
        },
        style: {
          textAlign: "right"
        },
        title: null
      };
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return Utils.formatSensorReading('DLI', this.y, wl.data.userAccountSetting)
        };
      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.spacingLeft = 0;
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];

      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 1, this.size.height - 12);

      return this;
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    getSeries: function () {
      this.conStructure59 = wl.constants.structureType59FieldName;
      this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure59);

      var dCurrentVal = null;
      var dProjectedVal = null;

      if (_hasMaiaData(this.portletSensorData[this.conStructure59.dli_day]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        dCurrentVal = this.portletSensorData[this.conStructure59.dli_day]
      }
      if (_hasMaiaData(this.portletSensorData[this.conStructure59.dli_day]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        dProjectedVal = this.portletSensorData[this.conStructure59.dli_projected]
      }
      
      //If all values are 0 or null, then we need to set yaxis max so that the yaxis is shown.
      if (!dCurrentVal && !dProjectedVal) {
        this.oChartOptions.yAxis.min = 0;
        this.oChartOptions.yAxis.max = 1;
      }

      return [{
        id: 'dli',
        yAxis: 0,
        data: [wl.app.Dashboard.createHighChartDataPoint('sensor_dli_current',
          this.categoryLabels['current'], dCurrentVal, this.currentColor),
          wl.app.Dashboard.createHighChartDataPoint('sensor_dli_projected',
            this.categoryLabels['projected'], dProjectedVal, this.projectedColor)]
      }]
    }
  });
  
  /***********************************
   * CO2 Sensor - Structure 63
   ***********************************/
  _oContentsViews.structure_type_63_graph = _oViews.BaseGraphView.extend({
    className: 'graph-view',
    maxDialVal: 500, //The max val for the dial. This is set in the getSeries function
    afterInit: function() {
      var that = this;
      this.model.set('unit', 'ppm');
      this.conStructure63 = wl.constants.structureType63FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure63);
      this.color = '#00A89C';
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.size = Marionette.getOption(this, 'size');
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(this.maxDialVal),
        true, false);
      return this;
    },
    getSeries: function() {
      var iRawData = 0;
      var sData = DASH_VALUE;

      this.portletSensorData = _getMaiaSensorData(this.options.lsid,
        this.conStructure63);
      if (this.portletSensorData[this.conStructure63.co2_avg] !=
        null && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        iRawData = this.portletSensorData[this.conStructure63.co2_avg];
        sData = iRawData;
        this.maxDialVal = Utils.slidingScaleMax(iRawData);
      }

      return [{
        id: 'par_sensor',
        name: 'sensor_par',
        data: [iRawData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 32,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
          sData + '</span><br/>' +
          '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
          this.model.get('unit') + '</span></div>'
        }
      }];
    },
    updateData: function() {
      this.oChart.yAxis[0].setExtremes(0, Utils.slidingScaleMax(this.getSeries()[
        0].data[0]), true, false);
      this.oChart.series[0].update(this.getSeries()[0]);
      window.thechart = this.oChart;
    },
    _getTooltip: function() {
      var current_value = DASH_VALUE;
      var hi_value = DASH_VALUE;
      var low_value = DASH_VALUE;

      if (_hasMaiaData(this.portletSensorData[this.conStructure63.co2_avg]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        current_value = this.portletSensorData[this.conStructure63.co2_avg];
        hi_value = this.portletSensorData[this.conStructure63.co2_high];
        low_value = this.portletSensorData[this.conStructure63.co2_low];
      }

      var oTplData = {
        unit: this.model.get('unit'),
        tooltip_text: 'tooltip_value_unit',
        name: "CO2",
        current_value: current_value,
        hi_value: hi_value,
        low_value: low_value
      };

      return window.tpl['tooltip-hilow-single'](oTplData);
    },
  });
  
  /*************************************
   * Load Sensor - Structure 64
   *************************************/
  _oContentsViews.structure_type_64_graph = _oViews.BaseGraphView.extend({
    className: 'graph-view',
    maxDialVal: 100, //The max val for the dial. This is set in the getSeries function
    afterInit: function() {
      var that = this;
      //temp
      this.model.set('unit', Utils.getAccountUnitsByDataName(wl.data.userAccountSetting, 'Weight'));
      this.conStructure64 = wl.constants.structureType64FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure64);
      this.color = "#00a89c";
      this.oChartOptions = this.getSolidGaugeChartOptions();
      this.size = Marionette.getOption(this, 'size');
      // end constuctor
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis.max = this.maxDialVal;
      this.oChart = new Highcharts.Chart(this.oChartOptions);
      this.oChart.setSize(this.size.width - 4, this.size.height - 4);
      return this;
    },
    getSeries: function() {
      var dRawData = '--';
      var threshold = null;
      this.oChartOptions.yAxis.labels.step = 1;

      if (_hasMaiaData(this.portletSensorData[this.conStructure64.load]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        dRawData = this.portletSensorData[this.conStructure64.load];
        this.maxDialVal = Utils.slidingScaleMax(Math.abs(dRawData));
      }

      this.oChartOptions.yAxis.max = this.maxDialVal;
      this.oChartOptions.yAxis.min = 0;
      this.oChartOptions.yAxis.tickPositions = [0, this.maxDialVal];

      if (this.oChart.yAxis) {
        this.oChart.yAxis[0].update(this.oChartOptions.yAxis);
      }

      return [{
        id: 'temperature',
        data: [dRawData],
        color: this.color,
        dataLabels: {
          style: {
            fontWeight: 'normal'
          },
          y: 30,
          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' +
            Utils.formatSensorReading('Load', dRawData, wl
              .data.userAccountSetting) + '</span><br/>' +
            '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' +
            this.model.get('unit') + '</span></div>'
        }
      }];
    },
    updateData: function() {
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure64);
      this.oChart.series[0].update(this.getSeries()[0]);
    }
  });
  
  /*************************************
   * Judd Depth Sensor (Depth, Temp) - Structure 66
   *************************************/
  _oContentsViews.structure_type_66_graph = _oViews.BaseGraphView.extend({
    className: 'graph-view',
    portletSensorData: [],
    afterInit: function () {
      var that = this;
      this.thresholdDepth = 0;
      this.thresholdTemp = 0;
      this.translationKeys = ['fluid_depth', 'temp'];
      this.translations = [];
      this.promises = _getTranslation(this.translationKeys, this.translations);
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };

      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.marginBottom = 50;

      //Get the structure and data and save it into this context.
      this.conStructure66 = wl.constants.structureType66FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure66);

      this.unitLabelDepth = Utils.getAccountWaterDepthUnit(wl.data.userAccountSetting.unitsWaterDepthTypeId);
      this.oChartOptions.plotOptions.column.grouping = false;
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function () {
          if (this.point.id === "") {
            return undefined;
          }
          if (this.point.category === "Depth") {
            return Utils.formatSensorReading('Depth',
              this.y, wl.data.userAccountSetting);
          } else if (this.point.category === "Temp") {
            return Utils.formatSensorReading('Temperature', this
              .y, wl.data.userAccountSetting);
          }
        };
    },
    buildGraph: function () {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis = this.getYAxis();
      this.oChartOptions.xAxis = this.getXAxis();
      this.oChart = new Highcharts.Chart(this.oChartOptions);

      var w, h;

      w = this.size.width - 10;
      h = this.size.height - 10;
      this.oChart.setSize(w, h, true);
    },
    getSeries: function () {
      var depthVal = null;
      var tempVal = null;

      if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
        depthVal = this.portletSensorData[this.conStructure66.depth];
        tempVal = this.portletSensorData[this.conStructure66.temp]
      }

      if (depthVal < 0) {
        this.thresholdDepth = _getThresholdForNegativeVal(depthVal);
      }

      if (tempVal < 0) {
        this.thresholdTemp = _getThresholdForNegativeVal(tempVal);
      }

      return [{
        id: 'depth',
        yAxis: 0, //Map to to yAxis Label index.
        data: [
          _createHighChartDataPoint(this.lsid +
            '_depth', " ", depthVal, "#00A89C"), {
            y: 0,
            id: '',
            color: 'transparent'
          }
        ],
        threshold: this.thresholdDepth
      }, {
        id: 'temperature',
        yAxis: 1, //Map to to yAxis Label index.
        data: [{
          y: 0,
          id: '',
          color: 'transparent'
        },
          _createHighChartDataPoint(this.lsid +
            '_temp', " ", tempVal, "#29B574")
        ],
        threshold: this.thresholdTemp
      }];
    },
    getXAxis: function () {
      var that = this;
      return [{
        categories: [that.translations['fluid_depth'], that.translations[
          'temp']],
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          style: {
            textOverflow: 'none'
          }
        }
      }]
    },
    getYAxis: function () {
      var that = this;
      return [{
        labels: {
          format: '{value} ' + that.unitLabelDepth,
          formatter: function() {
            return Utils.formatSensorReading('Depth', this.value,
              wl.data.userAccountSetting) + ' ' + that.unitLabelDepth;
          }
        },
        title: null,
        opposite: false,
        min: this.thresholdDepth !== 0 ? this.thresholdDepth : null,
        max: this.thresholdDepth !== 0 ? 0 : null
      }, {
        labels: {
          formatter: function() {
            return Utils.formatSensorReading('Temp', this.value,
              wl.data.userAccountSetting) + ' ' + wl.data.unitLabelTemperature;
          }
        },
        title: null,
        opposite: true,
        min: this.thresholdTemp !== 0 ? this.thresholdTemp : null,
        max: this.thresholdTemp !== 0 ? 0 : null
      }]
    },
    updateData: function () {
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure66);
      this.oChart.series[0].update(this.getSeries()[0]);
      this.oChart.series[1].update(this.getSeries()[1]);
    },
    _getTooltip: function (oHcData) {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit'
      };

      var conStructure66 = wl.constants.structureType66FieldName;

      switch (oHcData.point.id) {
        case this.lsid + '_temp':
          oTplData.unit = wl.data.unitLabelTemperature;
          oTplData.name = 'sensor_temp';
          oTplData.current_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure66.temp],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Temperature',
            this.portletSensorData[conStructure66.temp_high], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure66.temp_low],
            wl.data.userAccountSetting);
          break;
        case this.lsid + '_depth':
          oTplData.unit = this.unitLabelDepth;
          oTplData.name = 'fluid_depth';
          oTplData.current_value = Utils.formatSensorReading(
            'Depth', this.portletSensorData[conStructure66.depth],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Depth',
            this.portletSensorData[conStructure66.depth_high], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading('Depth',
            this.portletSensorData[conStructure66.depth_low], wl.data
              .userAccountSetting);
          break;
        default:
          return false;
      }
      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });
  
  /*************************************
   * Rain - Structure 70
   *************************************/
  _oContentsViews.structure_type_70_rain_graph = _oContentsViews.structure_type_17_rain_graph.extend();
  
  /*************************************
   * Rain Rate - Structure 70
   *************************************/
  _oContentsViews.structure_type_70_rain_rate_graph = _oContentsViews.structure_type_17_rain_rate_graph.extend({
    getStructure: function () {
      return wl.constants.structureType70FieldName;
    },
  });
  
  /**********************************
   * Lambrecht Wind Sensor - Wind Rose - Structure 71
   *********************************/
  _oContentsViews.structure_type_71_wind_rose_day = _oContentsViews.wind_rose_day
    .extend();
  _oContentsViews.structure_type_71_wind_rose_week = _oContentsViews.wind_rose_week
    .extend();
  _oContentsViews.structure_type_71_wind_rose_month = _oContentsViews.wind_rose_month
    .extend();
  _oContentsViews.structure_type_71_wind_rose_year = _oContentsViews.wind_rose_year
    .extend();
  
  /*******************************************
   * Lambrecht Wind Sensor - Wind Speed - Structure 71
   *****************************************/
  _oContentsViews.structure_type_71_wind_speed_graph = _oContentsViews.structure_type_18_wind_speed_graph.extend({
    getStructure: function () {
      return wl.constants.structureType71FieldName;
    }
  });
  
  /*******************************************
   * Lambrecht Wind Sensor - Wind Direction - Structure 71
   *****************************************/
  _oContentsViews.structure_type_71_wind_direction_graph = _oContentsViews.structure_type_18_wind_direction_graph.extend({
    getStructure: function () {
      return wl.constants.structureType71FieldName;
    },
  });
  
  /*******************************************
   * Lambrecht Wind Sensor - Temperature - Structure 71
   *****************************************/
  _oContentsViews.structure_type_71_temp_graph = _oContentsViews.temperature_graph.extend({
      getStructure: function () {
        return wl.constants.structureType71FieldName;
      },
      getTempVal: function () {
        return this.getStructure()['temp_avg'];
      },
      initialize: function () {
          contentsViews.temperature_graph.prototype.initialize.apply(this, arguments);
          this.conStructure = this.getStructure();
          this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);
          var iTempOutVal = this.portletSensorData[this.getTempVal()];
          var iWindChillVal = this.portletSensorData[this.conStructure.wind_chill];

          if (iWindChillVal == null) { // if no wind chill display temperature gauge
              this.maxDialVal = 10;
              this.afterInit = contentsViews.structure_type_22_graph.prototype.afterInit.apply(this, arguments);

              this.getSeries = function () {
                  this.color = '#c42728';
                  this.oChartOptions.yAxis.stops[0] = [0.1, this.color];
                  var sData = DASH_VALUE;
                  var dRawData = 0;
                  var threshold = null;
                  this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);
                  this.oChartOptions.yAxis.labels.step = 1;

                  if (wl.app.Dashboard.hasMaiaData(iTempOutVal) && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
                      dRawData = iTempOutVal;
                      sData = Utils.formatSensorReading('Temperature', dRawData, wl.data.userAccountSetting);
                      this.maxDialVal = Utils.slidingScaleMax(Math.abs(dRawData));
                  }

                  if (dRawData < 0) {
                      threshold = 0;
                      this.negativeScale = true;
                      this.oChartOptions.yAxis.max = 0;
                      this.oChartOptions.yAxis.min = -this.maxDialVal;
                      this.oChartOptions.yAxis.tickPositions = [-this.maxDialVal, 0];
                  } else {
                      this.oChartOptions.yAxis.max = this.maxDialVal;
                      this.oChartOptions.yAxis.min = 0;
                      this.oChartOptions.yAxis.tickPositions = [0, this.maxDialVal];
                  }

                  if (this.oChart.yAxis) {
                      this.oChart.yAxis[0].update(this.oChartOptions.yAxis);
                  }

                  return [{
                      id: 'temperature',
                      data: [dRawData],
                      color: this.color,
                      threshold: threshold,
                      dataLabels: {
                          style: {
                              fontWeight: 'normal'
                          },
                          y: 30,
                          format: '<div style="text-align:center;"><span style="font-family:merriweatherregular;font-size:24px;color:#3b454b">' + sData + '</span><br/>'
                          + '<span style="font-family:merriweatherregular;font-size:14px;color:#3b454b">' + wl.data.unitLabelTemperature + '</span></div>'
                      }
                  }];
              };
              this._getTooltip = function () {
                  var current_value = DASH_VALUE;
                  var hi_value = DASH_VALUE;
                  var low_value = DASH_VALUE;
                  if (wl.app.Dashboard.hasMaiaData(this.portletSensorData[this.getTempVal()])
                      && !wl.app.oMapper.checkOutdatedData(this.lsid)) {
                      current_value = Utils.formatSensorReading('Temperature', this.portletSensorData[this.getTempVal()], wl.data.userAccountSetting);
                      hi_value = Utils.formatSensorReading('Temperature', this.portletSensorData[this.conStructure.temp_high], wl.data.userAccountSetting);
                      low_value = Utils.formatSensorReading('Temperature', this.portletSensorData[this.conStructure.temp_low], wl.data.userAccountSetting);
                  }

                  var oTplData = {
                      unit: wl.data.unitLabelTemperature,
                      name: "Temperature",
                      tooltip_text: 'tooltip_value_unit',
                      current_value: current_value,
                      hi_value: hi_value,
                      low_value: low_value
                  };
                  return window.tpl['tooltip-hilow-single'](oTplData);
              };
              this.updateData = function () {
                  this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure);
                  this.oChart.series[0].update(this.getSeries()[0]);
              }
          }
      },
      getSeries: function () {
          //Get the structure and data and save it into this context.
          var iTempOutVal = null;
          var iWindChillVal = null;

          if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
              iTempOutVal = this.portletSensorData[this.getTempVal()];
              iWindChillVal = this.portletSensorData[this.conStructure.wind_chill];
          } else if (wl.app.oMapper.checkOutdatedData(this.lsid)) {
              this.oChartOptions.yAxis.min = 0;
              this.oChartOptions.yAxis.max = 100;
          }
          var arrData = [
              wl.app.Dashboard.createHighChartDataPoint('sensor_temp_out', this.categoryLabels['sensor_temp_out'], iTempOutVal, '#c42728')
          ]

          if (iWindChillVal != null) {
              arrData.push(wl.app.Dashboard.createHighChartDataPoint('sensor_temp_chill', this.categoryLabels['sensor_temp_chill'], iWindChillVal, '#3288c2'));
          } else { //if there is only outside temp column
              this.oChartOptions.plotOptions.series.pointWidth = 73;
          }

          if (_.every(arrData, {y: 0}) && this.oChart.yAxis) {
              this.oChart.yAxis[0].setExtremes(0, 5);
          }

          var threshold = 0;
          if (iTempOutVal < 0) {
              threshold = wl.app.Dashboard.getThresholdForNegativeVal(iTempOutVal);
          }

          var minVal = this.getMinVal(arrData);

          if (minVal < 0) {
              this.oChartOptions.yAxis.min = Math.floor(minVal / 5) * 5;
          }

          return [{
              id: 'temp',
              name: 'temperature',
              colorByPoint: true,
              data: arrData,
              threshold: threshold
          }];
      },
      _getTooltip: function (oData) {
          var oTplData = {
              unit: this.model.get('unit'),
              tooltip_text: 'tooltip_value_unit',
              name: oData.key,
              current_value: this.formatTemp(oData.y)
          };

          var sTempOutHiVal = DASH_VALUE;
          var sTempOutLowVal = DASH_VALUE;
          var sWindChillLowVal = DASH_VALUE;

          if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.temp_high])) {
              sTempOutHiVal = this.portletSensorData[this.conStructure.temp_high];
          }
          if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.temp_low])) {
              sTempOutLowVal = this.portletSensorData[this.conStructure.temp_low];
          }
          if (!wl.app.Dashboard.isDashed32767(this.portletSensorData[this.conStructure.wind_chill_low])) {
              sWindChillLowVal = this.portletSensorData[this.conStructure.wind_chill_low];
          }

          switch (oData.point.id) {
              case 'sensor_temp_out':
                  oTplData.hi_value = this.formatTemp(sTempOutHiVal);
                  oTplData.low_value = this.formatTemp(sTempOutLowVal);
                  break;
              case 'sensor_temp_chill':
                  oTplData.low_value = this.formatTemp(sWindChillLowVal);
                  break;
          }
          return window.tpl['tooltip-hilow-single'](oTplData);
      }
  });
  
  /*******************************************
   * Surface Sentinel Sensor - Temp/Hum - Structure 75
   *****************************************/
  _oContentsViews.structure_type_75_temp_hum_graph = _oContentsViews.structure_type_16_graph.extend({
    afterInit: function() {
      var that = this;
      this.translationKeys = ['surface_temp', 'temp', 'hum', 'sensor_temp_dew', 'sensor_wet_bulb'];
      this.translations = [];
      this.promises = _getTranslation(this.translationKeys, this.translations);
      this.model.set('unit', wl.data.unitLabelPercent);
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.positioner = function(boxWidth,
                                                       boxHeight, point) {
        return {
          x: point.plotX,
          y: point.plotY + 30
        };
      };
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };
      this.oChartOptions.chart.alignTicks = false;
      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.marginBottom = 50;
      this.oChartOptions.plotOptions.column.grouping = false;
      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return this.point.id === "" ? undefined : Utils.formatSensorReading(
            'Temperature', this.y, wl.data.userAccountSetting);
        };
    },
    getSeries: function() {
      this.conStructure75 = wl.constants.structureType75FieldName;
      this.portletSensorData = wl.app.Dashboard.getMaiaSensorData(this.lsid, this.conStructure75);
      var iSurfaceTempVal = null;
      var iTempVal = null;
      var iHumVal = null;
      var iDewPointVal = null;
      var iWetBulbVal = null;
      if (_hasMaiaData(this.portletSensorData[this.conStructure75.surface_temp]) &&
        !wl.app.oMapper.checkOutdatedData(this.lsid)) {
        if (!_isDashed32767(this.portletSensorData[this.conStructure75.surface_temp])) {
          iSurfaceTempVal = this.portletSensorData[this.conStructure75.surface_temp];
        }
        if (!_isDashed32767(this.portletSensorData[this.conStructure75.temp])) {
          iTempVal = this.portletSensorData[this.conStructure75.temp];
        }
        if (!_isDashed32767(this.portletSensorData[this.conStructure75.hum])) {
          iHumVal = this.portletSensorData[this.conStructure75.hum];
        }
        if (!_isDashed32767(this.portletSensorData[this.conStructure75.dew_point])) {
          iDewPointVal = this.portletSensorData[this.conStructure75.dew_point];
        }
        if (!_isDashed32767(this.portletSensorData[this.conStructure75.wet_bulb])) {
          iWetBulbVal = this.portletSensorData[this.conStructure75.wet_bulb];
        }
      }

      var arrData = [iSurfaceTempVal, iTempVal, iHumVal, iDewPointVal, iWetBulbVal];

      if (_.every(arrData, function (el) {return el === 0}) && this.oChart.yAxis) {
        this.oChart.yAxis[0].setExtremes(0, 5);
      }

      var minVal = Math.min.apply(null, arrData);
      var threshold = 0;
      if (minVal < 0) {
        this.oChartOptions.yAxis.min = Math.floor(minVal / 5) * 5;
        threshold = _getThresholdForNegativeVal(minVal);
      }

      var blankPoint = {y: 0, id: '', color: 'transparent'};

      return [{
        id: 'surface_temp',
        yAxis: 0,
        data: [_createHighChartDataPoint(this.lsid + '_surface_temp', " ",
          iSurfaceTempVal, "#E97F24"), blankPoint, blankPoint, blankPoint, blankPoint],
        threshold: threshold
      }, {
        id: 'temp',
        yAxis: 0,
        data: [blankPoint, _createHighChartDataPoint(this.lsid + '_temp', " ",
          iTempVal, "#C42728"), blankPoint, blankPoint, blankPoint]
      }, {
        id: 'hum',
        yAxis: 1,
        data: [blankPoint, blankPoint, _createHighChartDataPoint(this.lsid + '_hum', " ",
          iHumVal, "#F0C619"), blankPoint, blankPoint],
        threshold: threshold
      }, {
        id: 'dew_point',
        yAxis: 0,
        data: [blankPoint, blankPoint, blankPoint, _createHighChartDataPoint(this.lsid + '_dew_point', " ",
          iDewPointVal, "#38916D"), blankPoint],
        threshold: threshold
      }, {
        id: 'wet_bulb',
        yAxis: 0,
        data: [blankPoint, blankPoint, blankPoint, blankPoint,
          _createHighChartDataPoint(this.lsid + '_wet_bulb', " ", iWetBulbVal, "#3288c2")],
        threshold: threshold
      }]
    },
    getXAxis: function () {
      return [{
        categories: [this.translations['surface_temp'], this.translations['temp'],
          this.translations['hum'], this.translations['sensor_temp_dew'],
          this.translations['sensor_wet_bulb']],
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          style: {
            textOverflow: 'none'
          }
        }
      }];
    },
    _getTooltip: function(oHcData) {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit'
      };

      var conStructure75 = wl.constants.structureType75FieldName;

      switch (oHcData.point.id) {
        case this.lsid + '_surface_temp':
          oTplData.unit = wl.data.unitLabelTemperature;
          oTplData.name = 'surface_temp';
          oTplData.current_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure75.surface_temp],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Temperature',
            this.portletSensorData[conStructure75.surface_temp_hi], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure75.surface_temp_low],
            wl.data.userAccountSetting);
          break;
        case this.lsid + '_temp':
          oTplData.unit = wl.data.unitLabelTemperature;
          oTplData.name = 'sensor_temp';
          oTplData.current_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure75.temp],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Temperature',
            this.portletSensorData[conStructure75.temp_hi], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure75.temp_low],
            wl.data.userAccountSetting);
          break;
        case this.lsid + '_hum':
          oTplData.unit = wl.data.unitLabelPercent;
          oTplData.name = 'sensor_hum';
          oTplData.current_value = Utils.formatSensorReading(
            'Humidity', this.portletSensorData[conStructure75.hum],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Humidity',
            this.portletSensorData[conStructure75.hum_hi], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading('Humidity',
            this.portletSensorData[conStructure75.hum_low], wl.data
              .userAccountSetting);
          break;
        case this.lsid + '_dew_point':
          oTplData.unit = wl.data.unitLabelTemperature;
          oTplData.name = 'sensor_temp_dew';
          oTplData.current_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure75.dew_point],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Temperature',
            this.portletSensorData[conStructure75.dew_point_hi], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading('Temperature',
            this.portletSensorData[conStructure75.dew_point_low], wl.data
              .userAccountSetting);
          break;
        case this.lsid + '_wet_bulb':
          oTplData.unit = wl.data.unitLabelTemperature;
          oTplData.name = 'sensor_wet_bulb';
          oTplData.current_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure75.wet_bulb],
            wl.data.userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading('Temperature',
            this.portletSensorData[conStructure75.wet_bulb_low], wl.data
              .userAccountSetting);
          break;
        default:
          return false;
      }
      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });
  
  /*******************************************
   * Surface Sentinel Sensor - Spread - Structure 75
   *****************************************/
  _oContentsViews.structure_type_75_spread_graph = _oViews.BaseGraphView.extend({
    className: 'graph-view',
    portletSensorData: [],
    afterInit: function () {
      var that = this;
      this.thresholdSpread = 0;
      this.translationKeys = ['spread'];
      this.translations = [];
      this.promises = _getTranslation(this.translationKeys, this.translations);
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };

      this.oChartOptions.chart.marginTop = 24;
      this.oChartOptions.chart.marginBottom = 50;

      //Get the structure and data and save it into this context.
      this.conStructure75 = wl.constants.structureType75FieldName;
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure75);
      this.model.set('unit', wl.data.unitLabelTemperature);

      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function () {
          if (this.point.id === "") {
            return undefined;
          }
          if (this.point.category === "Spread") {
            return Utils.formatSensorReading('Temperature', this
              .y, wl.data.userAccountSetting);
          }
        };
    },
    buildGraph: function () {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis = this.getYAxis();
      this.oChartOptions.xAxis = this.getXAxis();
      this.oChart = new Highcharts.Chart(this.oChartOptions);

      var w, h;

      w = this.size.width - 10;
      h = this.size.height - 10;
      this.oChart.setSize(w, h, true);
    },
    getSeries: function () {
      var spreadVal = null;

      if (!wl.app.oMapper.checkOutdatedData(this.lsid)) {
        spreadVal = this.portletSensorData[this.conStructure75.spread];
      }

      if (spreadVal < 0) {
        this.thresholdSpread = _getThresholdForNegativeVal(spreadVal);
      }

      return [{
        id: 'spread',
        yAxis: 0, //Map to to yAxis Label index.
        data: [
          _createHighChartDataPoint(this.lsid +
            '_spread', " ", spreadVal, "#5EB8CA")
        ],
        threshold: this.thresholdSpread
      }];
    },
    getXAxis: function () {
      var that = this;
      return [{
        categories: [that.translations['spread']],
        labels: {
          autoRotation: [-25, -35],
          y: 15,
          style: {
            textOverflow: 'none'
          }
        }
      }]
    },
    getYAxis: function () {
      var that = this;
      var value = this.portletSensorData[this.conStructure75.spread];
      var min = value >= 0 ? -10 : this.thresholdSpread;
      var max = value <= 0 ? 10 : null;
      return {
        labels: {
          format: '{value} ',
          formatter: function() {
          	var sign = this.value > 0 ? '+' : '';
            return sign + Utils.formatSensorReadingWithUnit('Temperature', this.value,
            		wl.data.userAccountSetting, that.model.get('unit'))
          }
        },
        title: null,
        opposite: false,
        min: min,
        max: max
      }
    },
    updateData: function () {
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure75);
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function (oHcData) {
      var oTplData = {
        tooltip_text: 'tooltip_value_unit',
        unit: this.model.get('unit')
      };

      var conStructure75 = wl.constants.structureType75FieldName;

      switch (oHcData.point.id) {
        case this.lsid + '_spread':
          oTplData.name = 'spread';
          oTplData.current_value = Utils.formatSensorReading(
            'Temperature', this.portletSensorData[conStructure75.spread],
            wl.data.userAccountSetting);
          oTplData.hi_value = Utils.formatSensorReading('Temperature',
            this.portletSensorData[conStructure75.spread_hi], wl.data
              .userAccountSetting);
          oTplData.low_value = Utils.formatSensorReading('Temperature',
          		this.portletSensorData[conStructure75.spread_low], wl.data
          		.userAccountSetting);
          break;
        default:
          return false;
      }
      return window.tpl['tooltip-hilow-single'](oTplData);
    }
  });
  
  /*************************************
   * Alarm Sensor -  Structure 76
   *************************************/
  _oContentsViews.structure_type_76_alarm_graph = _oViews.BaseTextView.extend({
    className: 'text-view',
    initialize: function() {
      this.model = new Backbone.Model();
      this.size = Marionette.getOption(this, 'size');
    },
    onBeforeRender: function() {
      var conStructure76 = wl.constants.structureType76FieldName;
      this.portletSensorData = _getMaiaSensorData(this.options.lsid,
        conStructure76);
      var controlMode = this.portletSensorData[conStructure76.control_mode];
      var alarmState = this.portletSensorData[conStructure76.alarm_state];
      var outputState = this.portletSensorData[conStructure76.output_state];
      //Verify if there is data, if not, then we will show the no-data template.
      this.template = controlMode == null && alarmState == null && outputState == null ? 
    		  _getNoDataTemplate() : window.tpl['portlet-alarm-output-control-mode-override']
      var iAlarmState = (alarmState === wl.constants.pressure_flow_state.on ||
    		  alarmState === wl.constants.pressure_flow_state.off_to_on) ?
        1 : 0;
      if (alarmState != null && wl.app.oMapper.checkOutdatedData(
          this.options.lsid)) {
	    iAlarmState = null;
      }
      var iOutputState = (outputState === wl.constants.pressure_flow_state.on ||
    		  outputState === wl.constants.pressure_flow_state.off_to_on) ?
        1 : 0;
      if (outputState != null && wl.app.oMapper.checkOutdatedData(
          this.options.lsid)) {
	    iOutputState = null;
      }
      this.model.set('alarm_state', iAlarmState);
      this.model.set('output_state', iOutputState);
      this.model.set('control_mode', controlMode);
      return this;
    },
    updateData: function() {
      this.render();
    }
  });

  /*************************************
   * Dynamic Soil Moisture Sensor (moisture, EC, temp, hum) - Structure 1000
   *************************************/
  _oContentsViews.structure_type_1000_graph = _oViews.BaseGraphView.extend({
    className: 'graph-view',
    portletSensorData: [],
    dynamicType: 1000, //This identifies what type of dynamic. 1000 = standard, 1001=hack of temp only.
    getStructure: function () {
    	if (this.dynamicType==1001) {
    		return wl.constants.structureType1001FieldName;
    	} else {
      		return wl.constants.structureType1000FieldName;
      	}
    },

    afterInit: function() {
      var that = this;
      this.oChartOptions.tooltip.enabled = true;
      this.oChartOptions.tooltip.useHTML = true;
      this.oChartOptions.tooltip.formatter = function() {
        return that._getTooltip(this);
      };

      this.oChartOptions.plotOptions.series.dataLabels.formatter =
        function() {
          return _formatSoilMoisture(this.y);
        };

      //Get the structure and data and save it into this context.
      this.conStructure = this.getStructure();
      this.portletSensorData = _getMaiaSensorData(this.lsid, this.conStructure);

      this.unitLabelSoilMoisture = Utils.getAccountSoilUnit(
        _getUnitLabelMoisture(this.lsid), wl.data.userAccountSetting
        .unitsSoilMoistureTypeId);
      this.unitLabelSalinity = Utils.getAccountEcUnit(
        _getUnitLabelSalinity(this.lsid));
    },
    getRingObjsArr: function() {
      var dataArr = [];
      for (var i in this.conStructure) {
        if (i.indexOf('soil_moisture') >= 0) {
          for (var j in this.portletSensorData) {
            if (j === this.conStructure[i]) {
              var label = _getRingDepth(this.lsid, j);
              dataArr.push({
                'label': label,
                'dbField': j,
                'value': this.portletSensorData[j]
              });
            }
          }
        }
      }
      return dataArr;
    },
    buildGraph: function() {
      this.oChartOptions.chart.renderTo = this.$(
        '.highcharts-container')[0];
      this.oChartOptions.series = this.getSeries();
      this.oChartOptions.yAxis = this.getYAxis();
      this.oChartOptions.chart.type = "bar";
      this.oChart = new Highcharts.Chart(this.oChartOptions);

      var w, h;
      w = this.size.width - 10;
      h = this.size.height - 10;
      this.oChart.setSize(w, h, true);
    },
    getData: function() {

      var that = this;
      var colorsArr = ['#2cb17b', '#2da791', '#2fa09e', '#2f9aaa',
        '#3192b5', '#328abf', '#397eaf', '#3f749b', '#416783',
        '#415d71', '#3f525f', '#3c474d', '#2cb17b', '#2da791',
        '#2fa09e', '#2f9aaa'
      ];
      var data = [];
      var outdatedData = wl.app.oMapper.checkOutdatedData(this.lsid) ?
        true : false;
      _.forEach(that.getRingObjsArr(that.portletSensorData), function(
        item, i) {
        if (outdatedData) {
          item.value = null;
        }
        
        // 2016-06-08 Kenny Sam - Only show Soil Moisture Data in the graph.
        if ( item.dbField.replace("f","") <=16) {
	        data.push({
	          'color': colorsArr[i],
	          'name': item.label,
	          'id': that.lsid + '_soil_moisture_' + item.label +
	            '_' + item.dbField,
	          'y': item.value
	        });
		}
      });

      return data;
    },
    getSeries: function() {
      return [{
        id: 'soilMoisture',
        yAxis: 0,
        data: this.getData()
      }];
    },
    getYAxis: function() {
      var that = this;
      return [{
        labels: {
          format: '{value}' + that.unitLabelSoilMoisture
        },
        minRange: 1,
        min: 0,
        title: null,
        opposite: false,
        maxPadding: .1 //Add padding to the max value so labels can be displayed
      }]
    },
    updateData: function() {
      this.oChart.series[0].update(this.getSeries()[0]);
    },
    _getTooltip: function(oHcData) {
      var that = this;

      var oTplData = {
        soil_moist_unit: this.unitLabelSoilMoisture,
        soil_salinity_unit: this.unitLabelSalinity
      };

		
      _.forEach(this.getData(), function(obj) {
        if (oHcData.point.id.indexOf(that.lsid +
            '_soil_moisture_' + obj.name) >= 0) {
          var dbFieldIndex = oHcData.point.id.split('_').pop().replace(
            /^\D+/g, '');
          oTplData.name = obj.name;
          var iMoistureVal = that.portletSensorData[that.conStructure[
            'soil_moisture_' + dbFieldIndex]];

          if (typeof(iMoistureVal) != 'undefined') {
            oTplData.soil_moist_value = _formatSoilMoisture(
              iMoistureVal);
          }
		  
          var iSalinityVal = that.portletSensorData[that.conStructure[
            'soil_salinity_' + dbFieldIndex]];
          if (typeof(iSalinityVal) != 'undefined') {
            oTplData.soil_salinity_value = _formatSoilSalinity(
              iSalinityVal);

          }
		  
        }
      });
      return window.tpl['tooltip-soil-moisture'](oTplData);
    }
  });
  
  _oContentsViews.structure_type_1001_graph = _oContentsViews.structure_type_1000_graph.extend({
    dynamicType: 1001,
  });
  // End Board Module
});
