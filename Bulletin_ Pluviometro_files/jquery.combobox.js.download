//widget for select countries list on payment form

$.widget( "custom.combobox", {
  _create: function() {
    this.wrapper = $(".custom-combobox");

    this.element.hide();
    this._createAutocomplete();
    this._createShowAllButton();
  },
  _createAutocomplete: function() {
    var selected = this.element.children( ":selected" );

    this.input = $(".form-control.country")
      .attr("title", "")
      .attr("placeholder", "Country")
      .autocomplete({
        delay: 0,
        minLength: 0,
        disabled: true,
        source: $.proxy( this, "_source" )
      })
      .tooltip({
        classes: {
          "ui-tooltip": "ui-state-highlight"
        }
      });
    if (selected.length) {
      this.input.val(selected.text());
    }

    this._on( this.input, {
      autocompleteselect: function( event, ui ) {
        ui.item.option.selected = true;
        $(this.element).trigger('select');
        this._trigger( "select", event, {
          item: ui.item.option
        });
      },

      autocompletechange: "_removeIfInvalid"
    });
  },

  _createShowAllButton: function() {
    var input = this.input,
      wasOpen = false;

    $( "<i>" )
      .attr( "tabIndex", -1 )
      .insertBefore( this.wrapper )
      .addClass( "custom-combobox-toggle" )
      .on( "mousedown", function() {
        wasOpen = input.autocomplete( "widget" ).is( ":visible" );
      })
      .on( "click", function() {
        input.trigger( "focus" );

        // Close if already visible
        if ( wasOpen ) {
          return;
        }

        // Pass empty string as value to search for, displaying all results
        input.autocomplete( "search", "" );
      });
  },

  _source: function( request, response ) {
    var select = this.element;
    var matcher = $.ui.autocomplete.escapeRegex(request.term),
        startsWithMatcher = new RegExp("^" + matcher, "i"),
        startsWith = select.children("option").filter(function(i, elem) {
          return startsWithMatcher.test(elem.label || elem.value || elem);
        }),
        containsMatcher = new RegExp(matcher, "i"),
        contains = select.children("option").filter(function(i, elem) {
          return $.inArray(elem, startsWith) < 0 &&
              containsMatcher.test(elem.label || elem.value || elem);
        });
    response($.merge(startsWith, contains).map(function() {
      var text = $(this).text();
      if (this.value && ( !request.term || startsWithMatcher.test(text) || containsMatcher.test(text)))
      return {
        label: text,
        value: text,
        option: this
      };
    }));
  },

  _removeIfInvalid: function( event, ui ) {

    // Selected an item, nothing to do
    if ( ui.item ) {
      return;
    }

    // Search for a match (case-insensitive)
    var value = this.input.val(),
      valueLowerCase = value.toLowerCase(),
      valid = false;
    this.element.children( "option" ).each(function() {
      if ( $( this ).text().toLowerCase() === valueLowerCase ) {
        this.selected = valid = true;
        return false;
      }
    });
  },

  _destroy: function() {
    this.wrapper.remove();
    this.element.show();
  }
});
