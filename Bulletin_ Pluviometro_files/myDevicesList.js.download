/**
 * Created by anton.milko on 4/14/16.
 */

var wl = wl || {};
wl.data = wl.data || {};

wl.app.module("MyDevicesList", function (MyDevicesModule, MyDevicesApp) {

  //Devices Dropdown
  var OwnedModel = Backbone.Model.extend({
    defaults: {
      type: 'owned'
    }
  })

  this.OwnedDevicesCollection = Backbone.Collection.extend({
    model: OwnedModel,
    url: '/deviceShare/ownedDevices/',
    parse: function (response) {
      MyDevicesModule.ownedDevicesCount = response.data && response.data
        .count;
      return response.data && response.data.devices || [];
    },
    comparator: function (model) {
      return model.get('stationName') && model.get('stationName').toLowerCase();
    }
  })

  var SharedModel = Backbone.Model.extend({
    defaults: {
      type: 'shared'
    }
  })

  this.SharedDevicesCollection = Backbone.Collection.extend({
    model: SharedModel,
    url: '/deviceShare/devicesSharedWithMe',
    parse: function (response) {
      MyDevicesModule.sharedDevicesCount = response.data && response.data
        .count;
      return response.data && response.data.devices || [];
    },
    comparator: function (model) {
      return model.get('deviceInfo') && model.get('deviceInfo').stationName
        .toLowerCase();
    }
  });

  var FavoriteModel = Backbone.Model.extend({
    defaults: {
      type: 'favorite'
    }
  });

  var TotalResultsModel = Backbone.Model.extend({
    defaults: {
      type: 'results',
      total: 0,
      max: 0,
      searchTab: false
    }
  });

  var SearchResultModel = Backbone.Model.extend({
    defaults: {
      type: 'search'
    }
  })

  var SearchResultsCollection = Backbone.Collection.extend({
    model: SearchResultModel,
    comparator: function (model) {
      return model.get('deviceInfo') && model.get('deviceInfo').stationName
        .toLowerCase();
    }
  });

  this.FavoritesCollection = Backbone.Collection.extend({
    model: FavoriteModel,
    url: '/deviceShare/favorites',
    parse: function (response) {
      MyDevicesModule.favoriteDevicesCount = response.data &&
        response.data.count;
      return response.data && response.data.devices || [];
    },
    comparator: function (model) {
      return model.get('deviceInfo') && model.get('deviceInfo').stationName
        .toLowerCase();
    }
  });

  this.UpgradedDevicesCollection = Backbone.Collection.extend({
    model: Backbone.Model,
    url: '/deviceShare/deviceUpgrades',
    parse: function (response) {
      return response.data || [];
    }
  });

  this.favoriteDevicesCollection = new this.FavoritesCollection();

  this.devicesCollection = new Backbone.Collection(wl.__deviceSidebar);

  this.ownedDevicesCollection = new this.OwnedDevicesCollection();

  this.sharedDevicesCollection = new this.SharedDevicesCollection();

  var upgradedDevicesCollection = new this.UpgradedDevicesCollection();

  //array of collection fetch() promises
  var fetchPromisesArr = _.invoke([this.ownedDevicesCollection, this.favoriteDevicesCollection,
  this.sharedDevicesCollection
  ], 'fetch');

  //for mobilize page
  this.ViewsCollection = Backbone.Collection.extend({
    model: Backbone.Model,
    comparator: function (model) {
      return model.get('viewName').toLowerCase();
    }
  });

  this.ownViewsCollection = new this.ViewsCollection(wl.data.ownedViews);

  this.sharedViewsCollection = new this.ViewsCollection(wl.data.sharedViews);

  //sidebar devices list item
  this.ListItemView = Marionette.ItemView.extend({
    tagName: 'li',
    template: wl.shared.tpl['sidebar-devices-list-item'],
    className: 'device-item toggle-box',
    ui: {
      content: ".toggle-content",
      title: ".toggle-title",
      link: ".toggle-title a",
      alarmLink: '.toggle-title a[data-link]'
    },
    events: {
      "click @ui.title i": "toggle",
      "click @ui.alarmLink": "onClickAlarmLink"
    },
    initialize: function () {
      var model = this.model;
      var alarmsLink = Boolean(window.location.href.indexOf("alarms") >
        0);
      model.set('currentGateway', false);
      model.set('alarmsLink', alarmsLink);
      _.each(model.get('links'), function (value) {
        if (window.location.href.indexOf(value) > 0) {
          model.set('currentGateway', true);
        }
      });
      _.each(model.get('nodes'), function (node) {
        node.currentNode = false;
        _.each(node.links, function (value) {
          node.alarmsLink = alarmsLink;
          if (window.location.href.indexOf(value) > 0) {
            node.currentNode = true;
          }
        });
      });
      if (window.location.href.indexOf('uploads') > 0) {
        if (window.location.href.indexOf(this.model.get('systemId')) >
          0) {
          model.set('currentGateway', true);
        }
      }
    },
    onRender: function () {
      if (this.ui.content.children('.active').length == 0) {
        this.ui.content.hide();
      }
      this.expandDevices();
    },
    onShow: function () {
      if (this.model.get('currentGateway')) {
        this.el.scrollIntoView();
      }
    },
    onClickAlarmLink: function (e) {
      e.preventDefault();
      var id = $(e.currentTarget).attr('data-id');
      $.get('/manageDevices/device/' + id, function (res) {
        if (res.data && res.data.sTypeAbbrev === 'SA') {
          window.location.href = '/manageDevices/enviroMonitorConfiguration/' + id;
        } else {
          window.location.href = '/manageDevices/alarms/' + id;
        }
      })
    },
    toggle: function (e) {
      var $toggleTitle = $(e.target).parent();
      $toggleTitle.next(".toggle-content").slideToggle();
      $toggleTitle.toggleClass('active');
      var id = $toggleTitle.find('a').attr('data-id');
      var array = $.parseJSON(sessionStorage.getItem(
        "sidebarExpandedDevices")) || [];
      if ($toggleTitle.hasClass('active')) {
        if (array.indexOf(id) < 0) {
          array.push(id);
        }
      } else {
        array = _.without(array, id);
      }
      sessionStorage.setItem("sidebarExpandedDevices", JSON.stringify(
        array));
    },
    expandDevices: function () {
      var array = $.parseJSON(sessionStorage.getItem(
        "sidebarExpandedDevices")) || [];
      if (_.includes(array, this.ui.link.attr('data-id'))) {
        this.ui.content.show();
        this.ui.title.addClass('active');
      }
    }
  });

  //sidebar devices list
  this.ListItemCompositeView = Marionette.CompositeView.extend({
    template: wl.shared.tpl['sidebar-devices-list'],
    childView: this.ListItemView,
    childViewContainer: '.devices-ul',
    model: new Backbone.Model,
    ui: {
      search: '#search',
      clearInput: '.clear-input'
    },
    events: {
      'keyup @ui.search': 'onInputKeyUp',
      'keydown @ui.search': 'onInputKeyDown',
      'click @ui.clearInput': 'onClickClearInput'
    },
    initialize: function () {
      this.collection = MyDevicesModule.devicesCollection;
      this.originalCollection = this.collection.clone();
      this.model.set('numberOfDevices', this.collection.length);
    },
    onRender: function () {
      this.$childViewContainer && this.$childViewContainer.perfectScrollbar();
    },
    onInputKeyUp: function (e) {
      e.preventDefault();
      var value = e.target.value.toLowerCase();
      _.debounce(function () {
        var filtered = this.originalCollection.filter(function (
          device) {
          return device.get('name').toLowerCase().indexOf(
            value) !== -1 ||
            device.get('didStr').toLowerCase().indexOf(value) !==
            -1;
        });
        this.collection.reset(filtered);
        this.$childViewContainer && this.$childViewContainer.perfectScrollbar(
          'update');
      }.bind(this), 200)();
    },
    onInputKeyDown: function (e) {
      var keyCode = e.keyCode || e.which;
      if (keyCode === 13) {
        return false;
      }
    },
    onClickClearInput: function () {
      this.ui.search.val('').focus().trigger('keyup');
    }
  });

  //devices dropdown list item
  var DevicesDropdownListItemView = Marionette.ItemView.extend({
    model: Backbone.Model,
    tagName: 'li',
    ui: {
      systemNav: '.systemNav',
      removeFavorite: '.remove-favorite',
      removeShared: '.remove-shared'
    },
    events: {
      'click @ui.systemNav': 'changeDevice',
      'click @ui.removeFavorite': 'onClickRemoveFavorite',
      'click @ui.removeShared': 'onClickRemoveShared'
    },
    initialize: function () {
      this.model.set('loggedInUserId', wl.data.userAccountSetting.userId);
      this.model.set('subscriptionType', wl.__bootstrap_user_subscriptionType);
    },
    getTemplate: function () {
      if (this.options.type === "mobilizeView") {
        return this.template;
      }
      switch (this.model.get('type')) {
        case 'owned':
          return wl.shared.tpl['devices-dropdown-owned-list-item'];
        case 'shared':
          return wl.shared.tpl['devices-dropdown-shared-list-item'];
        case 'favorite':
          return wl.shared.tpl['devices-dropdown-favorite-list-item'];
        case 'results':
          this.el.className = 'results-item';
          return wl.shared.tpl['devices-dropdown-results-info-item'];
        case 'search':
          return wl.shared.tpl['search-result-item'];
        default:
          return wl.shared.tpl['devices-dropdown-owned-list-item'];
      }
    },
    onClickRemoveShared: function (e) {
      e.stopPropagation();
      this.triggerMethod('removeSharedConfirm:show', this.model.attributes);
    },
    onClickRemoveFavorite: function (e) {
      e.stopPropagation();
      this.triggerMethod('removeFavoriteConfirm:show', this.model.attributes);
    },
    changeDevice: function (e) {
      this.$el.closest('.devices-container').dropdown('toggle');
      var currentPath = window.location.pathname;
      // strip out the id and replace it
      var newPath = currentPath.substring(0, currentPath.lastIndexOf(
        '/') + 1);
      if (newPath === '/') { //for map page
        newPath = currentPath + '/';
      }
      newPath += $(e.target).closest('.systemNav').data('identifier');
      window.location.href = newPath;
    }
  });

  //devices dropdown remove confirm view
  var RemoveDeviceConfirmView = Marionette.ItemView.extend({
    className: 'confirm',
    template: wl.shared.tpl['remove-device-confirm'],
    ui: {
      'cancelBtn': '.cancel-button',
      'confirmBtn': '.confirm-button'
    },
    events: {
      'click @ui.cancelBtn': 'onClickCancel',
      'click @ui.confirmBtn': 'onClickConfirm'
    },
    initialize: function () {
      this.regionName = this.model.get('type') === 'shared' ?
        'shared' : 'favorites';
    },
    onClickCancel: function (e) {
      e.stopPropagation();
      this.triggerMethod('remove:cancel', this.regionName);
    },
    onClickConfirm: function (e) {
      e.stopPropagation();
      this.triggerMethod('remove:process', this.model.attributes,
        this.regionName);
    }
  })

  //devices dropdown layout view
  this.DevicesDropdownLayoutView = Marionette.LayoutView.extend({
    template: wl.shared.tpl['devices-dropdown-layout'],
    className: 'devices-dropdown-container',
    model: new Backbone.Model({
      'isGuest': wl.__bootstrap_is_guest
    }),
    regions: {
      owned: '#owned-stations',
      favorites: '#favorite-stations',
      shared: '#shared-stations',
      search: '#search-stations'
    },
    ui: {
      'ownedTab': '.owned-tab',
      'favoritesTab': '.favorites-tab',
      'sharedTab': '.shared-tab',
      'searchTab': '.search-tab',
      'tab': '.type-tab'
    },
    events: {
      'click @ui.ownedTab': 'showOwnedStations',
      'click @ui.favoritesTab': 'showFavoriteStations',
      'click @ui.sharedTab': 'showSharedStations',
      'click @ui.searchTab': 'showSearchStations',
      'click @ui.tab': 'onClickTab'
    },
    childEvents: {
      'removeSharedConfirm:show': function (obj, data) {
        this.showRemoveConfirm("shared", data);
      },
      'removeFavoriteConfirm:show': function (obj, data) {
        this.showRemoveConfirm("favorites", data);
      },
      'remove:cancel': function (obj, regionName) {
        this.showChildView(regionName, regionName === "shared" ? new SharedDevicesDropdownListView() :
          new FavoriteDevicesDropdownListView());
      },
      'remove:process': function (obj, data, regionName) {
        this.processRemoveStation(obj, data, regionName);
      }
    },
    onRender: function () { },
    onBeforeShow: function () {
      if (!wl.__bootstrap_is_guest) {

        this.showLoadingView();
        $.when.apply($, fetchPromisesArr).done(function () {
          this.showOwnedCollectionView();
          this.showFavoriteCollectionView();
          this.showSharedCollectionView();
          this.showSearchView();
          this.listenTo(MyDevicesModule.favoriteDevicesCollection,
            'reset add remove', this.showFavoriteCollectionView);
        }.bind(this));
      }
    },
    showLoadingView: function () {
      this.showChildView('owned', new LoadingView());
      this.showChildView('favorites', new LoadingView());
      this.showChildView('shared', new LoadingView());
      this.showChildView('search', new LoadingView());
      this.showOwnedStations();
    },
    showOwnedStations: function () {
      this.hideAllViews();
      this.owned.$el.show();
      this.ui.ownedTab.addClass('active')
    },
    showFavoriteStations: function () {
      this.hideAllViews();
      this.favorites.$el.show();
      this.ui.favoritesTab.addClass('active')
    },
    showSharedStations: function () {
      this.hideAllViews();
      this.shared.$el.show();
      this.ui.sharedTab.addClass('active');
    },
    showSearchStations: function () {
      this.hideAllViews();
      this.search.$el.show();
      this.search.$el.find('input').focus();
      this.ui.searchTab.addClass('active');
    },
    hideAllViews: function () {
      this.owned.$el.hide();
      this.favorites.$el.hide();
      this.shared.$el.hide();
      this.search.$el.hide();
      this.ui.tab.removeClass('active')
    },
    onClickTab: function (e) {
      e.stopPropagation();
      MyDevicesModule.trigger('click:tab');
    },
    showSearchView: function () {
      this.showChildView('search', new SearchStationsView());
    },
    showFavoriteCollectionView: function () {
      var collection = MyDevicesModule.favoriteDevicesCollection;
      var count = MyDevicesModule.favoriteDevicesCount;
      if (collection.length > 0) {
        if (count > collection.length) {
          collection.add(new TotalResultsModel({
            total: count,
            max: collection.length
          }), {
            silent: true
          });
        }
        this.showChildView('favorites', new FavoriteDevicesDropdownListView());
      } else {
        this.showChildView('favorites', new DevicesEmptyListView({
          viewType: 'saved'
        }));
      }
    },
    showSharedCollectionView: function () {
      var collection = MyDevicesModule.sharedDevicesCollection;
      var count = MyDevicesModule.sharedDevicesCount;
      if (collection.length > 0) {
        if (count > collection.length) {
          collection.add(new TotalResultsModel({
            total: count,
            max: collection.length
          }, {
            silent: true
          }));
        }
        this.showChildView('shared', new SharedDevicesDropdownListView());
      } else {
        this.showChildView('shared', new DevicesEmptyListView({
          viewType: 'shared'
        }));
      }
    },
    showOwnedCollectionView: function () {
      var collection = MyDevicesModule.ownedDevicesCollection;
      var count = MyDevicesModule.ownedDevicesCount;
      if (collection.length > 0) {
        if (count > collection.length) {
          collection.add(new TotalResultsModel({
            total: count,
            max: collection.length
          }));
        }
        this.showChildView('owned', new OwnDevicesDropdownListView());
      } else {
        this.showChildView('owned', new DevicesEmptyListView({
          viewType: 'owned'
        }));
      }
    },
    showRemoveConfirm: function (sRegion, data) {
      this.showChildView(sRegion, new RemoveDeviceConfirmView({
        model: new Backbone.Model(data)
      }))
    },
    processRemoveStation: function (obj, data, regionName) {
      if (obj.model.get('type') === 'shared') {
        wl.app.shareCalls.unshareDevice(data.deviceShareId).then(
          function (response) {
            wl.app.shareCalls.getDevicesSharedWithMe().then(
              function (sharesData) {
                MyDevicesModule.sharedDevicesCount = sharesData.count;
                MyDevicesModule.sharedDevicesCollection.reset(
                  sharesData.devices);
                this.showSharedCollectionView();
              }.bind(this));
            if (wl.data.systemId === obj.model.get('systemId')) {
              wl.app.shareCalls.getDeviceSubscriptionTier(obj.model
                .get('systemId')).then(function (data) {
                  MyDevicesModule.StationTierView.prototype.model
                    .set('deviceSubscriptionTier', data);
                }.bind(this));
            }
          }.bind(this));

      } else {
        wl.app.shareCalls.unmarkFavorite(data.systemId).then(function (
          response) {
          wl.app.shareCalls.getFavorites().then(function (
            favoritesData) {
            MyDevicesModule.favoriteDevicesCount =
              favoritesData.count;
            MyDevicesModule.favoriteDevicesCollection.reset(
              favoritesData.devices);
          })
        });
      }
    }
  })

  //devices dropdown search view
  var SearchStationsView = Marionette.CompositeView.extend({
    className: 'devices-container search',
    template: wl.shared.tpl['search-stations'],
    childView: DevicesDropdownListItemView,
    childViewContainer: '.dropdown-devices-ul.search',
    ui: {
      'input': 'input[type="search"]',
      'searchIcon': '.icon-search',
      'emptyDesc': '.search-empty-desc',
      'noResults': '.search-no-results',
      'results': '.dropdown-devices-ul',
      'clearInput': '.clear-input'
    },
    events: {
      'keyup @ui.input': 'onInputKeyUp',
      'keydown @ui.input': 'onInputKeyDown',
      'click @ui.clearInput': 'onClickClear',
      'click @ui.searchIcon': 'onClickSearchIcon'
    },
    initialize: function () {
      this.collection = new SearchResultsCollection;
      this.xhr = null;
      this.$el.on('click', function (e) {
        e.stopPropagation();
      })
    },
    onShow: function () {
      this.ui.results.perfectScrollbar();
    },
    onInputKeyUp: function (e) {
      var val = $(e.target).val();
      if (val.length >= 3) {
        this.processSearch(val);
      }
      if (val.length === 0) {
        this.onClickClear();
      }
    },
    onInputKeyDown: function (e) {
      var keyCode = e.keyCode || e.which;
      if (keyCode === 13) {
        return false;
      }
    },
    onClickSearchIcon: function () {
      var val = this.ui.input.val();
      if (val.length >= 3) {
        this.processSearch(val);
      }
      this.ui.input.focus();
    },
    onClickClear: function () {
      this.ui.input.val('').focus();
      this.collection.reset([]);
      this.ui.emptyDesc.show();
      this.ui.results.hide();
      this.ui.noResults.hide();
    },
    processSearch: function (searchTerm) {
      if (searchTerm.trim().length < 3) return;

      if (this.xhr != null) {
        this.xhr.abort();
      }
      this.xhr = $.get('/deviceShare/searchDevices/' + searchTerm.trim()
        .replace(/\//g, ''),
        function (response) {
          if (response.data) {
            this.collection.reset(response.data.devices);
            if (response.data.count > response.data.devices.length) {
              this.collection.add(new TotalResultsModel({
                max: response.data.devices.length,
                total: response.data.count,
                searchTab: true
              }));
            }
            if (response.data.devices.length === 0) {
              this.ui.noResults.show();
              this.ui.results.hide();
            } else {
              this.ui.noResults.hide();
              this.ui.results.show();
            }
            this.ui.emptyDesc.hide();
            this.ui.results.perfectScrollbar('update');
          }
        }.bind(this));
    }
  });

  var LoadingView = Marionette.ItemView.extend({
    template: wl.shared.tpl['loading-stations'],
    className: 'devices-container'
  });

  //devices dropdown own devices
  var OwnDevicesDropdownListView = Marionette.CompositeView.extend({
    template: _.template('<ul class="dropdown-devices-ul owned">'),
    className: 'devices-container',
    childView: DevicesDropdownListItemView,
    childViewContainer: '.dropdown-devices-ul.owned',
    collection: this.ownedDevicesCollection,
    initialize: function () {
      $('.devices-dropdown, .views-dropdown').on('shown.bs.dropdown',
        this.updateScroll.bind(this));
      MyDevicesModule.on('click:tab', this.updateScroll.bind(this));
      this.$el.on('click', function (e) {
        e.stopPropagation();
      })
    },
    onShow: function () {
      if (this.$childViewContainer) {
        this.$childViewContainer.perfectScrollbar();
        this.setPadding();
      }
    },
    updateScroll: function () {
      if (this.$childViewContainer) {
        this.$childViewContainer.perfectScrollbar('update');
        this.setPadding();
      }
    },
    setPadding: function () {
      if (this.$childViewContainer.hasClass('ps-active-y')) {
        this.$el.css('padding-right', '10px');
      }
    }
  });

  //devices dropdown favorite devices
  var FavoriteDevicesDropdownListView = OwnDevicesDropdownListView.extend({
    template: _.template('<ul class="dropdown-devices-ul favorite">'),
    childViewContainer: '.dropdown-devices-ul.favorite',
    collection: this.favoriteDevicesCollection
  });

  //devices dropdown empty list
  var DevicesEmptyListView = Marionette.ItemView.extend({
    className: 'devices-container',
    template: wl.shared.tpl['devices-dropdown-empty-list'],
    model: new Backbone.Model,
    ui: {
      'startAddDevice': '#start-add-device'
    },
    events: {
      'click @ui.startAddDevice': 'startAddDevice'
    },
    initialize: function (options) {
      this.model.set('viewType', options.viewType);
    },
    onRender: function () {
      this.$el.find('p').on('click', function (e) {
        e.stopPropagation();
      });
    },
    startAddDevice: function () {
      Navbar._startAddDevice();
    }
  });

  //devices dropdown shared devices
  var SharedDevicesDropdownListView = OwnDevicesDropdownListView.extend({
    template: _.template('<ul class="dropdown-devices-ul shared">'),
    childViewContainer: '.dropdown-devices-ul.shared',
    collection: this.sharedDevicesCollection
  });

  var ViewsDropDownListitemView = DevicesDropdownListItemView.extend({
    template: _.template(
      '<a href="javascript:void(0);" data-identifier="<%= viewId %>" class="systemNav"><span class="name"><%= viewName %></span></a>'
    )
  });

  /*
   * icons bar above devices dropdown
   */
  this.FavoriteAndShareView = Marionette.ItemView.extend({
    template: wl.shared.tpl['favorite-and-share-icons'],
    model: new Backbone.Model({
      favorite: false,
      systemId: 0,
      isPublic: wl.__isPublicStation,
      isReferenceStation: wl.__isDavisDefaultStation,
      isMapPage: location.href.indexOf('map') >= 0
    }),
    ui: {
      'iconMarkFavorite': '.icon-mark-favorite',
      'iconUnmarkFavorite': '.icon-unmark-favorite',
      'iconShare': '.icon-share',
      'click_remove_save': '#unmark-favorite',
      'click_add_save': '#mark-favorite',
      'share_manage_shares': '#share-upload'
    },
    events: {
      'click @ui.iconMarkFavorite, @ui.click_add_save': 'onClickMarkFavorite',
      'click @ui.iconUnmarkFavorite, @ui.click_remove_save': 'onClickUnmarkFavorite',
      'click @ui.share_manage_shares': 'openShareModal',
      'click @ui.optionSave': 'onClickSaveOption'
    },
    initialize: function () {
      this.model.set('systemId', wl.data.systemId);
      this.model.set('permission', 'shared');
      this.model.bind('change', this.render);
      $.when.apply($, fetchPromisesArr).done(function () {
        this.model.set('permission', this.getDevicePermissionBySystemId());
        this.listenTo(MyDevicesModule.favoriteDevicesCollection,
          'remove', this.onModelRemoved);
        this.listenTo(MyDevicesModule.favoriteDevicesCollection,
          'reset', this.onCollectionUpdate);
        var currentModel = MyDevicesModule.favoriteDevicesCollection
          .findWhere({
            systemId: wl.data.systemId
          });
        if (currentModel) {
          this.model.set('currentModel', currentModel);
          this.model.set('favorite', true);
        }
      }.bind(this));
      this.setTooltipTitles();
    },
    onCollectionUpdate: function () {
      var favorite = wl.app.MyDevicesList.favoriteDevicesCollection.findWhere({
        systemId: wl.data.systemId
      });
      this.model.set('favorite', Boolean(favorite));
    },
    getDevicePermissionBySystemId: function (systemId) {
      var permission = "shared";
      if (!wl.__bootstrap_is_guest && (wl.__bootstrap_user_info.iUserId ===
        wl.__bootstrap_system_info.userId)) {
        permission = "owner";
      }
      return permission;
    },
    openShareModal: function () {
      // Stop module first if already started
      if (wl.app.oShareOptions) {
        wl.app.oShareOptions.stop();
      }

      /* start share modal with options:
       * permission (owned/shared)
       * userSubscriptionTypeId
       * deviceSubscriptionTier
       */
      wl.app.oShareOptions.start({
        permission: this.getDevicePermissionBySystemId(),
        userSubscriptionTypeId: wl.__bootstrap_user_subscriptionTypeId,
        deviceSubscriptionTier: wl.__bootstrap_device_subscription_tier
      });
    },
    setTooltipTitles: function () {
      var self = this;
      var promises = [];
      var tooltipTranslationKeys = ['click_remove_save',
        'click_add_save', 'share_manage_shares'
      ];
      _.each(tooltipTranslationKeys, function (key) {
        var prom = document.l10n.formatValue(key);
        promises.push(prom);
      });
      Promise.all(promises).then(function (values) {
        _.forEach(values, function (value, i) {
          if (self.ui[tooltipTranslationKeys[i]]) {
            self.ui[tooltipTranslationKeys[i]].attr(
              'data-original-title',
              '<div class="">' +
              values[i] + '</div>');
            self.ui[tooltipTranslationKeys[i]].tooltip();
            $('.tooltip:visible').hide();
          }
        });
      });
    },
    onModelRemoved: function (removedModel) {
      if (removedModel.get('systemId') === this.model.get('systemId')) {
        this.model.set('favorite', false);
      }
    },
    onClickMarkFavorite: function () {
      wl.app.shareCalls.markFavorite(this.model.get('systemId')).then(
        function (response) {
          wl.app.shareCalls.getFavorites().then(function (data) {
            MyDevicesModule.favoriteDevicesCount = data.count;
            MyDevicesModule.favoriteDevicesCollection.reset(
              data.devices);
            this.setTooltipTitles();
          }.bind(this));
          this.model.set('favorite', true);
        }.bind(this));
    },
    onClickUnmarkFavorite: function () {
      wl.app.shareCalls.unmarkFavorite(this.model.get('systemId')).then(
        function (response) {
          wl.app.shareCalls.getFavorites().then(function (data) {
            MyDevicesModule.favoriteDevicesCount = data.count;
            MyDevicesModule.favoriteDevicesCollection.reset(
              data.devices);
            this.setTooltipTitles();
          }.bind(this));
          this.model.set('favorite', false);
        }.bind(this));
    },
    onDestroy: function () {
      this.model.unbind('change');
      this.stopListening(MyDevicesModule.favoriteDevicesCollection);
    }
  });

  var UpgradedDeviceListItemView = Marionette.ItemView.extend({
    className: 'upgraded-item',
    template: wl.shared.tpl['upgraded-device-list-item'],
    events: {
      'click button': 'processDowngrade'
    },
    templateHelpers: function () {
      return {
        isEMVC: wl.__isEMVC,
        permission: this.options.permission,
        currentDevice: Boolean(this.model.get('systemId') === wl.data
          .systemId)
      }
    },
    processDowngrade: function () {
      //when downgrading current device call parent method to rerender the views
      if (this.model.get('systemId') === wl.data.systemId) {
        this._parent.processDowngrade();
      } else {
        wl.app.shareCalls.downgradeDevice(this.model.get('systemId'))
          .then(function (response) {
            this._parent.getDevicesUpgradedCount();
            this.model.collection.remove(this.model);
          }.bind(this))
      }
    }
  })

  var ComparePlansModalView = wl.davis.views.ComparePlansView.extend({
    template: wl.shared.tpl['selectTier']
  });

  /*
   * device tier dropdown
   */
  var DeviceTierManagerView = Marionette.CompositeView.extend({
    childViewContainer: '.upgraded-devices',
    childView: UpgradedDeviceListItemView,
    collection: false,
    model: new Backbone.Model(),
    getTemplate: function () {
      return this.options.userSubscriptionType === 1 ? wl.shared.tpl[
        'upgrade-tier-description'] : wl.shared.tpl[
      'device-tier-manager']
    },
    ui: {
      'downgradeBtn': '.downgrade-btn',
      'upgradeBtn': '.upgrade-btn',
      'contactUs': '#contact-us',
      'devicesList': '.upgraded-devices',
      'findMore': '.find-more',
      'needMoreUpgrades': '.need-more-upgrades'
    },
    events: {
      'click @ui.downgradeBtn': 'processDowngrade',
      'click @ui.upgradeBtn': 'processUpgrade',
      'click @ui.contactUs': 'showContactUs',
      'click @ui.findMore': 'onClickFindMore',
      'click @ui.needMoreUpgrades': 'showSupportToUpgrade',
      'focus button, focus a': 'onFocus'
    },
    initialize: function () {
      this.model.set('upgraded', false);
      this.model.set('devicesUpgradedCount', 0);
      this.model.set('deviceUpgradesAllowedCount', 0);
      this.model.set('userSubscriptionType', wl.__bootstrap_user_subscriptionTypeId);
      this.model.set('deviceSubscriptionTier', wl.__bootstrap_device_subscription_tier);
      this.model.set('isEMVC', wl.__isEMVC);
      this.model.set('isPublic', wl.__isPublicStation);
      this.model.set('isShared', wl.__isShared);
      this.model.set('permission', this.getDevicePermissionBySystemId());
      this.childViewOptions = {
        permission: this.model.get('permission')
      };
      this.$el.on('click', function (e) {
        e.stopPropagation();
      });
      this.collection = new Backbone.Collection();
      this.collection.comparator = function (model) {
        return model.get('deviceInfo') && model.get('deviceInfo').stationName
          .toLowerCase();
      };
      if (this.options.userSubscriptionType !== 1) {
        upgradedDevicesCollection.fetch().then(function (response) {
          this.collection.reset(response.data);
          setTimeout(function () {
            $('.station-tier .option.dropdown').on(
              'shown.bs.dropdown', this.updateScroll.bind(
                this));
          }.bind(this));
        }.bind(this));
        this.listenTo(this.model, 'change', this.render);
        wl.app.MyDevicesList.once('favorites:update', this.updateFavorites
          .bind(this));
        this.getDevicesUpgradedCount();
        this.getDeviceUpgradesAllowedCount();
        this.checkDeviceUpgrade();
      }
    },
    onRenderCollection: function () {
      if (!this.ui.devicesList.is(':empty')) {
        this.ui.devicesList.perfectScrollbar();
      }
    },
    onFocus: function (e) {
      e.stopPropagation();
    },
    onDestroy: function () {
      this.$el.off('click');
      this.stopListening(this.model);
    },
    updateScroll: function () {
      if (this.ui.devicesList) {
        this.ui.devicesList.perfectScrollbar('update');
      }
    },
    checkDeviceUpgrade: function () {
      wl.app.shareCalls.getDeviceUpgrades().then(function (response) {
        if (_.find(response, {
          systemId: wl.data.systemId
        })) {
          this.model.set('upgraded', true);
        }
      }.bind(this));
    },
    getDevicePermissionBySystemId: function () {
      var permission = "shared";
      if (!wl.__bootstrap_is_guest && (wl.__bootstrap_user_info.iUserId ===
        wl.__bootstrap_system_info.userId)) {
        permission = "owner";
      }
      return permission;
    },
    processDowngrade: function () {
      var self = this;
      wl.app.shareCalls.downgradeDevice(wl.data.systemId).then(
        function (response) {
          wl.app.shareCalls.getDeviceSubscriptionTier(wl.data.systemId)
            .then(function (data) {
              wl.__bootstrap_device_subscription_tier = data;
              self._parentLayoutView().model.set(
                'deviceSubscriptionTier', data);
            })
        });
    },
    processUpgrade: function () {
      var self = this;
      if (this.model.get('devicesUpgradedCount') < this.model.get(
        'deviceUpgradesAllowedCount')) {
        wl.app.shareCalls.upgradeDevice(wl.data.systemId).then(
          function (response) {
            wl.app.shareCalls.getDeviceSubscriptionTier(wl.data.systemId)
              .then(function (data) {
                wl.__bootstrap_device_subscription_tier = data;
                self._parentLayoutView().model.set(
                  'deviceSubscriptionTier', data);
                self.updateFavorites();
              })
          });
      } else { //no upgrades available
        var userSubscriptionType = this.model.get(
          'userSubscriptionType');
        var subscriptionName = userSubscriptionType == 2 ? 'Pro' :
          'ProPlus';
        window.location.href = '/accountSubscription#makePayment/' +
          wl.data.systemId +
          '/1/false/' + subscriptionName;
      }
    },
    updateFavorites: function () {
      if (this.model.get('permission') === 'shared' && this.model.get(
        'isPublic')) {
        wl.app.shareCalls.getFavorites().then(function (data) {
          MyDevicesModule.favoriteDevicesCollection.reset(data.devices);
        }.bind(this));
      }
    },
    getDevicesUpgradedCount: function () {
      wl.app.shareCalls.getDevicesUpgradedCount(wl.data.systemId).then(
        function (response) {
          this.model.set('devicesUpgradedCount', response.data);
        }.bind(this))
    },
    getDeviceUpgradesAllowedCount: function () {
      wl.app.shareCalls.getDeviceUpgradesAllowedCount().then(function (
        response) {
        this.model.set('deviceUpgradesAllowedCount', response.data);
      }.bind(this))
    },
    showSupportToUpgrade: function () {

      if (this.model.get('userSubscriptionType') === 2) {
        this.onClickFindMore();
      } else if (this.model.get('userSubscriptionType') === 3) {
        window.location.href =
          '/accountSubscription#makePayment/' + wl.data.systemId +
          '/0/false/ProPlus';
      }
      // var oModalBodyView = new wl.app.oShareOptions.ContactSupportToUpgrade();
      // var oModalFooterView = new Marionette.ItemView({
      //   template: false
      // });
      // MyDevicesApp.Modal.showStandardModal('', oModalBodyView,
      //   oModalFooterView, 'share-modal');
      //hide dropdown
      $('.dropdown.open .tier-manager').dropdown('toggle');
    },
    showContactUs: function () {
      var oModalBodyView = new wl.app.oShareOptions.InfoModalView();
      var oModalFooterView = new Marionette.ItemView({
        template: false
      });
      MyDevicesApp.Modal.showStandardModal('', oModalBodyView,
        oModalFooterView, 'share-modal');
      //hide dropdown
      $('.dropdown.open .tier-manager').dropdown('toggle');
    },
    onClickFindMore: function () {
      var oModalBodyView = new ComparePlansModalView();
      var oModalFooterView = new Marionette.ItemView({
        template: false
      });
      MyDevicesApp.Modal.showStandardModal('', oModalBodyView,
        oModalFooterView, 'select-tier-modal');
      //hide dropdown
      $('.dropdown.open .tier-manager').dropdown('toggle');
    }
  })

  /*
   * Layout for device tier manager
   */
  this.StationTierView = Marionette.LayoutView.extend({
    regions: {
      tierManager: '#device-tier-manager-dropdown'
    },
    template: wl.shared.tpl['station-tier'],
    ui: {
      'dropdown': '#device-tier-manager-dropdown',
      'tooltip': '.option.dropdown',
      'dropdownToggle': '.dropdown-toggle'
    },
    events: {
      'click @ui.dropdownToggle': 'onClickDropdown'
    },
    model: new Backbone.Model({
      userSubscriptionType: wl.__bootstrap_user_subscriptionTypeId ||
        1,
      deviceSubscriptionTier: wl.__bootstrap_device_subscription_tier ||
        1,
      deviceSubscriptionTierName: '',
      isOwner: wl.__bootstrap_is_owner,
      isReferenceStation: wl.__isDavisDefaultStation,
      isEMVC: wl.__isEMVC,
      isMapPage: location.href.indexOf('map') >= 0
    }),
    initialize: function () {
      this.model.set('deviceSubscriptionTierName', this.getTierName(
        this.model.get('deviceSubscriptionTier')));
      this.model.bind('change:deviceSubscriptionTier', this.onChangeDeviceTier,
        this);
      this.model.set('deviceUpgradeId', this.getDeviceUpgradeId());

    },
    getTierName: function (tierId) {
      switch (tierId) {
        case 1:
          return 'Basic';
        case 2:
          return 'Pro';
        case 3:
          return 'Pro+';
      }
    },
    getDeviceUpgradeId: function () {
      var currentSharedDevice = wl.app.MyDevicesList.sharedDevicesCollection
        .findWhere({
          "systemId": wl.data.systemId
        });
      if (currentSharedDevice) {
        return currentSharedDevice.get('deviceUpgradeId');
      }
      return null;
    },
    setTooltipTitle: function () {
      if ((this.model.get('isEMVC') && this.model.get(
        'userSubscriptionType') === 1) ||
        (!this.model.get('isOwner') && this.model.get(
          'deviceUpgradeId'))) return;
      var key = this.model.get('deviceSubscriptionTier') === 1 ?
        'upgrade_station' : 'manage_upgrades';
      document.l10n.formatValue(key).then(function (value) {
        this.ui.tooltip.attr('data-original-title', value);
        this.ui.tooltip.tooltip({
          trigger: 'hover'
        });
        $('.tooltip:visible').hide();
      }.bind(this));
    },
    onChangeDeviceTier: function () {
      this.model.set('deviceSubscriptionTierName', this.getTierName(
        this.model.get('deviceSubscriptionTier')));
      this.render();
    },
    onClickDropdown: function () {
      $('.tooltip:visible').hide();
    },
    onRender: function () {
      $.when.apply($, fetchPromisesArr).done(function () {
        this.showChildView('tierManager', new DeviceTierManagerView({
          userSubscriptionType: this.model.get(
            'userSubscriptionType')
        }));
        this.setTooltipTitle();
        this.ui.dropdown.on('mouseover', function (e) {
          e.stopPropagation();
        })
      }.bind(this));
    },
    onDestroy: function () {
      this.model.unbind('change:deviceSubscriptionTier');
    },
    onShow: function () {
      this.ui.dropdown.on('mouseover', function (e) {
        e.stopPropagation();
      })
    }
  });

  //mobilize owned views
  this.OwnViewsDropdownListView = OwnDevicesDropdownListView.extend({
    template: _.template(
      '<div class="ul-header" data-l10n-id="my_views"></div><ul class="dropdown-devices-ul">'
    ),
    collection: this.ownViewsCollection,
    childView: ViewsDropDownListitemView,
    childViewContainer: '.dropdown-devices-ul',
    childViewOptions: {
      type: 'mobilizeView'
    },
    onRender: function () {
      if (this.$childViewContainer) {
        this.$childViewContainer.perfectScrollbar();
      }
    }
  });

  this.SharedViewsDropdownListView = this.OwnViewsDropdownListView.extend({
    template: _.template(
      '<div class="ul-header" data-l10n-id="Shared"></div><ul class="dropdown-devices-ul">'
    ),
    collection: this.sharedViewsCollection
  });

  this.getDeviceLinks = function (deviceId) {
    var links = [];
    _.each(wl.__deviceSidebar, function (device) {
      if (deviceId == device.identifier) {
        links = device.links;
      }
    });
    return links;
  }

  this.getNodeLinks = function (nodeId) {
    var links = [];
    _.each(wl.__deviceSidebar, function (device) {
      _.each(device.nodes, function (node) {
        if (nodeId == node.id) {
          links = node.links;
        }
      })
    });
    return links;
  }
});
