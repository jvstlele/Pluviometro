/*
 * Davis Instruments Corporation
 * WeatherLink 2.0 Maia Summary Application
 *
 * Define Application Module
 *
 * Created by Kalin Muskov on 8/26/2015.
 *
 */

var wl = wl || {};

wl.app.module('oSummary', function (oSummary, oApp, Backbone, Marionette, $, _) {

    var gatewayType = wl.__bootstrap_system_info.gatewayTypeAbbrev;

    oSummary.on("start", function () {

        var SummaryView = Marionette.ItemView.extend({
            template: window.tpl["summary-layout-template"],
            onRender: function () {
                if (!wl.app.Dashboard.noPublicData) {
                    this.build();
                }
            },
            build: function () {
                var html = "";
                this.$el.empty();
                var isMaiaDataAvailable = Boolean(wl.data.maiaSensorData != null && wl.data.maiaSensorData.length > 0);

                if (wl.data.tilePanelData != null) {
                    for (var i in wl.data.tilePanelData) {
                        if (wl.data.tilePanelData.hasOwnProperty(i)) {
                            var nodeName = wl.data.tilePanelData[i].nodeName;
                            if (nodeName == null) continue;
                            var nodeIconLabel = wl.data.tilePanelData[i].nodeIconLabel;
                            var sensors = wl.data.tilePanelData[i].sensors;
                            if (Utils.isWWdevice(gatewayType)) {
                                if (nodeIconLabel === "wll" || nodeIconLabel === 'wlh' || nodeIconLabel === 'con') { //build wll default
                                    html += wl.app.oMapper.buildWLLDefault(wl.data.barometerData, nodeName, gatewayType);
                                } else { //build wll station
                                    var tiles = _.get(_.find(sensors, 'tiles'), 'tiles');
                                    var lsid = Number(_.keys(sensors)[0]);
                                    html += wl.app.oMapper.buildWLL(lsid, nodeName, tiles, gatewayType);
                                }
                            } else {
                                if (gatewayType !== 'SA' && !_.includes(['ws', 'es', 'nd', 'al'], nodeIconLabel)) {
                                    html += wl.app.oMapper.buildGateway(wl.data.barometerData, nodeName);
                                }
                                if (nodeIconLabel === "ws") {
                                    html += wl.app.oMapper.buildIss(wl.data.stationData, wl.data.stationHilow, wl.data.barometerData, nodeName);
                                }
                                if (nodeIconLabel === "es") {
                                    html += wl.app.oMapper.buildIssExtraSensors(wl.data.stationData, wl.data.stationHilow, nodeName);
                                }
                            }
                            
                            if (nodeIconLabel === "al" && wl.data.aqsSensorData) {
                                var tiles = _.get(_.find(sensors, 'tiles'), 'tiles');
                                var lsid = _.get(_.find(tiles, 'logicalSensorId'), 'logicalSensorId');
                                html += wl.app.oMapper.buildAirQualitySensor(wl.data.aqsSensorData, lsid, nodeName);
                            }

                        }
                    }
                    this.$el.append(html);
                    html = "";
                }

                if (isMaiaDataAvailable && !Utils.isWWdevice(gatewayType)) {
                    for (var i in wl.data.maiaSensorData) {
                        var node = wl.data.maiaSensorData[i];
                        html += "<div class='wl-table'><div class='wl-table-title'><h3 id=" + node.nodeName.replace(/[^a-zA-Z0-9_]/g, '-').toLowerCase() + ">" + node.nodeName + "</h3></div>";
                        html += "<div>";
                        for (var y in node.logicalSensor) {
                            html += wl.app.oMapper.map(node.logicalSensor[y]);
                        }
                        html += "</div></div> ";
                        this.$el.append(html);
                        html = "";
                    }
                }
            }
        });
        if (!wl.app.Dashboard.noPublicData) {
            var summaryView = new SummaryView();
            oApp.summaryRegion.show(summaryView);
        }
    });

    oApp.vent.on('before:data:refresh', function () {
        wl.app.summaryRegion.currentView.build();
    });
});