/**
 * Created by anton.milko on 4/15/16.
 */
var wl = wl || {};

var aqiSelectorView = undefined;
if (wl.davis.views.AQISchemeSelectorView) {
    aqiSelectorView = new wl.davis.views.AQISchemeSelectorView();
}

var isGuest = wl.__bootstrap_is_guest;

wl.app.module('oMap', function () {
    this.averageCalculator = averageCalculator;
    this.RightPanelView = wl.davis.views.RightPanelView;



    wl.app.addRegions({
        aqiDropDown: '.aqi-index-option',
    });


    this.NearbyStationsView = Marionette.ItemView.extend({
        template: _.template('<dl class="map-sidebar-stations"><dt data-l10n-id="nearby_stations"></dt></dl>'),
        className: 'right-panel-content'
    });

    this.StationDataPopupView = Marionette.ItemView.extend({
        template: window.tpl["station-data-popup"],
        initialize: function () {
            var bStaleData = Boolean(this.model.get('ageInSeconds') > 7200);
            this.model.set('bStaleData', bStaleData);
            var bOutdated = Boolean(this.model.get('ageInSeconds') > 691200);
            this.model.set('bOutdated', bOutdated);

            var bStaleDataAqs = Boolean(this.model.get('aqsAgeInSeconds') > 7200);
            this.model.set('bStaleDataAqs', bStaleDataAqs);
            var bOutdatedAqs = Boolean(this.model.get('aqsAgeInSeconds') > 691200);
            this.model.set('bOutdatedAqs', bOutdatedAqs);
        }
    });

    this.StationDataPopupUnmappedView = Marionette.ItemView.extend({
        template: window.tpl["station-data-popup-unmapped"],
    });

    this.StationDataPopupGuestView = Marionette.ItemView.extend({
        template: window.tpl["station-data-popup-guest"]
        /*
        ,
        ui: {
            'share': '.icon-shared',
        },
        events: {
            'click @ui.share': 'handleShareMap',
        },
        handleShareMap: function () {
            shareMap(this.model.get('deviceId'), this.model.get('lsId'));
        }
        */
    });


    this.ShareSuccessView = Marionette.LayoutView.extend({
        template: window.tpl['share-success-body'],
        initialize: function () {
            new ClipboardJS('.copy-link', {
                text: function (trigger) {
                    return this.model.get('shareURL');
                }.bind(this)
            });
        }
        ,
        ui: {
            'close': '.icon-close',
        },
        events: {
            'click @ui.close': 'close',
        },
        close: function () {
            wl.app.Modal.hideModal();
        }
    });

    function showShareSuccess(mapShare) {
        var dataModel = new Backbone.Model(mapShare);
        var mediaShareText = "WeatherLink gives you real-time weather & air quality data from the largest network of sensors in the world.";

        var oModalFooterView = new Marionette.ItemView({
            template: false
        });
        var shareSuccessView = new wl.app.oMap.ShareSuccessView({
            model: dataModel
        });
        wl.app.Modal.showStandardModal('', shareSuccessView,
            oModalFooterView, 'share-map-success');

        setShareLinks(mapShare.socialMediaShareURL, mediaShareText);
    }

    function shareWindow(url) {
        var left = (screen.width - 570) / 2;
        var top = (screen.height - 570) / 2;
        var params = "menubar=no,toolbar=no,status=no,width=570,height=570,top=" + top + ",left=" + left;
        window.open(url, "NewWindow", params);
    }

    function setShareLinks(shareUrl, text) {
        var pageUrl = encodeURIComponent(shareUrl);
        var tweet = encodeURIComponent(text);

        jQuery(".share.facebook").on("click", function () {
            url = "https://www.facebook.com/sharer.php?u=" + pageUrl;
            shareWindow(url);
        });

        jQuery(".share.twitter").on("click", function () {
            url = "https://twitter.com/intent/tweet?url=" + pageUrl + "&text=" + tweet;
            shareWindow(url);
        })

        $(".share.linkedin").on("click", function () {
            url = "https://www.linkedin.com/shareArticle?mini=true&url="
                + pageUrl + "&title=" + text;
            shareWindow(url);
        })

    }


    function loadFBSharePlugin(d, s, id) {
        var liShareBtn = $('#linked-in-share');
        var scriptElem = $('<script></script>');
        scriptElem.attr('src', "https://platform.linkedin.com/in.js");
        liShareBtn.append(scriptElem);

        var fbShareBtn = $('#fb-share');
        var fbScriptElem = $('<script></script>');
        fbScriptElem.attr('src', "https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v3.0");
        fbScriptElem.attr('id', "facebook-jssdk");
        fbShareBtn.append(fbScriptElem);
    }

    this.on("start", function (options) {

        //if it's a map app, show nearby stations the right panel
        if (options && options.rightPanel === 'nearbyStations') {
            this.rightPanelView = new this.RightPanelView;
            this.nearbyStationsView = new this.NearbyStationsView;
            wl.app.rightPanel.show(this.rightPanelView);
            this.rightPanelView.getRegion('sensors').show(this.nearbyStationsView);
            wl.app.shareCalls.getDeviceUpgradesAllowedCount();
        }

        // override global handler by rightPanel
        setWoodSmokeHandler();

        var overlayToUse = wl.mapOverlayToUse;
        toggleAqiSelectDropDown(overlayToUse !== 'TEMP');
    });

    function setWoodSmokeHandler() {
        var $checkbox = $('.map-option.wood-smoke-option input');
        $checkbox.prop('checked', wl.applyWoodSmokeFilter);
        $checkbox.off('change');
        $checkbox.on('change', function (e) {
            wl.applyWoodSmokeFilter = $checkbox.is(":checked");
            e.stopPropagation();
            generateAqsClusterManager();
        });
    }

    function toggleAqiSelectDropDown(showAqiSelect) {
        if (!aqiSelectorView) {
            return;
        }
        if (showAqiSelect) {
            if (!wl.app.aqiDropDown.hasView()) {
                wl.app.aqiDropDown.show(aqiSelectorView);
                handleAqiIndexSelect();
            }
            wl.app.aqiDropDown.$el.show()
            $('.aqi-index-option .dropdown-toggle').dropdown();
            $('.map-option.wood-smoke-option').show();
        } else {
            wl.app.aqiDropDown.$el.hide()
            $('.map-option.wood-smoke-option').hide();
        }
    }

    //private variables and functions

    var mapConstants = wl.mapConstants;
    var oMapClusterManager, oGMap;
    var nearbyStationsXhr = null;
    var overlay = 'temperature';
    var placesService;
    var aqScales = [];
    var sessionToken = new google.maps.places.AutocompleteSessionToken();

    /**
     * Returns the default parameters in a promise.  It's a promise because it can be a GeoCoding lookup, which
     * is not going to return immediately.
     *
     * @since 2015-03-11
     *
     */
    function getMapParameters() {
        var d = $.Deferred();
        d.resolve(mapConstants.oMapOptionsDefault);
        return d.promise();
    }

    /**
     * The function for calculating the cluster icon image.
     *
     * @param {Array.<google.maps.Marker>} markers The markers in the clusterer.
     * @param {number} numStyles The number of styles available.
     * @return {Object} A object properties: 'text' (string) and 'index' (number).
     * @private
     */
    function averageCalculator(markers, numStyles) {
        var debug = window.location.href.indexOf('debug') >= 0;
        var avg;
        var activeMarkers =
            markers.map(function (a) {
                return a._wlData.tb;
            })
                .filter(function (a) {
                    return a !== -1
                });
        if (activeMarkers.length === 0) {
            avg = -1;
        } else {
            avg =
                Math.round(activeMarkers
                    .reduce(function (a, b) {
                        return a + b;
                    }) / activeMarkers.length);
        }
        if (debug && overlay === 'aqs') {
            markers.forEach(function (marker) {
                var d = marker._wlData;
                console.log(" marker id = " + d.id + ", lsid="
                    + d.lsId + ",lat=" + d.lat + ",lng " + d.lng + ",tb=" + d.tb);
            });
        }

        // note that the marker cluster starts the index at 1, so we need to add 1 to the color index
        var correction = 2;
        var index = Math.min(avg + correction, numStyles);
        return {
            text: markers.length,
            index: index,
            title: markers.length + ' Station' + (markers.length === 1 ? '' : 's')
        };
    }

    /**
     * Function to initialize Google Maps
     *
     * @since - 2015-03-05
     **/
    function initializeMap() {

        var overlayToUse = wl.mapOverlayToUse;
        overlay = overlayToUse == 'TEMP' ? 'temperature' : 'aqs';

        //case when redirecting to map page with location name provided
        if (window.location.href.indexOf('/map/place_id?') >= 0) {
            var encodedURI = window.location.href.split('/place_id?').pop();
            var place_id = decodeURIComponent(encodedURI);

            history.replaceState({}, "", "/map");

            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({
                'placeId': place_id
            }, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    oGMap = new google.maps.Map(document.getElementById(mapConstants.mapDivId));
                    placesService = new google.maps.places.PlacesService(oGMap);
                    $('#address').val(results[0].formatted_address);
                    if (results[0].geometry.viewport) {
                        oGMap.fitBounds(results[0].geometry.viewport);
                    }
                    //if place id is the entry point, default is temp
                    mapAfterInit(overlay);
                }
            });
        } else {
            getMapParameters().then(function (options) {
                if (document.getElementById(mapConstants.mapDivId)) {
                    oGMap = new google.maps.Map(document.getElementById(mapConstants.mapDivId), options);
                    placesService = new google.maps.places.PlacesService(oGMap);
                    mapAfterInit(overlay).then(function () {
                        function _findMarker() {
                            _.each(oMapClusterManager.markers_, function (marker) {
                                if (marker._wlData.id === wl.data.identifier) {
                                    google.maps.event.trigger(marker, 'click');
                                    oGMap.setZoom(17);
                                    oGMap.setCenter(marker.position);
                                }
                            });
                        }
                        if (oMapClusterManager && wl.focusOnStation) {
                            _findMarker();
                        }
                    });
                }
            });
        }
        //dummyShareMap();
    }

    function dummyShareMap() {
        var mapShare = {
            city: 'San Jose',
            state: 'California',
            country: 'USA',
            shareType: 'location',
            shareURL: 'http://www.cnn.com',
            shareLocation: 'San Jose, CA, USA'
        }
        showShareSuccess(mapShare);
    }

    /**
     * function to add map events and populate the cluster manager with data points
     * pass parameter aqs to true if the map needs to be initialized with AQS overlay
     */
    function mapAfterInit(overlayToInit) {
        var d = $.Deferred();
        // load the cluster manager only after Google Maps is done loading.
        google.maps.event.addListenerOnce(oGMap, 'tilesloaded', function () {
            setupTempScale();
            var schemeId = wl.selectedScheme.iaqSchemeId;
            getAqScalesForScheme(schemeId).then(function () {
                selectOverlay(overlayToInit).then(function () {
                    google.maps.event.addListener(oGMap, 'bounds_changed', _.debounce(getNearbyStations, 300));
                    d.resolve();
                });
            });
        });
        $(window).resize(_.debounce(function () {
            google.maps.event.trigger(oGMap, 'resize');
        }, 100));
        return d.promise();
    }

    /**
     * The function to generate the cluster for temperature
     *
     * @since 2015-03-09
     *
     */
    function generateClusterManager() {
        var d = $.Deferred();
        var ajaxGetStations = $.getJSON(mapConstants.sMapStationsURL);
        ajaxGetStations.done(function (data) {
            if (wl.mapOverlayToUse === 'TEMP') {
                generateNonMappedMarker(data);
            }
            var markers = populateStationData(data);
            oMapClusterManager = new MarkerClusterer(oGMap, markers, mapConstants.mcOptions);
            oMapClusterManager.setCalculator(averageCalculator);
            attachClickToMarkers(markers);
            d.resolve();
        });
        return d.promise();
    }


    function shareMap(stationName, deviceIdentifier, lsId) {
        var lat = oGMap.getCenter().lat();
        var lng = oGMap.getCenter().lng();
        var zoomLevel = oGMap.getZoom();
        var overlayType = getCurrentlySelectedOverlayType();
        var aqiSchemeId = wl.selectedScheme.iaqSchemeId;

        var mapShare = {
            lat,
            lng,
            zoomLevel,
            overlayType,
            aqiSchemeId,
            woodsmokeEnabled: wl.applyWoodSmokeFilter
        }

        if (lsId) {
            mapShare.lsId = lsId;
        }

        var url = "/map/shareMap";
        if (deviceIdentifier) {
            url += ("/" + deviceIdentifier.trim());
        }
        var posting = $.ajax({
            url,
            type: "POST",
            data: JSON.stringify(mapShare),
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        });

        posting.done(function (savedMapShare) {
            var city = savedMapShare.city;
            var state = savedMapShare.state;
            var country = savedMapShare.country;

            var location = "";
            if (city && state && country) {
                location = city + ", " + state + ", " + country;
            }
            savedMapShare.shareLocation = location;

            if (!deviceIdentifier) {
                savedMapShare.shareType = 'location';
            } else {
                savedMapShare.shareType = 'stationLocation';
            }

            var shareURL = Utils.getWebsiteURL() + "map/shared/" + savedMapShare.token;
            var socialMediaShareURL = "https://www.weatherlink.com/map/shared/" + savedMapShare.token;
            savedMapShare.shareURL = shareURL;
            savedMapShare.socialMediaShareURL = socialMediaShareURL;

            savedMapShare.shareStationName = stationName;

            showShareSuccess(savedMapShare);
            //console.log(JSON.stringify(savedMapShare));
        });
    }

    /**
     * The function to generate the cluster for AQS
     *
     * @since 2020-07-24
     *
     */
    function generateAqsClusterManager() {

        if (oMapClusterManager) {
            oMapClusterManager.clearMarkers();
        }

        var d = $.Deferred();
        var ajaxGetStations = $.getJSON(mapConstants.sMapAqsDataURL + "/" + wl.applyWoodSmokeFilter);
        ajaxGetStations.done(function (data) {
            if (wl.mapOverlayToUse === 'AIR_QUALITY') {
                generateNonMappedMarker(data);
            }
            var markers = populateStationData(data, true);
            var brightColorCodes = ['#b1b7b9', '#cec81c', '#ede400', '#89ddb4', '#89bedd'];
            var styles = _.map(aqScales, function (scale) {
                return {
                    url: wl.mapConstants.imgUrl + '/AQ/aq_' + scale.colorCode.replace('#', '') + '_lg.png',
                    height: 54,
                    width: 54,
                    textSize: 18,
                    textColor: _.includes(brightColorCodes, scale.colorCode) ? '#000' : '#FFFFFF'
                }
            });
            var mcAQSOptions = {
                gridSize: 60,
                maxZoom: 9,
                minimumClusterSize: 50,
                styles: styles
            };
            oMapClusterManager = new MarkerClusterer(oGMap, markers, mcAQSOptions);
            oMapClusterManager.setCalculator(averageCalculator);
            attachClickToMarkers(markers);
            d.resolve();
        });
        return d.promise();
    }

    /**
     * Generates data for non mapped marker
     * * @param data - an array of all markers
     */
    function generateNonMappedMarker(data) {
        if (wl.currentStationUnmapped && wl.showUnmappedStation) {
            data.push({
                id: wl.data.identifier,
                lat: wl.data.dLat,
                lng: wl.data.dLng,
                tb: -1,
                aqBucket: -1
            })
        }
    }

    /**
     * Attaches the click function to each of the markers.  This can be done in the background
     * @param marker - an array of markers
     */
    function attachClickToMarkers(markers) {
        var infoBox = new InfoBox({
            content: document.getElementById("map-container"),
            boxClass: "wl-popover left",
            disableAutoPan: false,
            boxStyle: {
                'font-size': '14px'
            },
            pixelOffset: new google.maps.Size(20, -34),
            closeBoxURL: ""
        });

        infoBox.addListener("domready", function () {
            $("#nowcast-link").click(function (e) {
                $("#station-data").hide();
                $("#nowcast-help").show();
            })
            $("#exit-nowcast").click(function (e) {
                $("#nowcast-help").hide();
                $("#station-data").show();
            })

            $("#close-button").click(function (e) {
                e.stopPropagation();
                infoBox.close();
                highlightNearbyStation(false);
            });

            $("#share-button").click(function (e) {
                e.stopPropagation();

                var stationName = $("#station-name").text();
                var deviceId = $("#deviceId").text();
                var lsIdStr = $("#lsId").text();
                var lsId = parseInt(lsIdStr);
                lsId = lsId > -1 ? lsId : undefined;

                shareMap(stationName, deviceId, lsId);
            });

        });

        wl.app.oMap.on('location:change', function () {
            infoBox.close();
        });

        wl.app.oMap.on('overlay:change', function () {
            infoBox.close();
        });

        markers.forEach(function (marker) {
            google.maps.event.addListener(marker, 'mouseover', function () {
                marker.setIcon(marker._wlData.hoverIcon);
            });
            google.maps.event.addListener(marker, 'mouseout', function () {
                marker.setIcon(marker._wlData.baseIcon);
            });
            google.maps.event.addListener(marker, 'click', (function (marker) {
                return function () {

                    var callback = function () {
                        stationDataPopupView.render();
                        infoBox.close();
                        infoBox.setContent(stationDataPopupView.$el.html());
                        infoBox.open(oGMap, marker);
                        history.replaceState({}, "", "/map/" + marker._wlData.id);
                    };
                    var stationDataPopupView;
                    var stationDetailUrl = marker._wlData.lsId ? mapConstants.sMapAqsDataURL
                        + '/' + marker._wlData.id + '/' + marker._wlData.lsId + '/' +
                        wl.applyWoodSmokeFilter
                        : mapConstants.sStationsDetailURL + marker._wlData.id;

                    if (isGuest) {
                        var getStationData = $.getJSON(stationDetailUrl);
                        getStationData.done(function (data) {

                            var model = new Backbone.Model(marker._wlData);
                            model.set('stationName', data.sStation);
                            model.set('deviceId', marker._wlData.id);
                            model.set('lsId', marker._wlData.lsId || -1);

                            if (!marker._wlData.lsId) {
                                var temperature = data.temperature;
                                var title = "Approximately " + temperature + " " + data.temperatureUnit;
                                model.set('title', title);
                                model.set('description', undefined);
                                model.set('riskDescription', undefined)
                            }

                            stationDataPopupView = new wl.app.oMap.StationDataPopupGuestView({
                                model
                            });
                            callback();
                        });
                        // show info for non-mapped station
                    } else if (wl.currentStationUnmapped && wl.showUnmappedStation
                        && marker._wlData.id === wl.data.identifier) {
                        stationDataPopupView = new wl.app.oMap.StationDataPopupUnmappedView({
                            model: new Backbone.Model({
                                identifier: wl.data.identifier,
                                stationName: wl.unmappedStationName
                            })
                        });
                        callback();
                    } else {
                        var getStationData = $.getJSON(stationDetailUrl);
                        getStationData.done(function (data) {
                            Object.assign(data, marker._wlData);

                            var matchingScale = aqScales.find(function (arr) {
                                return arr.aqBucket === data.aqBucket
                            });

                            var description = matchingScale?.description;
                            var riskDescription = matchingScale?.riskDescription;

                            var model = new Backbone.Model(data);
                            model.set('stationName', data.sStation);
                            model.set('deviceId', marker._wlData.id);
                            model.set('lsId', marker._wlData.lsId || -1);
                            model.set('description', description);
                            model.set('riskDescription', riskDescription);

                            stationDataPopupView = new wl.app.oMap.StationDataPopupView({
                                model
                            });
                            callback();
                            highlightNearbyStation(data.sStation);
                        });
                    }
                };
            })(marker));
        });

    }

    function highlightNearbyStation(name) {
        var $station = $('.map-sidebar-stations');
        $station.find('dd').removeClass('active');
        if (name !== false) {
            $station.find('dd:contains("' + name + '")').addClass('active');
        }
    }

    google.maps.event.addDomListener(window, 'load', initializeMap);

    /**
     * The algorithm to convert an individual JSON record from the JSON feed into a map marker.
     * @param oStationData
     * @returns google.map.Marker
     */
    function convertJsonToTemperatureMarker(oStationData) {
        if (oStationData.tb === mapConstants.temperatureDashValue) {
            return;
        }

        var color = oStationData.tb;
        var latLng = new google.maps.LatLng(oStationData.lat, oStationData.lng);
        var marker = new google.maps.Marker({
            position: latLng,
            title: '',
            zIndex: color,
            icon: wl.mapConstants.imgUrl + '/Temp/' + color + '_sm.png'
        });
        var colorCode = wl.mapConstants.tempScaleColors[oStationData.tb];
        marker._wlData = {
            tb: oStationData.tb,
            id: oStationData.id,
            hoverIcon: wl.mapConstants.imgUrl + '/Temp/' + color + '_sm_h.png',
            baseIcon: wl.mapConstants.imgUrl + '/Temp/' + color + '_sm.png',
            colorCode
        };
        return marker;
    }

    /**
     * Convert an individual JSON record into a map marker for AQS.
     * @param oStationData
     * @returns google.map.Marker
     */
    function convertJsonToAqsMarker(oStationData) {
        var matchingScale = aqScales.find(function (arr) {
            return arr.aqBucket === oStationData.aqBucket
        });
        var color = _.get(matchingScale, 'colorCode');
        var colorCode = color;
        if (color) {
            color = color.replace('#', '').toLowerCase();
        }
        var latLng = new google.maps.LatLng(oStationData.lat, oStationData.lng);
        var marker = new google.maps.Marker({
            position: latLng,
            title: '',
            icon: wl.mapConstants.imgUrl + '/AQ/aq_' + color + '_sm.png'
        });
        marker._wlData = {
            tb: oStationData.aqBucket,
            id: oStationData.id,
            lat: oStationData.lat,
            lng: oStationData.lng,
            lsId: oStationData.lsId,
            hoverIcon: wl.mapConstants.imgUrl + '/AQ/aq_' + color + '_h.png',
            baseIcon: wl.mapConstants.imgUrl + '/AQ/aq_' + color + '_sm.png',
            title: matchingScale?.title,
            description: matchingScale?.description,
            riskDescription: matchingScale?.riskDescription,
            colorCode
        };

        return marker;
    }

    /**
     * The clustering algorithm likes it when the map points are in some sort of order.
     * This sorts the two marker points, first by latitude and then by longitude, rounded to the
     * nearest integer lat/long.
     * @param a
     * @param b
     */
    function latLongSort(a, b) {
        var aRoundLat = Math.round(a.lat);
        var bRoundLat = Math.round(b.lat);
        if (aRoundLat !== bRoundLat) {
            return bRoundLat - aRoundLat;
        }
        var aRoundLng = Math.round(a.lng);
        var bRoundLng = Math.round(b.lng);
        return aRoundLng - bRoundLng;
    }


    /**
     * Converts the JSON station data array into an array of google map markers
     * @param stationData
     * @param isAqs - used for Air Quality Overlay
     */
    function populateStationData(aStationData, isAqs) {
        var markers = [];
        var marker;
        aStationData.sort(latLongSort)
            .forEach(function (oStationData) {
                marker = isAqs ? convertJsonToAqsMarker(oStationData) :
                    convertJsonToTemperatureMarker(oStationData);
                if (typeof marker !== 'undefined') {
                    markers.push(marker);
                }
            });
        return markers;
    }

    /**
     * set values on temp scale according to user account setting
     */
    function setupTempScale() {
        var $tempScale = $('.map-legend-value');
        var tempValuesArr = (wl.tempUnits === 1) ? mapConstants.tempScale.scaleF : mapConstants.tempScale.scaleC;
        var tempScaleUnits = (wl.tempUnits === 1) ? '&degF' : '&degC';
        _.each(tempValuesArr, function (item, i) {
            if (i === tempValuesArr.length - 1) {
                item += '+';
            }
            $tempScale.append('<div class="value-span">' + item + tempScaleUnits + '</div>');
        });
    }

    /**
     * set values on AQS scale according to user account setting
     */
    function setupAqsScale() {
        var $aqsScale = $('.aqs-scale-value');
        var $aqsGradient = $('.aqs-scale-gradient');
        $aqsGradient.html("");
        $aqsScale.html("");
        var scaleStart, scaleEnd;
        scaleStart = aqScales[0].rangeStart;
        scaleEnd = aqScales[aqScales.length - 1].rangeEnd;
        var colorIndicatorHTMLTemplate = "<span class='aqs-color-indicator' style='background-color:#bg_color'></span>";
        var titleTemplate = "<span class='aqs-level-title'>#title</span>";
        var rangePercent = (100 / (scaleEnd - scaleStart));

        var popoverContentTemplate = "<div class='description-level' data-l10n-id='aqi_description_general'> foo</div><div>#general</div>" +
            "<div class='description-level' data-l10n-id='aqi_description_at_risk'>bar</div><div>#atRisk</div>";


        _.each(aqScales, function (aqScale) {
            var width = Math.ceil(((aqScale.rangeEnd - aqScale.rangeStart) * rangePercent)) + '%';
            $aqsGradient.append('<span style="background:' + aqScale.colorCode + ';' +
                'width:' + width + '"></span>');

            var colorIndicatorHTML = colorIndicatorHTMLTemplate.replace("#bg_color", aqScale.colorCode);
            var title = titleTemplate.replace("#title", aqScale.title);
            var popoverContent = popoverContentTemplate.replace("#general", aqScale.description).replace("#atRisk", aqScale.riskDescription);

            $aqsScale.append('<a href="#" style="text-align:center;width:' + width + '"' +
                ' data-toggle="popover" data-trigger="hover" data-placement="top" data-title="' + colorIndicatorHTML + title +
                '" data-content="' + popoverContent + '">' +
                aqScale.rangeStart + ' - ' + aqScale.rangeEnd + '</a>');
        });
        $('[data-toggle="popover"]').popover({ html: true, container: '.aqs-scale-popover' });
    }

    /**
    * Handles scenario when the user does a station search and clicks on a station
    * or when one of the near by stations is clicked in the side bar
    *
    * Assumption is when a near by station is clicked - the overlay does NOT need to change - TBV
    * If the function is called from station click on search, we do want to reload the
    * page and let the server decide the best overlay to use.
    *
    */
    function handleStationItemClick(e, nearByStationClick) {
        var stationId = $(e.currentTarget).attr('data-id') || $(e.target).closest('dd').attr('data-id');
        var stationName = $(e.target).closest('dd').find('.station-title').text() || $(e.currentTarget).find('.name').text() || '';
        $('#address').val(stationName);
        if (nearByStationClick && oMapClusterManager && oGMap) {
            var bFoundMarker = false;
            function _findMarker() {
                _.each(oMapClusterManager.markers_, function (marker) {
                    if (marker._wlData.id === stationId) {
                        google.maps.event.trigger(marker, 'click');
                        oGMap.setZoom(17);
                        oGMap.setCenter(marker.position);
                        bFoundMarker = true;
                    }
                });
            }
            if (oMapClusterManager) {
                _findMarker();
            }
        } else {
            window.location.href = '/map/' + stationId;
        }
    }

    function handleLocationItemClick(e) {
        var placeId = $(e.currentTarget).attr('data-id');
        var request = {
            placeId: placeId,
            fields: ['formatted_address', 'geometry'],
            sessionToken: sessionToken
        };
        if (document.getElementById(mapConstants.mapDivId)) {
            if (oGMap) {
                placesService.getDetails(request, function (results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        $('#address').val(results.formatted_address);
                        if (results.geometry.viewport) {
                            oGMap.fitBounds(results.geometry.viewport);
                            $('.search-dropdown').hide();
                            wl.app.oMap.trigger('location:change');
                        }
                    }
                    sessionToken = new google.maps.places.AutocompleteSessionToken();
                });
            }
        } else {
            window.location.href = '/map/place_id?' + placeId;
        }
    }

    function getNearbyStations() {
        var url = getNearbyStationsIds();
        var $sidebar = $('.map-sidebar-stations');
        $sidebar.find('dd:not(".active")').remove();

        if (nearbyStationsXhr != null) {
            nearbyStationsXhr.abort();
        }

        nearbyStationsXhr = $.getJSON(url, function (res) {
            $sidebar.find('dd.active').remove();
            _.each(res, function (obj) {
                addNearbyStation(obj.sStationName, obj.sIdentifier, obj.sLocation);
            });
        });
    }

    function getNearbyStationsIds() {
        var milesToMetersConv = 1609.344;
        var mapCenter = oGMap.getCenter();
        var stationListUrl = overlay === 'aqs' ? '/map/data/aqsStationList' : '/map/data/stationList';
        var radius = mapConstants.nearbyStationsRadius * milesToMetersConv;
        var queryParamName = overlay === 'aqs' ? 'lsIds' : 'ids';
        var firstParamFlag = true;
        var numberOfIds = 0;
        _.each(oMapClusterManager.markers_, function (marker, i) {
            var distance = google.maps.geometry.spherical.computeDistanceBetween(mapCenter, marker.position);
            if (distance < radius && numberOfIds <= 25 &&
                ((overlay !== 'aqs' && marker._wlData.id) || (overlay === 'aqs' && marker._wlData.lsId))) {

                if (firstParamFlag) {
                    stationListUrl += '?';
                    firstParamFlag = false;
                } else {
                    stationListUrl += '&';
                }
                stationListUrl += queryParamName + '[]=' + (overlay === 'aqs' ? marker._wlData.lsId : marker._wlData.id);
                numberOfIds++;
            }
        });
        return stationListUrl;
    }

    function addNearbyStation(name, id, location) {
        var activeClass = "";
        var $infobox = $('.wl-popover');
        var $sidebar = $('.map-sidebar-stations');
        if ($infobox.length > 0 && $infobox.find('table td:contains("Station:")').next('td').text() === name) {
            activeClass = "active";
        }
        var stationHtml = '<dd data-id="' + id + '" class="' + activeClass + '">'
            + '<div class="station-title">' + name + '</div>'
            + '<div class="station-location">' + location + '</div></dd>';
        if (activeClass === "active") {
            $sidebar.children('dt').last().after(stationHtml);
        } else {
            $sidebar.append(stationHtml);
        }
    }
    function positionDropdown() {
        //get position and width of address input
        var $dropdown = $('.search-dropdown');
        var $address = $('#address');
        var left = $address.get(0).getBoundingClientRect().left;
        var width = $address.outerWidth();
        $dropdown.css({ 'left': left, 'top': 44, 'width': width });
        $dropdown.find('.dropdown-menu').css('width', width);
    }


    function getAqScales() {
        var deferred = $.Deferred();
        $.getJSON(mapConstants.sMapAqsScaleURL, function (res) {
            aqScales = res;
            if (aqScales.length) {
                setupAqsScale();
                aqScales.unshift({ //default grey color for stale markers
                    aqBucket: -1,
                    colorCode: "#b1b7b9"
                })
            }
            deferred.resolve();
        });
        return deferred.promise();
    }


    /*
    * gets AQ scales based on new scheme
    */
    function getAqScalesForScheme(schemeId) {
        var d = $.Deferred();
        $.getJSON(mapConstants.sMapAqsScaleURL + "/" + schemeId, function (res) {
            aqScales = res;
            if (aqScales.length) {
                setupAqsScale();
                aqScales.unshift({ //default grey color for stale markers
                    aqBucket: -1,
                    colorCode: "#b1b7b9"
                })
            }
            d.resolve();
        });
        return d.promise();
    }


    function handleShareClick() {
        $('.share-option').click(function (e) {
            shareMap();
        });
    }

    function handleAqiIndexSelect() {
        var $aqiToggle = $('.aqi-index-option .dropdown-toggle');
        $('.aqi-index-select .menu-item').click(function (e) {
            var schemeId = $(e.target).attr('data-val');

            wl.selectedScheme = wl.availableSchemes.find(function (scheme) {
                return scheme.iaqSchemeId == schemeId;
            })
            //$('.aqi-index-option .dropdown-toggle').toggle();
            $('.aqi-index-option .dropdown-toggle').dropdown('toggle');
            aqiSelectorView.setSelectedScheme(wl.selectedScheme.saqLongName);
            getAqScalesForScheme(schemeId).then(function () {
                generateAqsClusterManager();
            })
        })
    }

    function handleOverlaySelect() {
        var $overlayToggle = $('.overlay-option .dropdown-toggle');
        if (wl.showAQSOverlay) {
            $overlayToggle.removeClass('disabled');
        }
        $('.overlay-select .menu-item').click(function (e) {
            var value = $(e.target).attr('data-val');
            var text = $(e.target).text();

            if (oMapClusterManager) {
                oMapClusterManager.clearMarkers();
            }
            persistSelectedOverlay(value);

            var overlayType = value === 'aqs' ? 'AIR_QUALITY' : 'TEMP';
        })
    }

    function selectShopProductsImg(overlay) {
        var shopProductsImage = overlay === 'aqs' ? 'AirLinkShop' : 'VueShop';
        var shopProductsImageUrl = "/static/images/map/" + shopProductsImage + ".png";
        var shopProductsUrl =
            overlay === 'aqs'
                ? "https://www.davisinstruments.com/pages/airlink?utm_source=weatherlink-website&utm_medium=home-featured-product-banner"
                : "https://www.davisinstruments.com/collections/weather-stations?utm_source=weatherlink-website&utm_medium=home-top-button";
        $(".product-img").attr('src', shopProductsImageUrl);
        $("#shop-davis-products-url").attr('href', shopProductsUrl);
    }

    function getCurrentlySelectedOverlayType() {
        return overlay === 'temperature' ? 'TEMP' : 'AIR_QUALITY';
    }

    function persistSelectedOverlay(selectedOverlay) {
        var overlayType = selectedOverlay === 'aqs' ? 'AIR_QUALITY' : 'TEMP';
        $.ajax(mapConstants.sMapPersistOverlayURL + "/" + overlayType)
            .done(function () {

                //approach 1 - zoom level etc getting lost with this approach
                //window.location.reload(true);


                //approach 2 - just update the data
                selectOverlay(selectedOverlay, true);

                //refresh near by station list on overlay change
                getNearbyStations();
            });
    }

    /*
    * selects temperature or air quality overlay, and intializes correct data based
    * on selected overlay, sets the Overlay UI Text to Temperature or Air Quality as needed
    */
    function selectOverlay(selectedOverlay, updateUI) {
        //update global variable
        overlay = selectedOverlay;

        var $tempScale = $('.map-legend-container');
        var $aqsScale = $('.aqs-scale-container');
        var promise;
        if (selectedOverlay === 'aqs') {
            promise = generateAqsClusterManager();
            overlay = 'aqs';
            $tempScale.hide();
            $aqsScale.show();
        } else {
            promise = generateClusterManager();
            overlay = 'temperature';
            $tempScale.show();
            $aqsScale.hide();
        }
        wl.app.oMap.trigger('overlay:change');
        var selectedOverlayText = selectedOverlay === 'aqs' ?
            $('.menu-item[data-val="aqs"]').text() :
            $('.menu-item[data-val="temp"]').text();

        $('.option.dropdown .overlay-value').text(selectedOverlayText);


        selectShopProductsImg(overlay);
        toggleAqiSelectDropDown(overlay === 'aqs');
        return promise;
    }



    $(document).ready(function () {
        handleShareClick();
        handleOverlaySelect();
        $(window).resize(_.debounce(function () {
            positionDropdown();
        }, 100));
        var $dropdown = $('.search-dropdown');
        $(document).click(function (e) {
            if (!$(e.target).closest('.search-dropdown, .navbar-search-box').length) {
                $dropdown.hide();
            }
        });
        var $address = $('#address');
        var $googleLocationBlock = $('#locations');
        var xhr = null;
        var service = new google.maps.places.AutocompleteService();

        $address.keyup(_.debounce(function (e) {
            if (e.keyCode === 38 || e.keyCode === 40 || e.keyCode === 13) {
                return;
            }

            if (xhr != null) {
                xhr.abort();
            }

            if ($(this).val() === "") {
                $dropdown.hide();
                return;
            }

            var url = '/map/searchStationName?name=' + $(this).val();
            xhr = $.getJSON(url, function (res) {
                wl.app.SearchDropdown.stationsCollection.reset();
                wl.app.SearchDropdown.stationsCollection.add(res);
                $dropdown.show();
                positionDropdown();
                $('a.station-item').mousedown(handleStationItemClick.bind(e));
            });

            if ($googleLocationBlock.is(':visible')) {
                service.getPlacePredictions({
                    input: $(this).val(), sessionToken: sessionToken, types: {
                        types: ['address']
                    }
                }, displaySuggestions);
            }
        }, 300));

        var displaySuggestions = function (predictions, status) {
            if (status !== google.maps.places.PlacesServiceStatus.OK && status === "ZERO_RESULTS") {
                return;
            }
            wl.app.SearchDropdown.locationsCollection.reset();
            predictions.forEach(function (prediction) {
                if (prediction.place_id !== undefined) {
                    $dropdown.show();
                    var model = new Backbone.Model({
                        place_id: prediction.place_id,
                        description: prediction.description
                    });
                    wl.app.SearchDropdown.locationsCollection.add(model);
                }
            });

            if (predictions.length > 0) {
                positionDropdown();
                $('a.location-item').mousedown(function (e) {
                    handleLocationItemClick(e);
                });
            }
        };

        // in navbar.js, the google location has a trigger of googleSearchShow when
        // the locations div is displayed.  This triggers an 
        // initial load of the goole prediction
        $googleLocationBlock.on('googleSearchShow', function () {
            service.getPlacePredictions({
                input: $address.val(), sessionToken: sessionToken, types: {
                    types: ['address']
                }
            }, displaySuggestions);
        });

        $address.focus(function () {
            if ($dropdown.is(':hidden')) {
                if (wl.app.SearchDropdown.stationsCollection.length ||
                    wl.app.SearchDropdown.locationsCollection.length) {
                    $(this).trigger('keyup');
                }
            }
        });

        $address.keydown(function (e) {
            if ($(this).val() === '') {
                return;
            }

            var itemsArr = $('#stations').is(':visible') ?
                $('.station-item') : $('.location-item');
            itemsArr.removeClass('active');
            if (itemsArr.length > 0) {
                $dropdown.show();
            }
            var itemFound;
            //up
            if (e.keyCode === 38) {
                itemFound = false;
                _.each(itemsArr, function (item, i) {
                    if ($address.val() === $(item).attr('data-name')) {
                        if (i > 0) {
                            if ($(itemsArr).eq(i).attr('data-name') === $(itemsArr).eq(i - 1).attr('data-name')) {
                                i--;
                            }
                            $address.val($(itemsArr).eq(i - 1).addClass('active').attr('data-name'));
                            scrollToHiddenItem($(itemsArr).eq(i - 1));
                            itemFound = true;
                        }
                        return false;
                    }
                });
                if (itemFound === false) {
                    _.each(itemsArr, function () {
                        $address.val($(itemsArr).eq(itemsArr.length - 1).addClass('active').attr('data-name'));
                        scrollToHiddenItem($(itemsArr).eq(itemsArr.length - 1));
                        return false;
                    });
                }
            }
            //down
            if (e.keyCode === 40) {
                itemFound = false;
                _.each(itemsArr, function (item, i) {
                    if ($address.val() === $(item).attr('data-name')) {
                        if (i < itemsArr.length - 1) {
                            if ($(itemsArr).eq(i).attr('data-name') === $(itemsArr).eq(i + 1).attr('data-name')) {
                                i++;
                            }
                            $address.val($(itemsArr).eq(i + 1).addClass('active').attr('data-name'));
                            scrollToHiddenItem($(itemsArr).eq(i + 1));
                            itemFound = true;
                        }
                        return false;
                    }
                });
                if (itemFound === false) {
                    _.each(itemsArr, function () {
                        $address.val($(itemsArr).eq(0).addClass('active').attr('data-name'));
                        scrollToHiddenItem($(itemsArr).eq(0));
                        return false;
                    });
                }
            }
            if (e.keyCode === 13) {
                var triggered = false;
                _.each(itemsArr, function (item, i) {
                    if ($(item).attr('data-name') === $address.val()) {
                        triggered = true;
                        $(item).trigger('mousedown');
                    }
                });
                if (!triggered && itemsArr.length > 0) {
                    $(itemsArr[0]).trigger('mousedown');
                }
            }
            function scrollToHiddenItem(item) {
                var $container = item.closest('ul');
                var contBottomBorder = $container.get(0).getBoundingClientRect().bottom;
                var contTopBorder = $container.get(0).getBoundingClientRect().top;
                var itemTopBorder = item.get(0).getBoundingClientRect().top;
                var itemBottomBorder = item.get(0).getBoundingClientRect().bottom;
                var scrollPosition = $container.scrollTop();
                if (itemTopBorder < contTopBorder) {
                    return $container.scrollTop(scrollPosition - (contTopBorder - itemTopBorder));
                }
                if (itemBottomBorder > contBottomBorder) {
                    return $container.scrollTop(scrollPosition + itemBottomBorder - contBottomBorder);
                }
            }
        });

        //attach click handler for nearby stations
        $('.map-sidebar-stations').click(function (e) {
            var dd = $(e.target).closest('dd');
            dd.siblings().removeClass('active');
            dd.addClass('active');
            handleStationItemClick(e, true);
        });
    });
});
