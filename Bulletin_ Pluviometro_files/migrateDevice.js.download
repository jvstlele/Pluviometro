var wl = wl || {};
wl.davis = wl.davis || {};
wl.davis.views = wl.davis.views || {};

wl.davis.views.MigrateDeviceView = Marionette.ItemView.extend({
  model: new Backbone.Model,
  className: "migrate-device",
  template: wl.shared.tpl['migrate-device'],
  modelEvents: {},
  lastMigratedSIdentifier: undefined,

  events: {
    'click @ui.submit': 'onSubmit',
    'click @ui.migrateAnother': 'migrateAnother',
    'keyup input': 'handleSubmitAvailability',
    'blur input': 'handleSubmitAvailability',
    'paste input': 'handleSubmitAvailability',
    'click @ui.finish': 'finishMigration'
  },

  ui: {
    'back': '#back',
    'finish': '#finish',
    'username': '#username',
    'password': '#password',
    'deviceId': '#deviceId',
    'processing': '#processing',
    'migrateUsername': '#migrate_username',
    'migratePassword': '#migrate_password',
    'migrateDeviceId': '#migrate_device_id',
    migrateDeviceSuccess: '#migrate-device-success',
    migrateDeviceError: '.migrate-device-error',
    migrateDeviceFormSection: '.migrate-device-form-section',
    submit: '#submit',
    migrateAnother: '#migrateAnother',
    migrateDeviceForm: '.migrate-device-form'
  },
  triggers: {
    'click @ui.back': 'layout:render'
  },

  initialize: function(options) {
    this.initModel();
  },

  onRender: function() {
    this.processing(false);
    this.ui.migrateDeviceSuccess.hide();
    this.ui.migrateDeviceFormSection.show();
    this.handleSubmitAvailability();
  },

  initModel: function() {
    this.model.set('deviceId', '');
    this.model.set('username', '');
    this.model.set('password', '');
    this.model.set('processing', false);
    this.model.set('error', '');
  },


  migrateAnother: function() {
    this.initModel();
    this.render();
  },

  finishMigration: function() {
    if (this.lastMigratedSIdentifier) {
      window.location = "/bulletin/" + this.lastMigratedSIdentifier;
    }
  },


  handleSubmitAvailability: function() {
    var arr = this.ui.migrateDeviceForm.serializeArray();
    var formParams = {};
    $.each(arr, function() {
      formParams[this.name] = this.value;
    })
    if (formParams.deviceId.length > 0 && formParams.username.length >
      0 &&
      formParams.password.length > 0) {
      this.ui.submit.prop('disabled', false);
    } else {
      this.ui.submit.prop('disabled', true);
    }
  },

  errorMessage: function(msg) {
    this.ui.migrateDeviceError.html(msg);
  },

  performMigration: function() {
    var self = this;
    self.lastMigratedSIdentifier = undefined;
    var formData = this.ui.migrateDeviceForm.serializeArray();
    $.ajax({
      type: "POST",
      url: "/migrate/migrateUserSystem",
      data: formData,
      success: function(response) {
        self.processing(false);
        if (response.data) {
          self.ui.migrateDeviceFormSection.hide();
          self.ui.migrateDeviceSuccess.show();
          self.lastMigratedSIdentifier = response.data;
        } else if (response.error) {
          errorMessage(response.error.errorMessage);
        }
      },
      error: function(res) {
        self.processing(false);
      }
    });
  },

  toggleDeviceIdError: function(on) {
    this.ui.migrateDeviceId.toggleClass(
      'migrate-device-error-label', on);
    this.ui.deviceId.toggleClass('migrate-device-error-input', on);
  },

  toggleErrorClasses: function(on) {
    this.ui.username.toggleClass('migrate-device-error-input', on);
    this.ui.password.toggleClass('migrate-device-error-input', on);
    this.ui.migrateUsername.toggleClass(
      'migrate-device-error-label', on);
    this.ui.migratePassword.toggleClass('migrate-device-error-label', on);
  },

  processing: function(show) {
    if (show) {
      this.ui.processing.show();
      this.ui.submit.hide();
    } else {
      this.ui.processing.hide();
      this.ui.submit.show();
    }
  },

  onSubmit: function() {
    this.toggleErrorClasses(false);
    this.toggleDeviceIdError(false);
    this.model.set('username', this.ui.username.val());
    this.model.set('password', this.ui.password.val());
    this.model.set('deviceId', this.ui.deviceId.val());
    this.processing(true);
    this.errorMessage('');

    var self = this;
    var formData = this.ui.migrateDeviceForm.serializeArray();
    $.ajax({
      type: "POST",
      url: "/migrate/validateMigrateCredentials",
      data: formData,
      success: function(response) {
        if (response.error) {
          if (response.error.errorMessage === 'invalid_credentials') {
            self.errorMessage(
              "You've entered an invalid username or password.");
            self.toggleErrorClasses(true);
          } else if (response.error.errorMessage ===
            'invalid_deviceId') {
            self.errorMessage(
              "You've entered an invalid Device ID.");
            self.toggleDeviceIdError(true);
          } else if (response.error.errorMessage ===
            'already_migrated') {
            self.errorMessage(
              "Device has already been migrated over.");
            self.toggleDeviceIdError(true);
          } else {
            self.errorMessage(response.error.errorMessage);
          }
          self.processing(false);
          //self.render();
        } else {
          self.performMigration();
        }
      },
      error: function(res) {
        self.processing(false);
      }
    });
  }
})


wl.davis.views.MigrateDeviceMessageView = Marionette.ItemView.extend({
  template: wl.shared.tpl["migrate-device-message"],
  ui: {
    "iconClose": ".wl-icon.icon-close",
    "noThanks": "#no-thanks",
    "migrate": "#migrate",
    "migrateDeviceMessage": "#migrate-device-message"
  },
  triggers: {
    "click @ui.migrate": "layout:renderMigrateDeviceForm",
    "click @ui.iconClose": "layout:close",
    "click @ui.noThanks": "layout:close"
  },
  onRender: function() {
    var hideMessage = this.getOption('hideMessage');
    if (hideMessage) {
      this.ui.migrateDeviceMessage.hide();
    }
  },
  onReaderLoad: function(e, input) {},
  hideModal: function() {
    oBulletinApp.Modal.hideModal();
  }
});
