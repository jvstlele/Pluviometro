/*
 * Davis Instruments Corporation
 * WeatherLink 2.0 Maia Summary Application
 *
 * Define Application Module
 *
 * Created by Kalin Muskov on 8/27/2015.
 *
 */

var wl = wl || {};

wl.app.module('oMapper', function(oMapper, oApp, Backbone, Marionette, $, _) {

	var DASH_VALUE = "--";

	this.map = function(logicalSensor) {
		var html = "";

		var dataStructureTypeId = logicalSensor.dataStructureTypeId;
		switch (dataStructureTypeId) {
			case (16): //Temp/Hum
				html = this.buildTempHum(logicalSensor);
				break;
			case (17): //Rain
				html = this.buildRainSensor(logicalSensor, dataStructureTypeId);
				break;
			case (18): //Anemometer
				html = this.buildAnemometerSensor(logicalSensor, dataStructureTypeId);
				break;
			case (19): //Solar Radiation
				html = this.buildSolarRad(logicalSensor);
				break;
			case (21): //Davis Leaf Wetness Sensor
				html = this.buildLeafWetness(logicalSensor);
				break;
			case (22): //Davis Temperature Probe
				html = this.buildTemperatureProbe(logicalSensor);
				break;
			case (25): //Soil Moisture [ 1 ring - Moisture cb]
				html = this.buildSoilMosture25(logicalSensor);
				break;
			case (26): //Soil Moisture [ 1 ring - Moisture %]
				html = this.buildSoilMosture26(logicalSensor);
				break;
			case (29): //Soil Moisture [ 1 ring - Moisture %, Temp]
				html = this.buildSoilMosture29(logicalSensor);
				break;
			case (30): //Soil Moisture [ 1 ring - Moisture %, EC, Temp]
				html = this.buildSoilMosture30(logicalSensor);
				break;
			case (39): //Soil Moisture [ 6 ring - Moisture %, Temp]
				html = this.buildSoilMosture39(logicalSensor);
				break;
			case (40): //Soil Moisture [ 6 ring - Moisture %, EC,  Temp]
				html = this.buildSoilMosture40(logicalSensor);
				break;
			case (41): //Soil Moisture [ 12 ring - Moisture %, Temp]
				html = this.buildSoilMosture41(logicalSensor);
				break;
			case (42): //Soil Moisture [ 12 ring - Moisture %, EC, Temp]
				html = this.buildSoilMosture42(logicalSensor);
				break;
			case (44): //Soil Moisture [ 4 ring - Moisture %, Temp]
				html = this.buildSoilMosture44(logicalSensor);
				break;
			case (45): //Soil Moisture [ 6 ring - Moisture %, Temp]
				html = this.buildSoilMosture45(logicalSensor);
				break;
			case (47): //Pressure Switch
				html = this.buildPressureSwitch(logicalSensor);
				break;
			case (49): //Pressure Sensor
				html = this.buildPressureSensor(logicalSensor);
				break;
			case (50): //Fluid Sensor
				html = this.buildFluidSensor(logicalSensor);
				break;
			case (51): //Flow meter
				html = this.buildFlowMeter(logicalSensor);
				break;
			case (52): //Soil Moisture [ 5 ring - Moisture %, Temp]
				html = this.buildSoilMosture52(logicalSensor);
				break;
			case (53): //Soil Moisture [ 9 ring - Moisture %, Temp]
				html = this.buildSoilMosture53(logicalSensor);
				break;
			case (54): //Soil Moisture [ 9 ring - Moisture %, EC, Temp]
				html = this.buildSoilMosture54(logicalSensor);
				break;
			case (55): //Water Analyzer [Temp, EC]
				html = this.buildWaterAnalyzerSensor(logicalSensor);
				break;
			case (56): //Decagon/Meter Depth Sensor (Depth, Temp, EC)
				html = this.buildDecagonDepthMeterSensor(logicalSensor);
				break;
			case (57): //Soil Moisture [ 3 ring - Moisture %, Temp]
				html = this.buildSoilMosture57(logicalSensor);
				break;
			case (58): //Soil Moisture [ 3 ring - Moisture %, EC,  Temp]
				html = this.buildSoilMosture58(logicalSensor);
				break;
			case (59): //PAR Sensor
				html = this.buildPARSensor(logicalSensor);
				break;
			case (63): //CO2 Sensor
				html = this.buildCO2Sensor(logicalSensor);
				break;
			case (64): //Load Sensor
				html = this.buildLoadSensor(logicalSensor);
				break;
			case (66): //Judd Depth Sensor
				html = this.buildJuddDepth66(logicalSensor);
				break;
			case (67): //Soil Moisture [5 ring]
				html = this.buildSoilMosture67(logicalSensor);
				break;
			case (68): //Soil Moisture [6 ring]
				html = this.buildSoilMosture68(logicalSensor);
				break;
			case (69): //Soil Moisture [4 ring]
				html = this.buildSoilMosture69(logicalSensor);
				break;
			case (70): //Lambrecht Rain Sensor
				html = this.buildRainSensor(logicalSensor, dataStructureTypeId);
				break;
			case (71): //Lambrecht Wind Sensor
				html = this.buildAnemometerSensor(logicalSensor, dataStructureTypeId);
				break;
			case (75): //Surface Sentinel Sensor
				html = this.buildSurfaceSentinelSensor(logicalSensor, dataStructureTypeId);
				break;
			case (76): //Alarm Sensor
				html = this.buildAlarmSensor(logicalSensor, dataStructureTypeId);
				break;
			case (78): //GroPoint Moisture/Temp Profile
				html = this.buildSoilMoistureTemp78(logicalSensor, dataStructureTypeId);
				break;
			case (79): //Soil Moisture [ 4 ring - Moisture %, EC, Temp]
				html = this.buildSoilMosture79(logicalSensor);
				break;
			case (80): //Soil Moisture [ 8 ring - Moisture %, EC, Temp]
				html = this.buildSoilMosture80(logicalSensor);
				break;
			case (81): //Soil Moisture [ 16 ring - Moisture %, EC, Temp]
				html = this.buildSoilMosture81(logicalSensor);
				break;
			case (82): //Soil Moisture [ 8 ring - Moisture % Temp]
				html = this.buildSoilMosture82(logicalSensor);
				break;
			case (83): //Soil Moisture [ 16 ring - Moisture % Temp]
				html = this.buildSoilMosture83(logicalSensor);
				break;
			case (84): //GroPoint Moisture/Temp Profile 2 SM, 4 Temp
				html = this.buildSoilMoistureTemp84(logicalSensor, dataStructureTypeId);
				break;
			case (85): //GroPoint Moisture/Temp Profile 3 SM, 6 Temp
				html = this.buildSoilMoistureTemp85(logicalSensor, dataStructureTypeId);
				break;
			case (86): //GroPoint Moisture/Temp Profile 5 SM, 9 Temp
				html = this.buildSoilMoistureTemp86(logicalSensor, dataStructureTypeId);
				break;
			case (87): //GroPoint Moisture/Temp Profile 6 SM, 11 Temp
				html = this.buildSoilMoistureTemp87(logicalSensor, dataStructureTypeId);
				break;
			case (88): //GroPoint Moisture/Temp Profile 8 SM, 14 Temp
				html = this.buildSoilMoistureTemp88(logicalSensor, dataStructureTypeId);
				break;
			case (89): //GroPoint Moisture Profile 2 SM
				html = this.buildSoilMoistureTemp89(logicalSensor, dataStructureTypeId);
				break;
			case (90): //GroPoint Moisture Profile 3 SM
				html = this.buildSoilMoistureTemp90(logicalSensor, dataStructureTypeId);
				break;
			case (91): //GroPoint Moisture Profile 4 SM
				html = this.buildSoilMoistureTemp91(logicalSensor, dataStructureTypeId);
				break;
			case (92): //GroPoint Moisture Profile 5 SM
				html = this.buildSoilMoistureTemp92(logicalSensor, dataStructureTypeId);
				break;
			case (93): //GroPoint Moisture Profile 6 SM
				html = this.buildSoilMoistureTemp93(logicalSensor, dataStructureTypeId);
				break;
			case (94): //GroPoint Moisture Profile 8 SM
				html = this.buildSoilMoistureTemp94(logicalSensor, dataStructureTypeId);
				break;
			case (95): //Soil Moisture [ 4 ring - Moisture % Temp]
				html = this.buildSoilMosture95(logicalSensor);
				break;
			default:
				//Dynamic Soil Moisture
				if (dataStructureTypeId >= 1000) {
					html = this.buildSoilMoisture1000(logicalSensor);
				}
		}

		return html;
	};

	/*
	 * Davis Temp/Hum Sensor
	 * DataStucture 16
	 */
	this.buildTempHum = function(oLogicalSensor) {
		var labelTemp = "Temperature";
		var labelHum = "Humidity";

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType16FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var highTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_high];
		var highTempHat = bOutdatedData || sensorData[dataStructure.temp_high] ==
			null ? DASH_VALUE : sensorData[dataStructure.temp_high_ts] + tzOffset;
		var lowTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_low];
		var lowTempHat = bOutdatedData || sensorData[dataStructure.temp_low] ==
			null ? DASH_VALUE : sensorData[dataStructure.temp_low_ts] + tzOffset;
		var curTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_avg];
		var highHum = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.hum_high];
		var highHumHat = bOutdatedData || sensorData[dataStructure.hum_high] ==
			null ? DASH_VALUE : sensorData[dataStructure.hum_high_ts] + tzOffset;
		var lowHum = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.hum_low];
		var lowHumHat = bOutdatedData || sensorData[dataStructure.hum_low] == null ?
			DASH_VALUE : sensorData[dataStructure.hum_low_ts] + tzOffset;
		var curHum = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.hum_avg];

		var highHeatIndex = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.heat_index_high];
		var highHeatIndexHat = bOutdatedData || sensorData[dataStructure.heat_index_high] ==
			null ? DASH_VALUE : sensorData[dataStructure.heat_index_high_ts] +
			tzOffset;
		var curHeatIndex = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.heat_index];

		var highDewPoint = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.dew_point_high];
		var highDewPointHat = bOutdatedData || sensorData[dataStructure.dew_point_high] ==
			null ? DASH_VALUE : sensorData[dataStructure.dew_point_high_ts] +
			tzOffset;
		var lowDewPoint = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.dew_point_low];
		var lowDewPointHat = bOutdatedData || sensorData[dataStructure.dew_point_low] ==
			null ?
			DASH_VALUE : sensorData[dataStructure.dew_point_low_ts] + tzOffset;
		var curDewPoint = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.dew_point];

		var lowWetBulb = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.wet_bulb_low];
		var lowWetBulbHat = bOutdatedData || sensorData[dataStructure.wet_bulb_low] ==
			null ? DASH_VALUE : sensorData[dataStructure.wet_bulb_low_ts] + tzOffset;
		var curWetBulb = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.wet_bulb];

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" " +
			"data-l10n-id='daily_lows'></th><th class='short'><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td>";
		//Current Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curTemp, wl.data
			.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		//High Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, highTemp, wl
			.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(highTempHat) + "</td>";
		//Low Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, lowTemp, wl.data
			.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(lowTempHat) + "</td>";
		html += "</td></tr>";
		html += "<tr><td data-l10n-id='sensor_hum'></td>";
		//Current Hum
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelHum, curHum, wl.data
			.userAccountSetting, '%') + "</td>";
		//High Hum
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelHum, highHum, wl.data
				.userAccountSetting, '%') + "</td><td>" + this.formatTime(highHumHat) +
			"</td>";
		//Low Hum
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelHum, lowHum, wl.data
				.userAccountSetting, '%') + "</td><td>" + this.formatTime(lowHumHat) +
			"</td>";
		html += "</td></tr>";

		html += "<tr><td data-l10n-id='sensor_temp_heat'></td>";
		//Current Heat Index
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curHeatIndex,
			wl.data
			.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		//High Heat Index
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp,
				highHeatIndex, wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) + "</td><td>" + this.formatTime(
				highHeatIndexHat) +
			"</td>";
		html += "<td></td><td></td></td></tr>";

		html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_dew'></td>";
		//Current Dew Point
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curDewPoint,
			wl.data
			.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		//High Dew Point
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, highDewPoint,
			wl
			.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(highDewPointHat) + "</td>";
		//Low Dew Point
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, lowDewPoint,
			wl.data
			.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(lowDewPointHat) + "</td>";
		html += "</td></tr>";

		html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_wet_bulb'></td>";
		//Current Wet Bulb
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curWetBulb,
				wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) +
			"</td><td></td><td></td>";
		//Low Wet Bulb
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, lowWetBulb,
			wl.data
			.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(lowWetBulbHat) + "</td>";
		html += "</td></tr>";

		html += "</tbody></table>";
		return html
	};

	/*
	 * Rain Sensor / Lambrecht Rain Sensor
	 * DataStructure 17 / DataStructure 70
	 */
	this.buildRainSensor = function(oLogicalSensor, dataStructureTypeId) {

		var rainScale = "Rain";
		var rainUnits = wl.data.unitLabelRainEt;

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var sensorData = _.find(wl.data.totalRainData, function(arr) {
			return arr.iLogicalSensorId === oLogicalSensor.logicalSensorId;
		});

		//rain rate data
		var dataStructure = wl.constants['structureType' + dataStructureTypeId +
			'FieldName'];
		var rainRateSensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var rainRate = bOutdatedData ? DASH_VALUE : rainRateSensorData[
			dataStructure.rain_rate_high];
		var totalForToday = DASH_VALUE;
		var totalForMonth = DASH_VALUE;
		var totalForYear = DASH_VALUE;
		if (sensorData) {
			totalForToday = sensorData.totalForToday.convertedVal;
			totalForMonth = sensorData.totalForMonth.convertedVal;
			totalForYear = sensorData.totalForYear.convertedVal;
		}

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='rate'><th class='short' data-l10n-id='day'></th><th class='short' data-l10n-id='month'></th>" +
			"<th class='short' data-l10n-id='year'></th></th><th></th><th class='last-and-long light'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html += "<tr><td class=\"tableCell\" data-l10n-id='rain'></td>";
		//total for day
		html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale,
			rainRate, wl.data.userAccountSetting, rainUnits + '/h') + "</td>";
		//total for day
		html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale,
			totalForToday, wl.data.userAccountSetting, rainUnits) + "</td>";
		//total for month
		html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale,
			totalForMonth, wl.data.userAccountSetting, rainUnits) + "</td>";
		//total for year
		html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, totalForYear,
			wl.data.userAccountSetting, rainUnits) + "</td>";
		html += "</td></tr>";
		html += "</tbody></table>";
		return html
	};

	/*
	 * Anemometer Sensor / Lambrecht Wind Sensor
	 * DataStructure 18 / DataStructure 71
	 */
	this.buildAnemometerSensor = function(oLogicalSensor, dataStructureTypeId) {
		var labelWind = "Wind Speed";
		var labelTemp = "Temperature";

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants['structureType' + dataStructureTypeId +
			'FieldName'];
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var avgWindSpeed = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.wind_speed_avg];
		var highWindSpeed = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.wind_speed_hi];
		var highWindSpeedHat = bOutdatedData || sensorData[dataStructure.wind_speed_hi] ==
			null ? DASH_VALUE : sensorData[dataStructure.wind_speed_hi_ts] + tzOffset;
		var curWindDir = bOutdatedData || sensorData[dataStructure.wind_dir_dominant] ==
			null ? DASH_VALUE : sensorData[dataStructure.wind_dir_dominant];
		var avgWindSpeed2Min = bOutdatedData ? DASH_VALUE : sensorData[
			dataStructure.wind_speed_avg_2min];
		var avgWindSpeed10Min = bOutdatedData ? DASH_VALUE : sensorData[
			dataStructure.wind_speed_avg_10min];
		var windGustSpeed2Min = bOutdatedData ? DASH_VALUE : sensorData[
			dataStructure.wind_speed_hi_2min];
		var windGustSpeed10Min = bOutdatedData ? DASH_VALUE : sensorData[
			dataStructure.wind_speed_hi_10min];


		//DataStructure 71
		var curTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_avg];
		var highTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_hi];
		var highTempTs = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_hi_ts];
		var lowTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_low];
		var lowTempTs = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_low_ts];
		var windChill = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.wind_chill];
		var lowWindChill = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.wind_chill_low];
		var lowWindChillTs = bOutdatedData ? DASH_VALUE : sensorData[dataStructure
			.wind_chill_low_ts];

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th>";
		if (dataStructureTypeId === 71) {
			html += "<th colspan=\"2\" data-l10n-id='daily_lows'></th>" +
				"<th class='short dark'></th><th class='last-and-long dark'>";
		} else {
			html +=
				"<th></th><th class='short light'></th><th class='last-and-long light'>";
		}
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_speed'></td>";
		//Current or Avg
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelWind, avgWindSpeed,
			wl.data.userAccountSetting, wl.data.unitLabelWindSpeed) + "</td>";
		//Daily Highs
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelWind,
				highWindSpeed, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed) +
			"</td>";
		html += "<td>" + this.formatTime(highWindSpeedHat) + "</td></tr>";
		//Wind Direction
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_direction'></td>";
		if (curWindDir !== DASH_VALUE) {
			html += "<td>" + Utils.getCardinalFromDegWithCalm(curWindDir);
			if (curWindDir !== 0) {
				html += " " + Utils.formatWindDirectionDeg(curWindDir, wl.data.userAccountSetting) +
					"&deg;";
			}
			html += "</td>";
		} else {
			html += "<td>" + DASH_VALUE + "</td>";
		}
		html += "</tr></tbody></table>";
		html += "<table class=\"table table-short\">";
		html += "<thead><tr><th style='background: #fff'></th>";
		html +=
			"<th data-l10n-id='minute' data-l10n-args='{\"amount\": \"2\"}'></th><th data-l10n-id='minute' data-l10n-args='{\"amount\": \"10\"}'>10 Minute</th><th class='transparent'></th><th class='short transparent'></th><th class='last-and-long transparent'></th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_avg_spd'></td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelWind,
			avgWindSpeed2Min, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed
		) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelWind,
			avgWindSpeed10Min, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed
		) + "</td>";
		html += "</td></tr>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_gst_spd'></td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelWind,
			windGustSpeed2Min, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed
		) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelWind,
			windGustSpeed10Min, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed
		) + "</td>";
		html += "</td></tr></tbody></table>";
		if (dataStructureTypeId === 71) {
			html +=
				"<table class='table'><thead><tr class='no-height'><th></th><th></th><th colspan=\"2\"></th>" +
				"<th colspan=\"2\"></th><th class='short'></th><th class='last-and-long'></th></tr></thead>";
			html +=
				"<tbody><tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp,
					curTemp, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
				"</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp,
					highTemp, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
				"</td>";
			html += "<td>" + this.formatTime(highTempTs) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp,
					lowTemp, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
				"</td>";
			html += "<td>" + this.formatTime(lowTempTs) + "</td>";
			html +=
				"</tr><tr><td class=\"tableCell\" data-l10n-id='sensor_temp_chill'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp,
					windChill, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
				"</td>";
			html += "<td></td><td></td><td>" + Utils.formatSensorReadingWithUnit(
					labelTemp,
					lowWindChill, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
				"</td>";
			html += "<td>" + this.formatTime(lowWindChillTs) +
				"</td></tr></tbody></table>";
		}

		return html;
	};

	/*
	 * Davis Solar Radiation
	 * DataStructure 19
	 */
	this.buildSolarRad = function(oLogicalSensor) {
		var labelSolarRad = "Solar Radiation";

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType19FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var curSolarRad = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.solar_rad];
		var avgSolarRad = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.solar_rad_avg];
		var highSolarRad = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.solar_rad_high];
		var highSolarRadHat = bOutdatedData || sensorData[dataStructure.solar_rad_high] ==
			null ? DASH_VALUE : sensorData[dataStructure.solar_rad_high_ts] +
			tzOffset;

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th data-l10n-id='average'></th><th class='short'></th><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_solar_rad'></td>";
		//Current
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelSolarRad,
				curSolarRad, wl.data.userAccountSetting, wl.data.unitLabelSolar) +
			"</td>";
		//Daily Highs
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelSolarRad,
				highSolarRad, wl.data.userAccountSetting, wl.data.unitLabelSolar) +
			"</td>";
		html += "<td>" + this.formatTime(highSolarRadHat) + "</td>";
		//Average
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelSolarRad,
				avgSolarRad, wl.data.userAccountSetting, wl.data.unitLabelSolar) +
			"</td>";
		html += "</td></tr>";
		html += "</tbody></table>";
		return html
	};
	
	/*
	 * Davis Leaf Wetness Sensor
	 * DataStructure 21
	 */
	this.buildLeafWetness = function(oLogicalSensor) {
		var labelLeafWetness = "Leaf Wetness";

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType21FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var curWet = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.leaf_wetness];
		var highWet = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.leaf_wetness_high];
		var highWetHat = bOutdatedData || sensorData[dataStructure.leaf_wetness_high] ==
			null ? DASH_VALUE : sensorData[dataStructure.leaf_wetness_high_ts] +
			tzOffset;
		var minutes = DASH_VALUE;
		if (!bOutdatedData && curWet != null) {
			var dataValue = sensorData[dataStructure.leaf_wetness_minutes];
			minutes = (dataValue != null && dataValue >= 0) ? Utils.getUptimeSecondsAsString(
				dataValue * 60) : DASH_VALUE;

		}

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'><th data-l10n-id='minutes'></th><th class='short'></th><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";;
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_leaf_wetness'></td>";
		//Current
		html += "<td>" + Utils.formatSensorReading(labelLeafWetness, curWet, wl.data
			.userAccountSetting) + "</td>";
		//Daily Highs
		html += "<td>" + Utils.formatSensorReading(labelLeafWetness, highWet, wl.data
			.userAccountSetting) + "</td>";
		html += "<td>" + this.formatTime(highWetHat) + "</td>";
		//Minutes
		html += "<td>" + minutes + "</td>";
		html += "</td></tr>";
		html += "</tbody></table>";
		return html
	};

	/*
	 * Davis Temperature Probe
	 * DataStructure 22
	 */
	this.buildTemperatureProbe = function(oLogicalSensor) {
		var labelTemp = "Temperature";

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType22FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var avgTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_avg];
		var highTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_high];
		var highTempHat = bOutdatedData || sensorData[dataStructure.temp_high] ==
			null ? DASH_VALUE : sensorData[dataStructure.temp_high_ts] + tzOffset;
		var lowTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_low];
		var lowTempHat = bOutdatedData || sensorData[dataStructure.temp_low] ==
			null ? DASH_VALUE : sensorData[dataStructure.temp_low_ts] + tzOffset;

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'>Daily Lows</th><th class='short'></th><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td>";
		//Current
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, avgTemp, wl.data
			.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		//Daily Highs
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, highTemp, wl
			.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(highTempHat) + "</td>";
		//Daily Lows
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, lowTemp, wl.data
			.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(lowTempHat) + "</td>";
		html += "</tr>";
		html += "</tbody></table>";
		return html
	};

	/*
	 * Pressure Switch
	 * DataStructure 47
	 */
	this.buildPressureSwitch = function(oLogicalSensor) {

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType47FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var switchState = sensorData[dataStructure.switch_state];

		//Calcualte last transition time
		var formattedLastTransitionAmount = _calcFormatLastTransitionTime(
			sensorData[dataStructure.last_transition_ts]);

		//Determine the switch state as text
		var state = (switchState === wl.constants.pressure_flow_state.on ||
				switchState === wl.constants.pressure_flow_state.off_to_on) ? 'ON' :
			'OFF';
		var html = "<table class=\"table table-short\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName +
			"</th><th data-l10n-id='total_state_time' data-l10n-args='{\"state\": \"" +
			state +
			"\"}'></th><th data-l10n-id='state'></th><th></th><th class='short light'></th><th class='last-and-long light'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		if (bOutdatedData) {
			state = DASH_VALUE;
			formattedLastTransitionAmount = DASH_VALUE;
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_pressure_switch'></td><td>" +
			formattedLastTransitionAmount + "</td><td>" + state + "</td></td></tr>";
		html += "</tbody></table>";
		return html;
	};

	/*
	 * Pressure Sensor
	 * DataStructure 49
	 */
	this.buildPressureSensor = function(oLogicalSensor) {
		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType49FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var switchState = sensorData[dataStructure.switch_state];
		var current = sensorData[dataStructure.current_pressure];

		//Calcualte last transition time
		var formattedLastTransitionAmount = _calcFormatLastTransitionTime(
			sensorData[dataStructure.last_transition_ts]);

		//Determine the switch state as text
		var state = (switchState === wl.constants.pressure_flow_state.on ||
				switchState === wl.constants.pressure_flow_state.off_to_on) ? 'ON' :
			'OFF';
		var currentWithLabel = Utils.formatSensorReadingWithUnit("Pressure",
			current, wl.data.userAccountSetting, wl.data.unitLabelPressure);

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName +
			"</th><th data-l10n-id='total_state_time' data-l10n-args='{\"state\": \"" +
			state +
			"\"}'></th><th data-l10n-id='state'></th><th data-l10n-id='Current'></th><th class='short'></th><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		if (bOutdatedData) {
			state = DASH_VALUE;
			currentWithLabel = DASH_VALUE;
			formattedLastTransitionAmount = DASH_VALUE;
		}

		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_pressure'></td><td>" +
			formattedLastTransitionAmount + "</td>" +
			"<td>" + state + "</td><td>" + currentWithLabel + "</td></td></tr>";
		html += "</tbody></table>";
		return html;

	};

	/*
	 * Fluid Sensor
	 * DataStructure 50
	 */
	this.buildFluidSensor = function(oLogicalSensor) {

		var labelPressure = "Pressure";
		var labelDepth = "Depth";

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType50FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var fluidPressure = sensorData[dataStructure.fluid_pressure];
		var fluidDepth = sensorData[dataStructure.fluid_depth];

		var pressureUnit = wl.data.unitLabelPressure;
		var fluidUnit = Utils.getAccountWaterDepthUnit(wl.data.userAccountSetting.unitsWaterDepthTypeId);

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName +
			"</th><th data-l10n-id='fluid_pressure'></th><th data-l10n-id='fluid_depth'></th><th></th><th class='short light'></th><th class='last-and-long light'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		if (bOutdatedData) {
			fluidPressure = DASH_VALUE;
			fluidDepth = DASH_VALUE;
		}

		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_fluid'></td><td>" +
			Utils.formatSensorReadingWithUnit(labelPressure, fluidPressure, wl.data.userAccountSetting,
				pressureUnit) + "</td>" +
			"<td>" + Utils.formatSensorReadingWithUnit(labelDepth, fluidDepth, wl.data
				.userAccountSetting, fluidUnit) + "</td></td></tr>";
		html += "</tbody></table>";
		return html;

	};

	/*
	 * Flow Meter
	 * DataStructure 51
	 */
	this.buildFlowMeter = function(oLogicalSensor) {

		var userAccountSetting = wl.data.userAccountSetting;
		var unitLabelFlow = Utils.getAccountFlowUnit(userAccountSetting.unitsFlowTypeId);
		var flowRateTypeId = userAccountSetting.unitsFlowRateTypeId;

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType51FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var flowState = sensorData[dataStructure.flow_state];
		var totalFlowData = _.findWhere(wl.data.totalFlowData, {
			iLogicalSensorId: oLogicalSensor.logicalSensorId
		});

		var formattedLastTransitionAmount = DASH_VALUE;
		var state = DASH_VALUE;
		var flowRate = DASH_VALUE;
		var totalDay = DASH_VALUE;
		var totalMonth = DASH_VALUE;
		var totalYear = DASH_VALUE;
		var timeRate = flowRateTypeId === 1 ? "hour" : "min";
		var GT_ZERO_LABEL = "> 0 " + unitLabelFlow;

		if (totalFlowData && !bOutdatedData) {
			flowRate = totalFlowData.flowRatePerMin.convertedVal;
			flowRate = flowRateTypeId === 1 ? flowRate * 60 : flowRate;
			if (flowRate > 0 && flowRate < 0.1) {
				flowRate = GT_ZERO_LABEL + "/" + timeRate;
			} else {
				flowRate = Utils.abbreviateNumber(flowRate, userAccountSetting) + " " +
					unitLabelFlow + "/" + timeRate;
			}

			totalDay = totalFlowData.totalForDay.convertedVal;
			if (totalDay > 0 && totalDay < 0.1) {
				totalDay = GT_ZERO_LABEL;
			} else {
				totalDay = Utils.abbreviateNumber(totalDay, userAccountSetting) + " " +
					unitLabelFlow;
			}

			totalMonth = totalFlowData.totalForMonth.convertedVal;
			if (totalMonth > 0 && totalMonth < 0.1) {
				totalMonth = GT_ZERO_LABEL;
			} else {
				totalMonth = Utils.abbreviateNumber(totalMonth, userAccountSetting) +
					" " + unitLabelFlow;
			}

			totalYear = totalFlowData.totalForYear.convertedVal;
			if (totalYear > 0 && totalYear < 0.1) {
				totalYear = GT_ZERO_LABEL;
			} else {
				totalYear = Utils.abbreviateNumber(totalYear, userAccountSetting) + " " +
					unitLabelFlow;
			}
		}

		if (!bOutdatedData) {
			//Calculate last transition time
			formattedLastTransitionAmount = _calcFormatLastTransitionTime(
				sensorData[dataStructure.last_transition_ts]);

			//Determine the switch state as text
			state = (flowState === wl.constants.pressure_flow_state.on || flowState ===
				wl.constants.pressure_flow_state.off_to_on) ? 'ON' : 'OFF';
		}

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName +
			"</th><th data-l10n-id='total_state_time' data-l10n-args='{\"state\": \"" +
			state + "\"}'></th>" +
			"<th data-l10n-id='state'></th><th data-l10n-id='rate'></th><th class='short'></th><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}

		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_51'></td><td>" +
			formattedLastTransitionAmount + "</td>" +
			"<td>" + state + "</td><td>" + flowRate +
			"</td></td></tr></tbody></table>";
		html +=
			"<table class=\"table\"><thead><tr><th class=\"transparent\"></th><th data-l10n-id='day'></th>" +
			"<th data-l10n-id='month'></th><th data-l10n-id='year'></th><th class='short'></th><th class='last-and-long'></th></tr></thead>";
		html +=
			"<tbody><tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_51_flow_totals'></td><td>" +
			totalDay + "</td>" +
			"<td>" + totalMonth + "</td><td>" + totalYear +
			"</td></td></tr></tbody></table>";
		return html;
	};

	/*
	 * Davis Water Analyzer Sensor [Temp, EC]
	 * DataStucture 55
	 */
	this.buildWaterAnalyzerSensor = function(oLogicalSensor) {
		var labelTemp = "Temperature";
		var labelEc = "EC";

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType55FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var curTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp];
		var curEc = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.salinity];

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th></th><th class='dark'></th><th class='short dark'></th><th class='last-and-long dark'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td>";
		//Current Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curTemp, wl.data
			.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<tr><td data-l10n-id='sensor_soil_ec'></td>";
		//Current EC
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelEc, curEc, wl.data
			.userAccountSetting, 'dS/m') + "</td></tr>";
		html += "</tbody></table>";
		return html
	};
	
	/*
	 * Decagon/Meter Depth Sensor (Depth, Temp, EC)
	 * DataStucture 56
	 */
  this.buildDecagonDepthMeterSensor = function (oLogicalSensor) {
    var unitLabelDepth = Utils.getAccountWaterDepthUnit(wl.data.userAccountSetting
      .unitsWaterDepthTypeId);
    var unitLabelEC = 'dS/m';

    var portClass = "icon-" + oLogicalSensor.portNum;
    var tzOffset = Utils.getSensorOffset(oLogicalSensor);
    var iHat = Utils.getSensorHat(oLogicalSensor);
    var sensorLastUpdated = iHat + tzOffset;
    var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

    //Use the correct data structure mapping to get the data
    var dataStructure = wl.constants.structureType56FieldName;
    var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
      dataStructure);

    //Set data based on data structure
    var depth = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.depth];
    var temp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp];
    var ec = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.ec];
    var depth_high = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.depth_high];
    var depth_high_ts = bOutdatedData || sensorData[dataStructure.depth_high] ==
    null ? DASH_VALUE : sensorData[dataStructure.depth_high_at] +
      tzOffset;
    var depth_low = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.depth_low];
    var depth_low_ts = bOutdatedData || sensorData[dataStructure.depth_low] ==
    null ? DASH_VALUE : sensorData[dataStructure.depth_low_at] +
      tzOffset;
    var temp_high = bOutdatedData ? DASH_VALUE : sensorData[
      dataStructure.temp_high];
    var temp_high_ts = bOutdatedData || sensorData[dataStructure.temp_high] ==
    null ? DASH_VALUE : sensorData[dataStructure.temp_high_at] +
      tzOffset;
    var temp_low = bOutdatedData ? DASH_VALUE : sensorData[
      dataStructure.temp_low];
    var temp_low_ts = bOutdatedData || sensorData[dataStructure.temp_low] ==
    null ? DASH_VALUE : sensorData[dataStructure.temp_low_at] +
      tzOffset;
    var ec_high = bOutdatedData ? DASH_VALUE : sensorData[
      dataStructure.ec_high];
    var ec_high_ts = bOutdatedData || sensorData[dataStructure.ec_high] ==
    null ? DASH_VALUE : sensorData[dataStructure.ec_high_at] +
      tzOffset;
    var ec_low = bOutdatedData ? DASH_VALUE : sensorData[
      dataStructure.ec_low];
    var ec_low_ts = bOutdatedData || sensorData[dataStructure.ec_low] ==
    null ? DASH_VALUE : sensorData[dataStructure.ec_low_at] +
      tzOffset;

    var html = "<table class=\"table\">";
    html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
      oLogicalSensor.productName + "</th>";
    html +=
      "<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short'></th><th class='last-and-long'>";
    if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
      html +=
        "<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
        this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
    }
    html += "</th></tr></thead>";
    html += "<tbody>";
    //Depth
    html +=
      "<tr><td class=\"tableCell\" data-l10n-id='fluid_depth'></td><td>" +
      Utils.formatSensorReadingWithUnit("Depth", depth, wl.data.userAccountSetting,
        unitLabelDepth) + "</td>";
    html += "<td>" + Utils.formatSensorReadingWithUnit("Depth",
        depth_high, wl.data.userAccountSetting, unitLabelDepth
      ) + "</td><td>" + this.formatTime(depth_high_ts) + "</td>";
    html += "<td>" + Utils.formatSensorReadingWithUnit("Depth",
        depth_low, wl.data.userAccountSetting, unitLabelDepth
      ) + "</td><td>" + this.formatTime(depth_low_ts) + "</td>";
    html += "</tr>";

    //Temp
    html +=
      "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td><td>" +
      Utils.formatSensorReadingWithUnit("Temperature", temp, wl.data.userAccountSetting,
        wl.data.unitLabelTemperature) + "</td>";
    html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature",
        temp_high, wl.data.userAccountSetting, wl.data.unitLabelTemperature
      ) + "</td><td>" + this.formatTime(temp_high_ts) + "</td>";
    html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature",
        temp_low, wl.data.userAccountSetting, wl.data.unitLabelTemperature
      ) + "</td><td>" + this.formatTime(temp_low_ts) + "</td>";
    html += "</tr>";

    //EC
    html +=
      "<tr><td class=\"tableCell\" data-l10n-id='ec'></td><td>" +
      Utils.formatSensorReadingWithUnit("EC", ec, wl.data.userAccountSetting,
        unitLabelEC) + "</td>";
    html += "<td>" + Utils.formatSensorReadingWithUnit("EC",
        ec_high, wl.data.userAccountSetting, unitLabelEC
      ) + "</td><td>" + this.formatTime(ec_high_ts) + "</td>";
    html += "<td>" + Utils.formatSensorReadingWithUnit("EC",
        ec_low, wl.data.userAccountSetting, unitLabelEC
      ) + "</td><td>" + this.formatTime(ec_low_ts) + "</td>";
    html += "</tr>";
    html += "</tbody></table>";
    return html;
  };

	/*
	 * PAR Sensor [PAR, DLI]
	 * DataStructure 59
	 */
	this.buildPARSensor = function(oLogicalSensor) {
		var unitLabelPAR = Utils.getAccountUnitsByDataName(wl.data.userAccountSetting,
			'PAR');
		var unitLabelDLI = Utils.getAccountUnitsByDataName(wl.data.userAccountSetting,
			'DLI');

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType59FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var par = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.par_avg];
		var par_high = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.par_high];
		var par_high_at = bOutdatedData || sensorData[dataStructure.par_high_at] ==
			null ? DASH_VALUE : sensorData[dataStructure.par_high_at] +
			tzOffset;
		var par_low = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.par_low];
		var par_low_at = bOutdatedData || sensorData[dataStructure.par_low_at] ==
			null ? DASH_VALUE : sensorData[dataStructure.par_low_at] +
			tzOffset;

		var dli_day = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.dli_day];

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short'></th><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_59_PAR'></td><td>" +
			Utils.formatSensorReadingWithUnit("PAR", par, wl.data.userAccountSetting,
				unitLabelPAR) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("PAR", par_high, wl.data
				.userAccountSetting, unitLabelPAR) + "</td>" +
			"<td>" + this.formatTime(par_high_at) +
			"</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("PAR", par_low,
				wl.data.userAccountSetting, unitLabelPAR) + "</td><td>" + this.formatTime(
				par_low_at) +
			"</td>";
		html += "</tr>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_59_DLI'></td><td>" +
			Utils.formatSensorReadingWithUnit("DLI", dli_day, wl.data.userAccountSetting,
				unitLabelDLI) + "</td>";
		html += "<td></td><td></td><td></td><td></td></tr>";
		html += "</tbody></table>";
		return html;
	}

	/*
	 * CO2 Sensor
	 * DataStructure 63
	 */
	this.buildCO2Sensor = function(oLogicalSensor) {
		var unitLabelCO2 = 'ppm';

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType63FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var co2 = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.co2_avg];
		var co2_high = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.co2_high];
		var co2_high_at = bOutdatedData || sensorData[dataStructure.co2_high_at] ==
			null ? DASH_VALUE : sensorData[dataStructure.co2_high_at] +
			tzOffset;
		var co2_low = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.co2_low];
		var co2_low_at = bOutdatedData || sensorData[dataStructure.co2_low_at] ==
			null ? DASH_VALUE : sensorData[dataStructure.co2_low_at] +
			tzOffset;

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short'></th><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_63_co2'></td><td>" +
			Utils.formatSensorReadingWithUnit("CO2", co2, wl.data.userAccountSetting,
				unitLabelCO2) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("CO2", co2_high, wl.data
				.userAccountSetting, unitLabelCO2) + "</td>" +
			"<td>" + this.formatTime(co2_high_at) +
			"</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("CO2", co2_low,
				wl.data.userAccountSetting, unitLabelCO2) + "</td><td>" + this.formatTime(
				co2_low_at) +
			"</td>";
		html += "</tr></tbody></table>";
		return html;
	}

	/*
	 * Load Sensor
	 * DataStructure 64
	 */
	this.buildLoadSensor = function(oLogicalSensor) {
		//temp
		var unitLabelLoad = Utils.getAccountUnitsByDataName(wl.data.userAccountSetting,
			'Weight');

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType64FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var load = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.load];

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\"></th><th colspan=\"2\"></th><th class='short'></th><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_64_load'></td><td>" +
			Utils.formatSensorReadingWithUnit("Load", load, wl.data.userAccountSetting,
				unitLabelLoad) + "</td>";
		html += "</tr></tbody></table>";
		return html;
	}

	/**
	 * Air Quality Sensor
	 * DataStructure 65
	 */
	this.buildAirQualitySensor = function(sensorContainerData, lsid, nodeName) {
		
		if (!sensorContainerData[lsid]) {
			//detect if this the only shared inside aqs on the system
			if (_.size(sensorContainerData) === 0 && !wl.data.isOwner 
					&& wl.data.maiaSensorData == null && wl.data.stationData == null) {
				$('.nav-secondary .view-options').hide();
			}
			
			var html = "";
			html += "<div class='wl-table'>";
			html += "<div class='wl-table-title'>";
			html += "<h3 id='" + nodeName.replace(/[^a-zA-Z0-9_]/g, '-').toLowerCase() +
				"'>" + nodeName + "</h3>";

			html += "</div><table class=\"table\">";
			html += "<thead><tr><th style='background:white' data-l10n-id='no_public_sensor_data'></th></tr></thead>";
			html += "<tbody></table></div>";
			return html;
		};
		
  	var iHat = wl.data.aqsSensorData[lsid].additionalData.lastUpdated;
  	var timezone = wl.data.aqsSensorData[lsid].additionalData.tz;
  	var tzOffset = dayjs().tz(timezone).utcOffset()*60;
		var sensorLastUpdated = iHat + tzOffset;
		var unitLabel = Utils.getAccountUnitsByDataName(wl.data.userAccountSetting, "AQS");
		var pmLabel = "Particulate Matter";
		var bOutdatedData;
		var aqiId = wl.data.userAccountSetting.airQualitySchemeId;
		var airQualityLangKey = 'air_quality';
		var aqiLangKey = 'aqi';
		var isOutdoor = true;

		if (wl.data.aqsSensorData[lsid].additionalData.AQ_ENVIRONMENT ===
			"Indoors") {
			isOutdoor = false;
			airQualityLangKey += '_indoors';
			aqiLangKey += '_indoors';
		}

		bOutdatedData = oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.outdatedDataBufferSec);
    var env = Utils.getAqsEnvironmentByLsid(lsid);
		var sensorData = Utils.getAqsMappedSensorData(wl.constants.structureType65sensorDataName,
			Utils.getCurrentHighLowAggregatedValues(lsid), env);

		var aqi = bOutdatedData || !sensorData['aqi'] ? DASH_VALUE : sensorData[
			'aqi'].calculatedRisk;
		var aqi_high = bOutdatedData || !sensorData['aqi_high'] ? DASH_VALUE :
			sensorData['aqi_high'].calculatedRisk;
		var aqi_high_ts = bOutdatedData || !sensorData['aqi_high'] ? DASH_VALUE :
			sensorData['pm_25_high_ts'] + tzOffset;

		var aqi_one_hour = bOutdatedData || !sensorData['aqi_one_hour'] ?
			DASH_VALUE : sensorData['aqi_one_hour'].calculatedRisk;
		var nowcast = bOutdatedData || !sensorData['now_cast'] ? DASH_VALUE :
			sensorData['now_cast'].calculatedRisk;
		var aqi_3_hour = bOutdatedData || !sensorData['aqi_3_hour'] ? DASH_VALUE :
			sensorData['aqi_3_hour'].calculatedRisk;
		var aqi_24_hour = bOutdatedData || !sensorData['aqi_24_hour'] ? DASH_VALUE :
			sensorData['aqi_24_hour'].calculatedRisk;

		var pm_1 = bOutdatedData ? DASH_VALUE : sensorData['pm_1'];
		var pm_1_high = bOutdatedData ? DASH_VALUE : sensorData['pm_1_high'];
		var pm_1_high_ts = bOutdatedData || sensorData['pm_1_high'] == null ?
			DASH_VALUE :
			sensorData['pm_1_high_ts'] + tzOffset;

		var pm_25 = bOutdatedData ? DASH_VALUE : sensorData['pm_25'];
		var pm_25_high = bOutdatedData ? DASH_VALUE : sensorData['pm_25_high'];
		var pm_25_high_ts = bOutdatedData || sensorData['pm_25_high'] == null ?
			DASH_VALUE :
			sensorData['pm_25_high_ts'] + tzOffset;

		var pm_10 = bOutdatedData ? DASH_VALUE : sensorData['pm_10'];
		var pm_10_high = bOutdatedData ? DASH_VALUE : sensorData['pm_10_high'];
		var pm_10_high_ts = bOutdatedData || sensorData['pm_10_high'] == null ?
			DASH_VALUE :
			sensorData['pm_10_high_ts'] + tzOffset;

		var temp = bOutdatedData ? DASH_VALUE : sensorData['temp'];
		var temp_high = bOutdatedData ? DASH_VALUE : sensorData['temp_high'];
		var temp_high_ts = bOutdatedData || sensorData['temp_high'] == null ?
			DASH_VALUE :
			sensorData['temp_high_ts'] + tzOffset;
		var temp_low = bOutdatedData ? DASH_VALUE : sensorData['temp_low'];
		var temp_low_ts = bOutdatedData || sensorData['temp_low'] == null ?
			DASH_VALUE :
			sensorData['temp_low_ts'] + tzOffset;

		var hum = bOutdatedData ? DASH_VALUE : sensorData['hum'];
		var hum_high = bOutdatedData ? DASH_VALUE : sensorData['hum_high'];
		var hum_high_ts = bOutdatedData || sensorData['hum_high'] == null ?
			DASH_VALUE :
			sensorData['hum_high_ts'] + tzOffset;
		var hum_low = bOutdatedData ? DASH_VALUE : sensorData['hum_low'];
		var hum_low_ts = bOutdatedData || sensorData['hum_low'] == null ?
			DASH_VALUE :
			sensorData['hum_low_ts'] + tzOffset;

		var heat_index = bOutdatedData ? DASH_VALUE : sensorData['heat_index'];
		var heat_index_high = bOutdatedData ? DASH_VALUE : sensorData[
			'heat_index_high'];
		var heat_index_high_ts = bOutdatedData || sensorData['heat_index_high'] ==
			null ? DASH_VALUE :
			sensorData['heat_index_high_ts'] + tzOffset;

		var dew_point = bOutdatedData ? DASH_VALUE : sensorData['dew_point'];
		var dew_point_high = bOutdatedData ? DASH_VALUE : sensorData[
			'dew_point_high'];
		var dew_point_high_ts = bOutdatedData || sensorData['dew_point_high'] ==
			null ? DASH_VALUE :
			sensorData['dew_point_high_ts'] + tzOffset;
		var dew_point_low = bOutdatedData ? DASH_VALUE : sensorData[
			'dew_point_low'];
		var dew_point_low_ts = bOutdatedData || sensorData['dew_point_low'] ==
			null ? DASH_VALUE :
			sensorData['dew_point_low_ts'] + tzOffset;

		var wet_bulb = bOutdatedData ? DASH_VALUE : sensorData['wet_bulb'];
		var wet_bulb_low = bOutdatedData ? DASH_VALUE : sensorData['wet_bulb_low'];
		var wet_bulb_low_ts = bOutdatedData || sensorData['wet_bulb_low'] == null ?
			DASH_VALUE :
			sensorData['wet_bulb_low_ts'] + tzOffset;

		var html = "";
		html += "<div class='wl-table'>";
		html += "<div class='wl-table-title'>";
		html += "<h3 id='" + nodeName.replace(/[^a-zA-Z0-9_]/g, '-').toLowerCase() +
			"'>" + nodeName + "</h3>";

		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<span class='info pull-right too-old' data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></span>";
		}
		html += "</div>";
		html += "<table class=\"table\">";
		html += "<thead><tr><th data-l10n-id='" + airQualityLangKey + "'></th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" " +
			"data-l10n-id='daily_lows'></th><th class='short'></th><th class='last-and-long'></th></tr></thead>";
		html += "<tbody>";

		// AQI
		html += "<tr><td class=\"tableCell\" data-l10n-id='aqi'></td><td>" +
			Utils.formatSensorReading("AQI", aqi, wl.data.userAccountSetting) +
			"</td>";
		html += "<td>" + Utils.formatSensorReading("AQI", aqi_high, wl.data.userAccountSetting) +
			"</td>" +
			"<td>" + this.formatTime(aqi_high_ts) + "</td><td></td><td></td></tr>";

		// PM 1.0
		html += "<tr><td class=\"tableCell\">PM 1.0</td><td>" +
			Utils.formatSensorReadingWithUnit(pmLabel, pm_1, wl.data.userAccountSetting,
				unitLabel) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(pmLabel, pm_1_high, wl.data
				.userAccountSetting, unitLabel) + "</td>" +
			"<td>" + this.formatTime(pm_1_high_ts) + "</td><td></td><td></td></tr>";

		// PM 2.5
		html += "<tr><td class=\"tableCell\">PM 2.5</td><td>" +
			Utils.formatSensorReadingWithUnit(pmLabel, pm_25, wl.data.userAccountSetting,
				unitLabel) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(pmLabel, pm_25_high, wl.data
				.userAccountSetting, unitLabel) + "</td>" +
			"<td>" + this.formatTime(pm_25_high_ts) + "</td><td></td><td></td></tr>";

		// PM 10
		html += "<tr><td class=\"tableCell\">PM 10</td><td>" +
			Utils.formatSensorReadingWithUnit(pmLabel, pm_10, wl.data.userAccountSetting,
				unitLabel) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(pmLabel, pm_10_high, wl.data
				.userAccountSetting, unitLabel) + "</td>" +
			"<td>" + this.formatTime(pm_10_high_ts) + "</td><td></td><td></td></tr>";

		// Temperature
		html += "<tr><td class=\"tableCell\" data-l10n-id='temperature'></td><td>" +
			Utils.formatSensorReadingWithUnit("Temperature", temp, wl.data.userAccountSetting,
				wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature",
				temp_high, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
			"</td>" +
			"<td>" + this.formatTime(temp_high_ts) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature", temp_low,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>" +
			"<td>" + this.formatTime(temp_low_ts) + "</td></tr>";

		// Humidity
		html += "<tr><td class=\"tableCell\" data-l10n-id='hum'></td><td>" +
			Utils.formatSensorReadingWithUnit("Humidity", hum, wl.data.userAccountSetting,
				wl.data.unitLabelPercent) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("Humidity", hum_high,
				wl.data.userAccountSetting, wl.data.unitLabelPercent) + "</td>" +
			"<td>" + this.formatTime(hum_high_ts) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("Humidity", hum_low, wl
				.data.userAccountSetting, wl.data.unitLabelPercent) + "</td>" +
			"<td>" + this.formatTime(hum_low_ts) + "</td></tr>";

		// Heat Index
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_heat'></td><td>" +
			Utils.formatSensorReadingWithUnit("Temperature", heat_index, wl.data.userAccountSetting,
				wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature",
				heat_index_high, wl.data.userAccountSetting, wl.data.unitLabelTemperature
			) + "</td>" +
			"<td>" + this.formatTime(heat_index_high_ts) +
			"</td><td></td><td></td></tr>";

		if (isOutdoor) {
			// Dew Point
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_dew'></td><td>" +
				Utils.formatSensorReadingWithUnit("Temperature", dew_point, wl.data.userAccountSetting,
					wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature",
					dew_point_high, wl.data.userAccountSetting, wl.data.unitLabelTemperature
				) + "</td>" +
				"<td>" + this.formatTime(dew_point_high_ts) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature",
					dew_point_low, wl.data.userAccountSetting, wl.data.unitLabelTemperature
				) + "</td>" +
				"<td>" + this.formatTime(dew_point_low_ts) + "</td></tr>";

			// Wet Bulb
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_wet_bulb'></td><td>" +
				Utils.formatSensorReadingWithUnit("Temperature", wet_bulb, wl.data.userAccountSetting,
					wl.data.unitLabelTemperature) + "</td><td></td><td></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature",
					wet_bulb_low, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
				"</td>" +
				"<td>" + this.formatTime(wet_bulb_low_ts) + "</td></tr>";
		}

		html += "</tbody></table>";
		html += "<table class=\"table\">";
		html += "<thead><tr><th data-l10n-id='" + aqiLangKey + "'></th>";
		html +=
			"<th data-l10n-id='hour_1' style='text-transform:capitalize'></th>";
		if (aqiId === wl.constants.canadaAqiId) {
			html +=
				"<th data-l10n-id='hour_3' style='text-transform:capitalize'></th>";
		} else {
			html +=
				"<th data-l10n-id='nowcast' style='text-transform:capitalize'></th>";
		}
		html +=
			"<th data-l10n-id='hour_24' style='text-transform:capitalize'></th><th class='short transparent'>" +
			"</th><th class='last-and-long transparent'></th></tr></thead>";
		html += "<tbody>";
		// AQI
		html += "<tr><td class=\"tableCell\" data-l10n-id='avg_aqi'></td><td>" +
			Utils.formatSensorReading("AQI", aqi_one_hour, wl.data.userAccountSetting) +
			"</td>";
		if (aqiId === wl.constants.canadaAqiId) {
			html += "<td>" + Utils.formatSensorReading("AQI", aqi_3_hour, wl.data.userAccountSetting) +
				"</td>";
		} else {
			html += "<td>" + Utils.formatSensorReading("AQI", nowcast, wl.data.userAccountSetting) +
				"</td>";
		}
		html += "<td>" + Utils.formatSensorReading("AQI", aqi_24_hour, wl.data.userAccountSetting) +
			"</td></tr>";
		html += "</tbody></table></div>";
		return html;
	}

	/*
	 * Judd Depth Sensor [Depth, Temp]
	 * DataStructure 66
	 */
	this.buildJuddDepth66 = function(oLogicalSensor) {
		var unitLabelDepth = Utils.getAccountWaterDepthUnit(wl.data.userAccountSetting
			.unitsWaterDepthTypeId);

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType66FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var depth = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.depth];
		var temp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp];
		var depth_high = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.depth_high];
		var depth_high_ts = bOutdatedData || sensorData[dataStructure.depth_high] ==
			null ? DASH_VALUE : sensorData[dataStructure.depth_high_at] +
			tzOffset;
		var depth_low = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.depth_low];
		var depth_low_ts = bOutdatedData || sensorData[dataStructure.depth_low] ==
			null ? DASH_VALUE : sensorData[dataStructure.depth_low_at] +
			tzOffset;
		var temp_high = bOutdatedData ? DASH_VALUE : sensorData[
			dataStructure.temp_high];
		var temp_high_ts = bOutdatedData || sensorData[dataStructure.temp_high] ==
			null ? DASH_VALUE : sensorData[dataStructure.temp_high_at] +
			tzOffset;
		var temp_low = bOutdatedData ? DASH_VALUE : sensorData[
			dataStructure.temp_low];
		var temp_low_ts = bOutdatedData || sensorData[dataStructure.temp_low] ==
			null ? DASH_VALUE : sensorData[dataStructure.temp_low_at] +
			tzOffset;

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short'></th><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		//Depth
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='fluid_depth'></td><td>" +
			Utils.formatSensorReadingWithUnit("Depth", depth, wl.data.userAccountSetting,
				unitLabelDepth) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("Depth",
			depth_high, wl.data.userAccountSetting, unitLabelDepth
		) + "</td><td>" + this.formatTime(depth_high_ts) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("Depth",
			depth_low, wl.data.userAccountSetting, unitLabelDepth
		) + "</td><td>" + this.formatTime(depth_low_ts) + "</td>";
		html += "</tr>";

		//Temp
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td><td>" +
			Utils.formatSensorReadingWithUnit("Temperature", temp, wl.data.userAccountSetting,
				wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature",
			temp_high, wl.data.userAccountSetting, wl.data.unitLabelTemperature
		) + "</td><td>" + this.formatTime(temp_high_ts) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit("Temperature",
			temp_low, wl.data.userAccountSetting, wl.data.unitLabelTemperature
		) + "</td><td>" + this.formatTime(temp_low_ts) + "</td>";
		html += "</tr>";
		html += "</tbody></table>";
		return html;
	};

	
	/*
	 * Surface Sentinel Sensor
	 * DataStructure 75
	 */
	this.buildSurfaceSentinelSensor = function(oLogicalSensor) {
		var labelTemp = "Temperature";
		var labelHum = "Humidity";

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType75FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var highSurfaceTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.surface_temp_hi];
		var highSurfaceTempHat = bOutdatedData || sensorData[dataStructure.surface_temp_hi] ==
		null ? DASH_VALUE : sensorData[dataStructure.surface_temp_hi_ts] + tzOffset;
		var lowSurfaceTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.surface_temp_low];
		var lowSurfaceTempHat = bOutdatedData || sensorData[dataStructure.surface_temp_low] ==
		null ? DASH_VALUE : sensorData[dataStructure.surface_temp_low_ts] + tzOffset;
		var curSurfaceTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.surface_temp];
		var highTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_hi];
		var highTempHat = bOutdatedData || sensorData[dataStructure.temp_hi] ==
		null ? DASH_VALUE : sensorData[dataStructure.temp_hi_ts] + tzOffset;
		var lowTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_low];
		var lowTempHat = bOutdatedData || sensorData[dataStructure.temp_low] ==
		null ? DASH_VALUE : sensorData[dataStructure.temp_low_ts] + tzOffset;
		var curTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp];
		var highHum = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.hum_hi];
		var highHumHat = bOutdatedData || sensorData[dataStructure.hum_hi] ==
		null ? DASH_VALUE : sensorData[dataStructure.hum_hi_ts] + tzOffset;
		var lowHum = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.hum_low];
		var lowHumHat = bOutdatedData || sensorData[dataStructure.hum_low] == null ?
			DASH_VALUE : sensorData[dataStructure.hum_low_ts] + tzOffset;
		var curHum = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.hum];

		var highDewPoint = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.dew_point_hi];
		var highDewPointHat = bOutdatedData || sensorData[dataStructure.dew_point_hi] ==
		null ? DASH_VALUE : sensorData[dataStructure.dew_point_hi_ts] +
			tzOffset;
		var lowDewPoint = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.dew_point_low];
		var lowDewPointHat = bOutdatedData || sensorData[dataStructure.dew_point_low] ==
		null ?
			DASH_VALUE : sensorData[dataStructure.dew_point_low_ts] + tzOffset;
		var curDewPoint = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.dew_point];

		var lowWetBulb = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.wet_bulb_low];
		var lowWetBulbHat = bOutdatedData || sensorData[dataStructure.wet_bulb_low] ==
		null ? DASH_VALUE : sensorData[dataStructure.wet_bulb_low_ts] + tzOffset;
		var curWetBulb = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.wet_bulb];

		var highSpread = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.spread_hi];
		var highSpreadHat = bOutdatedData || sensorData[dataStructure.spread_hi] ==
		null ? DASH_VALUE : sensorData[dataStructure.spread_hi_ts] + tzOffset;
		var lowSpread = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.spread_low];
		var lowSpreadHat = bOutdatedData || sensorData[dataStructure.spread_low] ==
		null ? DASH_VALUE : sensorData[dataStructure.spread_low_ts] + tzOffset;
		var curSpread = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.spread];

		var html = "<table class=\"table\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName + "</th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" " +
			"data-l10n-id='daily_lows'></th><th class='short'><th class='last-and-long'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html += "<tr><td class=\"tableCell\" data-l10n-id='surface_temperature'></td>";
		//Current Surface Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curSurfaceTemp, wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		//High Surface Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, highSurfaceTemp, wl
				.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(highSurfaceTempHat) + "</td>";
		//Low Surface Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, lowSurfaceTemp, wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(lowSurfaceTempHat) + "</td>";
		html += "</td></tr>";
		html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td>";
		//Current Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curTemp, wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		//High Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, highTemp, wl
				.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(highTempHat) + "</td>";
		//Low Temp
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, lowTemp, wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(lowTempHat) + "</td>";
		html += "</td></tr>";
		html += "<tr><td data-l10n-id='sensor_hum'></td>";
		//Current Hum
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelHum, curHum, wl.data
				.userAccountSetting, '%') + "</td>";
		//High Hum
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelHum, highHum, wl.data
				.userAccountSetting, '%') + "</td><td>" + this.formatTime(highHumHat) +
			"</td>";
		//Low Hum
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelHum, lowHum, wl.data
				.userAccountSetting, '%') + "</td><td>" + this.formatTime(lowHumHat) +
			"</td>";
		html += "</td></tr>";

		html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_dew'></td>";
		//Current Dew Point
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curDewPoint,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		//High Dew Point
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, highDewPoint,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(highDewPointHat) + "</td>";
		//Low Dew Point
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, lowDewPoint,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(lowDewPointHat) + "</td>";
		html += "</td></tr>";

		html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_wet_bulb'></td>";
		//Current Wet Bulb
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curWetBulb,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
			"</td><td></td><td></td>";
		//Low Wet Bulb
		html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, lowWetBulb,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
		html += "<td>" + this.formatTime(lowWetBulbHat) + "</td>";
		html += "</td></tr>";

//		html += "<tr><td class=\"tableCell\" data-l10n-id='spread'></td>";
//		//Current Spread
//		html += "<td>" + Utils.formatSensorReadingWithUnit('Temperature', curSpread, wl.data
//				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
//		//High Spread
//		html += "<td>" + Utils.formatSensorReadingWithUnit('Temperature', highSpread, wl
//				.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
//		html += "<td>" + this.formatTime(highSpreadHat) + "</td>";
//		//Low Spread
//		html += "<td>" + Utils.formatSensorReadingWithUnit('Temperature', lowSpread, wl.data
//				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
//		html += "<td>" + this.formatTime(lowSpreadHat) + "</td>";
//		html += "</td></tr>";

		html += "</tbody></table>";
		return html
	};

	/*
	 * Alarm Sensor
	 * DataStructure 76
	 */
	this.buildAlarmSensor = function (oLogicalSensor) {

		var portClass = "icon-" + oLogicalSensor.portNum;
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = wl.constants.structureType76FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		//Set data based on data structure
		var outputState = sensorData[dataStructure.output_state];
		var alarmState = sensorData[dataStructure.alarm_state];
		var controlMode = sensorData[dataStructure.control_mode];

		//Calcualte last transition time
		var formattedOutputLastTransitionAmount = _calcFormatLastTransitionTime(
			sensorData[dataStructure.output_last_transition_ts]);
		var formattedAlarmLastTransitionAmount = _calcFormatLastTransitionTime(
				sensorData[dataStructure.alarm_last_transition_ts]);

		//Determine the switch state as text
		var sOutputState = (outputState === wl.constants.pressure_flow_state.on ||
			outputState === wl.constants.pressure_flow_state.off_to_on) ? '<span data-l10n-id="active"></span>' :
			'<span data-l10n-id="inactive"></span>';
		
		var sAlarmState = (alarmState === wl.constants.pressure_flow_state.on ||
			alarmState === wl.constants.pressure_flow_state.off_to_on) ? '<span data-l10n-id="active"></span>' :
			'<span data-l10n-id="inactive"></span>';
		var html = "<table class=\"table table-short\">";
		html += "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
			oLogicalSensor.productName +
			"</th><th data-l10n-id='total_time'></th><th data-l10n-id='state'></th><th></th><th class='short light'></th><th class='last-and-long light'>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		if (bOutdatedData) {
			outputState = DASH_VALUE;
			alarmState = DASH_VALUE;
			formattedOutputLastTransitionAmount = DASH_VALUE;
			formattedAlarmLastTransitionAmount = DASH_VALUE;
		}
		html += "</th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\"><span data-l10n-id='output_state'></span>";
		html += "</td><td>" +
			formattedOutputLastTransitionAmount + "</td><td>" + sOutputState + "</td></td></tr>";
		
		if (controlMode === 1) {
			html +=
				"<tr><td class=\"tableCell\"><span data-l10n-id='alarm_state'></span>";
			html += "</td><td>" +
				formattedAlarmLastTransitionAmount + "</td><td>" + sAlarmState + "</td></td></tr>";
		}
		if (controlMode === 1) {
			html += "<tr><td class=\"tableCell\"><span data-l10n-id='override'></span></td>";
			html += "<td></td><td data-l10n-id='active'></td></td></tr>";
		}
		html += "</tbody></table>";
		return html;
	};

	/*
	 * Soil Moisture Dynamic[16 ring - Moisture, EC, Temp, Hum]
	 * DataStructure 1000
	 */
	this.buildSoilMoisture1000 = function(oLogicalSensor) {

		var that = this;
		var labelEC = "EC";
		var labelHum = "Humidity";

		var portClass = "icon-" + oLogicalSensor.portNum;
		var unitLabelSoilMoisture = Utils.getAccountSoilUnit(this.getUnitLabelMoisture(
			oLogicalSensor), wl.data.userAccountSetting.unitsSoilMoistureTypeId);
		var unitLabelSalinity = Utils.getAccountEcUnit(this.getUnitLabelSalinity(
			oLogicalSensor));
		var unitLabelTemperature = "Soil Temperature";

		var showMoisture = false,
			showEC = false,
			showTemp = false,
			showHum = false;

		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//Use the correct data structure mapping to get the data
		var dataStructure = oLogicalSensor.productNum == 1001 ? wl.constants.structureType1001FieldName :
			wl.constants.structureType1000FieldName;
		var sensorData = this.getMaiaSensorData(oLogicalSensor.logicalSensorId,
			dataStructure);

		function findRingDepthVal(ringNumber) {
			return oMapper.getRingDepth(oLogicalSensor, dataStructure['soil_moisture_' +
					ringNumber]) ||
				oMapper.getRingDepth(oLogicalSensor, dataStructure['soil_salinity_' +
					ringNumber]) ||
				oMapper.getRingDepth(oLogicalSensor, dataStructure['soil_temperature_' +
					ringNumber]) ||
				oMapper.getRingDepth(oLogicalSensor, dataStructure['humidity_ring' + ringNumber]);
		}

		function getRingObjData() {
			var data = [];
			var ringsNumber = oLogicalSensor.productNum == 1001 ? 35 : 16;

			for (var i = 1; i <= ringsNumber; i++) {
				if (findRingDepthVal(i)) {

					data.push({
						'label': findRingDepthVal(i),
						'moisture': sensorData[dataStructure['soil_moisture_' + i]],
						'ec': sensorData[dataStructure['soil_salinity_' + i]],
						'temp': sensorData[dataStructure['soil_temperature_' + i]],
						'hum': sensorData[dataStructure['humidity_ring_' + i]]
					});
				}
			}
			return data;
		}

		function createTableHead() {
			var html = "<thead><tr><th><i class='port-icon " + portClass + "'></i>" +
				oLogicalSensor.productName + "</th>";
			var thCounter = 1;
			var colorClass = 'dark';

			if (showMoisture) {
				html += "<th data-l10n-id='sensor_soil_moist'></th>";
				thCounter++;
			}
			if (showEC) {
				html += "<th data-l10n-id='sensor_soil_ec'></th>";
				thCounter++;
			}
		
			if (showTemp) {
				html += "<th data-l10n-id='sensor_temp'></th>";
				thCounter++;
			}
			if (showHum) {
				if (thCounter == 4) {
					html += "<th data-l10n-id='sensor_hum'></th>";
				} else {
					html += "<th data-l10n-id='sensor_hum'></th>";
				}
				thCounter++;
			}
			
			
			if (thCounter % 2 != 0) {
				colorClass = 'light';
			}

			if (thCounter < 5) {
				_.times(4 - thCounter, function() {
					html += '<th class="' + colorClass + '"></th>';
				});
				html += "<th class='short " + colorClass + "'></th>";
			}

			html += "<th class='last-and-long " + colorClass + "'>";

			if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
				html +=
					"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
					oMapper.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
			}
			return html += "</th></tr></thead>";
		}

		//get rings data array
		var ringsData = getRingObjData();

		function createTableBody() {
			var html = "<tbody>";
			var tempRing = 1;  //Used to track the temp ring number 
			var humRing = 1;   //Used to track the hum ring number 
			_.forEach(ringsData, function(item, i) {
				html += "<tr><td>" + item.label + "</td>";
				if (showMoisture) {
					if (typeof(item.moisture) == 'undefined') {
						//When there is no data, we don't show anything.
						html += "<td></td>";
					} else if ((item.moisture==0 || item.moisture>0)  && !bOutdatedData) {
						//Javscript wierdless return null >= 0 to be true
						//Allow for 0 values
						html += "<td>" + that.formatSoilMoisture(item.moisture,
						unitLabelSoilMoisture) + "</td>";
					} else {		
						//when data is null or is outdated
						html += "<td>--</td>";
					}
				}
				if (showEC) {
					if (typeof(item.ec) == 'undefined') {
						//When there is no data, we don't show anything.
						html += "<td></td>";
					} else if ((item.ec==0 || item.ec>0)  && !bOutdatedData) {
						//Javscript wierdless return null >= 0 to be true
						//Allow for 0 values
						html += "<td>" + Utils.formatSensorReadingWithUnit(labelEC, item.ec,
							wl.data.userAccountSetting, unitLabelSalinity) + "</td>";
					} else {
						//when data is null or is outdated
						html += "<td>--</td>";
					}
				}
				if (showTemp) {
					if (typeof(item.temp) == 'undefined') {
						//When there is no data, we don't show anything.
						html += "<td></td>";
					} else if ((item.temp==0 || item.temp>-10000)  && !bOutdatedData) {
						html += "<td>Temp " + tempRing + ": " + Utils.formatSensorReadingWithUnit(
							unitLabelTemperature, item.temp, wl.data.userAccountSetting, wl.data
							.unitLabelTemperature) + "</td>";
					} else {
						//when data is null or is outdated
						html += "<td>Temp " + tempRing + ": --</td>";
					}
					tempRing++;
				}
				if (showHum) {
					if (typeof(item.hum) == 'undefined') {
						//When there is no data, we don't show anything.
						html += "<td></td>";
					} else if ((item.hum==0 || item.hum>0)  && !bOutdatedData) {
						//Javscript wierdless return null >= 0 to be true
						//Allow for 0 values
						html += "<td>Hum " + humRing + ": " + Utils.formatSensorReadingWithUnit(labelHum, item.hum,
							wl.data.userAccountSetting, '%') + "</td>";
					} else {
						//when data is null or is outdated
						html += "<td>Hum " + tempRing + ": --</td>";
					}
					humRing++;
				}
			});
			html += "</td></tr></tbody>";
			return html;
		}

		//check what columns to display
		_.forEach(ringsData, function(item) {
			//Sensors will always be soil moisture
			showMoisture = true;
			if (item.ec!=null) {
				showEC = true;
			}
			if (item.temp!=null) {
				showTemp = true;
			}
			if (item.hum!=null) {
				showHum = true;
			}
		});

		var html = "<table class=\"table\">";
		html += createTableHead();
		html += createTableBody();
		html += "</table>";
		return html;
	};


	/*
	 * ISS
	 */
	this.buildIss = function(stationData, stationHilow, oBarData, nodeName) {
		var tempScale = "Temperature";
		var humScale = "Humidity";
		var windScale = "Wind Speed";
		var solarScale = "Solar";
		var uvScale = "UV Index";
		var rainScale = "Rain";
		var etScale = "ET";

		//Loop last recieved timestamp is in UTC
		var tzOffsetSec = wl.data.timezoneOffset * 60;
		var loopHatLocal = null;
		if (wl.data.stationData != null) {
			var loopHatLocal = wl.data.stationData.time_stamp + tzOffsetSec;
			var time = this.formatHappenedAtDateTime(wl.data.stationData.time_stamp,
				tzOffsetSec);
		}
		var systemData = this.prepareSystemModuleData(stationData, stationHilow);
		var html = "";
		html += "<div class='wl-table'>";
		html += "<div class='wl-table-title'>";
		html += "<h3 id='" + nodeName.replace(/[^a-zA-Z0-9_]/g, '-').toLowerCase() +
			"'>" + nodeName + "</h3>";
		if (wl.data.stationData && oMapper.checkLastUpdatedTime(loopHatLocal, wl.data
				.staleDataBufferSec)) {
			html +=
				"<span class='info pull-right too-old' data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				time + "\" }'></span>";
		}
		html += "</div>";
		html += "<table class=\"table\">";
		html += "<thead><tr><th></th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short transparent'></th><th class='last-and-long transparent'></th></tr></thead>";
		html += "<tbody>";

		if (systemData.bShowTempOut) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dTempOut,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dTempOutHi,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + systemData.sTempOutHiTime + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dTempOutLow,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + systemData.sTempOutLowTime + "</td></td></tr>";
		}

		if (systemData.bShowHumOut) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_hum'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(humScale, systemData.iHumOut,
				wl.data.userAccountSetting, '%') + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(humScale, systemData.iHumOutHi,
				wl.data.userAccountSetting, '%') + "</td>";
			html += "<td>" + systemData.sHumOutHiTime + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(humScale, systemData.iHumOutLow,
				wl.data.userAccountSetting, '%') + "</td>";
			html += "<td>" + systemData.sHumOutLowTime + "</td></td></tr>";
		}

		if (systemData.bShowHeatIndex) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_heat'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dHeatIndex,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dHeatIndexHi,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>";
			html += "<td>" + systemData.sHeatIndexHiTime +
				"</td><td></td><td></td></td></tr>";
		}

		if (systemData.bShowTHSWIndex && systemData.dThswIndex != null) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_thsw_index'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dThswIndex,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>" +
				"<td></td><td></td><td></td><td></td></td></tr>";
		}

		if (systemData.bShowTHWIndex && systemData.dThswIndex == null && systemData.dThwIndex != null) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_thw_index'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dThwIndex,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>" +
				"<td></td><td></td><td></td><td></td></td></tr>";
		}

		if (systemData.bShowWindChill) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_chill'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dWindChill,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>";
			html += "<td></td><td></td><td>" + Utils.formatSensorReadingWithUnit(
				tempScale, systemData.dWindChillLow, wl.data.userAccountSetting,
				systemData.sunitLabelTemperature) + "</td>";
			html += "<td>" + systemData.sWindChillLowTime + "</td></td></tr>";
		}

		if (systemData.bShowDewPoint) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_dew'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dDewPoint,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dDewPointHi,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>";
			html += "<td>" + systemData.sDewPointHiTime + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dDewPointLow,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>";
			html += "<td>" + systemData.sDewPointLowTime + "</td></td></tr>";
		}

		if (systemData.bShowWetBulb) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_wet_bulb'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dWetBulb,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>";
			html += "<td></td><td></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.dWetBulbLow,
				wl.data.userAccountSetting, systemData.sunitLabelTemperature) + "</td>";
			html += "<td>" + systemData.sWetBulbLowTime + "</td></td></tr>";
		}

		//Create the Barometer html
		//html +=  this.generateBarometerHtmlSummary(oBarData);

		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_speed'></td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(windScale, systemData.dWindSpeed,
			wl.data.userAccountSetting, systemData.sWindSpeedUnit) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(windScale, systemData.dWindSpeedHi,
			wl.data.userAccountSetting, systemData.sWindSpeedUnit) + "</td>";
		html += "<td>" + systemData.sWindSpeedHiTime +
			"</td><td></td><td></td></td></tr>";

		if (systemData.bShowWindDirection) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_direction'></td>";
			html += "<td>" + systemData.sWindDirection + " " + systemData.iWindDirection +
				"";
			if (systemData.bShowWindDirectionUnit) {
				html += systemData.sWindDirectionUnit;
			}
			html += "</td>";
			html += "<td></td><td></td><td></td><td></td></td></tr>";
		}

		if (systemData.bShowSolarRadAvg) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_solar_rad'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(solarScale, systemData
					.iSolarRad, wl.data.userAccountSetting, systemData.sSolarRadUnit) +
				"</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(solarScale, systemData
					.iSolarRadHi, wl.data.userAccountSetting, systemData.sSolarRadUnit) +
				"</td>";
			html += "<td>" + systemData.sSolarRadHiTime +
				"</td><td></td><td></td></td> </tr>";
		}

		if (systemData.bShowUvIndexAvg) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_uv'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(uvScale, systemData.dUvIndex,
				wl.data.userAccountSetting, systemData.sUvIndexUnit) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(uvScale, systemData.dUvIndexHi,
				wl.data.userAccountSetting, systemData.sUvIndexUnit) + "</td>";
			html += "<td>" + systemData.sUvIndexHiTime +
				"</td><td></td><td></td> </td> </tr>";
		}

		html += "</tbody></table>";
		html += "<table class=\"table table-short\">";
		html += "<thead><tr><th data-l10n-id=\"wind\"></th>";
		html +=
			"<th data-l10n-id='minute' data-l10n-args='{\"amount\": \"2\"}'></th><th data-l10n-id='minute' data-l10n-args='{\"amount\": \"10\"}'>10 Minute</th><th class='transparent'></th><th class='short transparent'></th><th class='last-and-long transparent'></th></tr></thead>";
		html += "<tbody>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_avg_spd'></td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(windScale, systemData.iWindSpeed2Min,
			wl.data.userAccountSetting, systemData.sWindSpeedUnit) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(windScale, systemData.iWindSpeed10Min,
			wl.data.userAccountSetting, systemData.sWindSpeedUnit) + "</td>";
		html += "</td></tr>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_gst_spd'></td>";
		html += "<td></td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(windScale, systemData.iWindGust10Min,
			wl.data.userAccountSetting, systemData.sWindSpeedUnit) + "</td>";
		html += "</td></tr>";

		if (systemData.bShowRain || systemData.bShowLastHourRain || systemData.bShowEt) {
			html += "<table class=\"table\">";
			html += "<thead><tr><th data-l10n-id='rain'></th>";
			html +=
				"<th data-l10n-id='rate'></th><th class='short' data-l10n-id='storm'></th><th class='short' data-l10n-id='day'></th><th class='short' data-l10n-id='month'></th><th class='short' data-l10n-id='year'></th><th class='short transparent'></th><th class='last-and-long transparent'></th></tr></thead>";
			html += "<tbody>";
		}

		if (systemData.bShowRain) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_rain'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, systemData.dRainRate,
					wl.data.userAccountSetting, systemData.sRainUnit) + systemData.sRainRateUnit +
				"</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, systemData.dRainStorm,
				wl.data.userAccountSetting, systemData.sRainUnit) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, systemData.dRainDay,
				wl.data.userAccountSetting, systemData.sRainUnit) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, systemData.dRainMonth,
				wl.data.userAccountSetting, systemData.sRainUnit) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, systemData.dRainYear,
				wl.data.userAccountSetting, systemData.sRainUnit) + "</td></td></tr>";
		}

		if (systemData.bShowLastHourRain) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_last_hour_rain'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, systemData.dRain1Hour,
				wl.data.userAccountSetting, systemData.sRainUnit) + "</td>";
			html += "<td></td><td></td><td></td></td></tr>";
		}

		if (systemData.bShowEt) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_et'>ET</td>";
			html += "<td>&nbsp;</td>";
			html += "<td>&nbsp;</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(etScale, systemData.dEtDay,
				wl.data.userAccountSetting, systemData.sRainUnit) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(etScale, systemData.dEtMonth,
				wl.data.userAccountSetting, systemData.sRainUnit) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(etScale, systemData.dEtYear,
				wl.data.userAccountSetting, systemData.sRainUnit) + "</td></td></tr>";
		}

		if (systemData.bShowTempIn || systemData.bShowHumIn) {
			html += "<table class=\"table\">";
			html +=
				"<thead><tr><th data-l10n-id='sensor_inside'></th><th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short transparent'></th><th class='last-and-long transparent'></th></tr></thead>";
		}

		if (systemData.bShowTempIn) {
			html += "<tr><td data-l10n-id='sensor_temp_in'></td><td>" + Utils.formatSensorReadingWithUnit(
				tempScale, systemData.temp_in, wl.data.userAccountSetting, wl.data.unitLabelTemperature
			) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.temp_in_hi,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + systemData.temp_in_hi_time + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, systemData.temp_in_low,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + systemData.temp_in_low_time + "</td></td></tr>";
		}

		if (systemData.bShowHumIn) {
			html += "<tr><td data-l10n-id='sensor_hum_in'></td><td>" + Utils.formatSensorReadingWithUnit(
				humScale, systemData.hum_in, wl.data.userAccountSetting, '%') + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(humScale, systemData.hum_in_hi,
				wl.data.userAccountSetting, '%') + "</td>";
			html += "<td>" + systemData.hum_in_hi_time + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(humScale, systemData.hum_in_low,
				wl.data.userAccountSetting, '%') + "</td>";
			html += "<td>" + systemData.hum_in_low_time + "</td></td></tr>";
		}

		if (systemData.bShow_extra_temp_1 || systemData.bShow_extra_temp_2 ||
			systemData.bShow_extra_temp_3 || systemData.bShow_extra_temp_4 ||
			systemData.bShow_extra_temp_5 || systemData.bShow_extra_temp_6 ||
			systemData.bShow_extra_temp_7 || systemData.bShow_soil_temp_1 ||
			systemData.bShow_soil_temp_2 || systemData.bShow_soil_temp_3 ||
			systemData.bShow_soil_temp_4 || systemData.bShow_leaf_temp_1 ||
			systemData.bShow_leaf_temp_2 || systemData.bShow_leaf_temp_3 ||
			systemData.bShow_leaf_temp_4 || systemData.bShow_extra_hum_1 ||
			systemData.bShow_extra_hum_2 || systemData.bShow_extra_hum_3 ||
			systemData.bShow_extra_hum_4 || systemData.bShow_extra_hum_5 ||
			systemData.bShow_extra_hum_6 || systemData.bShow_extra_hum_7 ||
			systemData.bShow_soil_moisture_1 || systemData.bShow_soil_moisture_2 ||
			systemData.bShow_soil_moisture_3 || systemData.bShow_soil_moisture_4 ||
			systemData.bShow_leaf_wetness_1 || systemData.bShow_leaf_wetness_2 ||
			systemData.bShow_leaf_wetness_3 || systemData.bShow_leaf_wetness_4) {
			html += "<table class=\"table\">";
		}

		html += "</tbody></table></div>";

		return html
	};

	this.buildIssExtraSensors = function(stationData, stationHilow, nodeName) {

		//Loop last recieved timestamp is in UTC
		var tzOffsetSec = wl.data.timezoneOffset * 60;
		var loopHatLocal = null;
		if (stationData != null) {
			var loopHatLocal = stationData.time_stamp + tzOffsetSec;
			var time = this.formatHappenedAtDateTime(stationData.time_stamp,
				tzOffsetSec);
		}
		var systemData = this.prepareSystemModuleData(stationData, stationHilow);
		var html = "";
		html += "<div class='wl-table'>";
		html += "<div class='wl-table-title'>";
		html += "<h3 id='" + nodeName.replace(/[^a-zA-Z0-9_]/g, '-').toLowerCase() +
			"'>" + nodeName + "</h3>";
		if (wl.data.stationData && oMapper.checkLastUpdatedTime(loopHatLocal, wl.data
				.staleDataBufferSec)) {
			html +=
				"<span class='info pull-right too-old' data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				time + "\" }'></span>";
		}
		html += "</div>";
		if (systemData.bShow_extra_temp_1 || systemData.bShow_extra_temp_2 ||
			systemData.bShow_extra_temp_3 || systemData.bShow_extra_temp_4 ||
			systemData.bShow_extra_temp_5 || systemData.bShow_extra_temp_6 ||
			systemData.bShow_extra_temp_7 || systemData.bShow_soil_temp_1 ||
			systemData.bShow_soil_temp_2 || systemData.bShow_soil_temp_3 ||
			systemData.bShow_soil_temp_4 || systemData.bShow_leaf_temp_1 ||
			systemData.bShow_leaf_temp_2 || systemData.bShow_leaf_temp_3 ||
			systemData.bShow_leaf_temp_4 || systemData.bShow_extra_hum_1 ||
			systemData.bShow_extra_hum_2 || systemData.bShow_extra_hum_3 ||
			systemData.bShow_extra_hum_4 || systemData.bShow_extra_hum_5 ||
			systemData.bShow_extra_hum_6 || systemData.bShow_extra_hum_7 ||
			systemData.bShow_soil_moisture_1 || systemData.bShow_soil_moisture_2 ||
			systemData.bShow_soil_moisture_3 || systemData.bShow_soil_moisture_4 ||
			systemData.bShow_leaf_wetness_1 || systemData.bShow_leaf_wetness_2 ||
			systemData.bShow_leaf_wetness_3 || systemData.bShow_leaf_wetness_4) {

			html += "<table class=\"table\">";
			html +=
				"<thead><tr><th></th><th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short transparent'>" +
				"</th><th class='last-and-long transparent'></th></tr></thead><tbody>";
		}

		var nodeList = _.filter(wl.data.tilePanelData, function(obj) {
			return obj.nodeIconLabel === "es";
		})
		for (var i in nodeList) {
			var sensors = nodeList[i].sensors;
			var tiles = _.get(_.find(sensors, 'tiles'), 'tiles');
			for (var y in tiles) {
				var oPortletConfig = _getPortletConfigByPortletTypeId(tiles[y].portletTypeId);
				if (oPortletConfig != null) {
					var sType = oPortletConfig.get('sType');
					var sPortletTitle = 'portlet_title_' + sType;
					if (systemData['bShow_' + sType]) {
						var scale = systemData[sType].scale;
						switch (scale) {
							case 'Temperature':
								unitLabel = wl.data.unitLabelTemperature;
								break;
							case 'Soil Moisture':
								//Extra sensor soil moisture always report in cb
								unitLabel = Utils.getAccountSoilUnit("cb", wl.data.userAccountSetting
									.unitsSoilMoistureTypeId);
								//Need to add the unit to the scale so that decimal precision can be detected down the line.
								scale = scale + " " + unitLabel;
								break;
							case 'Humidity':
								unitLabel = '%';
								break;
							default:
								unitLabel = '';
						}

						html += "<tr><td data-l10n-id='" + sPortletTitle + "'></td><td>" +
							Utils.formatSensorReadingWithUnit(scale, systemData[sType].current,
								wl.data.userAccountSetting, unitLabel) + "</td>";
						html += "<td>" + Utils.formatSensorReadingWithUnit(scale, systemData[
							sType].high, wl.data.userAccountSetting, unitLabel) + "</td>";
						html += "<td>" + systemData[sType].high_time + "</td>";
						html += "<td>" + Utils.formatSensorReadingWithUnit(scale, systemData[
							sType].low, wl.data.userAccountSetting, unitLabel) + "</td>";
						html += "<td>" + systemData[sType].low_time + "</td></td></tr>";
					}
				}
			}
		}
		html += "</tbody></table>";
		return html;
	}

	this.buildGateway = function(oBarData, nodeName) {

		var time = DASH_VALUE;
		if (wl.data.barometerData != null) {
			var tzOffsetSec = wl.data.barometerData.tzOffsetSec;
			var iHat = wl.data.barometerData.lastUpdatedTs;
			var sensorLastUpdated = iHat + tzOffsetSec;
			time = this.formatHappenedAtDateTime(iHat, tzOffsetSec);
		}

		//temporary
		var html = "";
		html += "<div class='wl-table'>";
		html += "<div class='wl-table-title'>";
		html += "<h3 id='" + nodeName.replace(/[^a-zA-Z0-9_]/g, '-').toLowerCase() +
			"'>" + nodeName + "</h3>";

		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<span class='info pull-right too-old' data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				time + "\" }'></span>";
		}
		html += "</div>";
		html += "<table class=\"table\">";
		html += "<thead><tr><th></th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short'></th><th class='last-and-long'></th></tr></thead>";
		html += "<tbody>";
		html += this.generateBarometerHtmlSummary(oBarData);
		html += "</tbody></table></div>";
		return html;
	}

	/**
	 * WeatherLink Live Default
	 */
	this.buildWLLDefault = function(oBarData, nodeName, gatewayType) {
		var tempIn = DASH_VALUE;
		var humIn = DASH_VALUE;
		var tempInHi = DASH_VALUE
		var labelTemp = "Temperature";
		var labelHum = "Humidity";
		// Console data differs from WLL that we just use 6** instead of 5** in data structure mappings
		var dataStructureStartNum = gatewayType === 'CON' ? '6' : '5';
		if (wl.data.barometerData != null) {
			var tzOffsetSec = wl.data.barometerData.tzOffsetSec;
			var iHat = wl.data.barometerData.lastUpdatedTs;
			var sensorLastUpdated = iHat + tzOffsetSec;
			time = this.formatHappenedAtDateTime(iHat, tzOffsetSec);
		}

		//temporary
		var html = "";
		html += "<div class='wl-table'>";
		html += "<div class='wl-table-title'>";
		html += "<h3 id='" + nodeName.replace(/[^a-zA-Z0-9_]/g, '-').toLowerCase() +
			"'>" + nodeName + "</h3>";

		if (wl.data.barometerData != null && oMapper.checkLastUpdatedTime(
				sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<span class='info pull-right too-old' data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				time + "\" }'></span>";
		}
		html += "</div>";
		html += "<table class=\"table\">";
		html += "<thead><tr><th></th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short'></th><th class='last-and-long'></th></tr></thead>";
		html += "<tbody>";
		html += this.generateBarometerHtmlSummary(oBarData);

		if (wl.data.maiaSensorData != null && wl.data.maiaSensorData.length > 0) {
			for (var i in wl.data.maiaSensorData) {
				var node = wl.data.maiaSensorData[i];

				for (var y in node.logicalSensor) {
					if (String(node.logicalSensor[y].dataStructureTypeId) === dataStructureStartNum + '01') {
						var tzOffset = Utils.getSensorOffset(node.logicalSensor[y]);
						var iHat = Utils.getSensorHat(node.logicalSensor[y]);
						var sensorLastUpdated = iHat + tzOffset;
						var bOutdatedData = this.checkOutdatedData(node.logicalSensor[y].logicalSensorId);
						//Use the correct data structure mapping to get the data
						var dataStructure = wl.constants['structureType' + dataStructureStartNum + '01FieldName'];
						var sensorData = this.getMaiaSensorData(node.logicalSensor[y].logicalSensorId,
							dataStructure);

						//Set data based on data structure
						var curTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp];
						var highTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_high];
						var highTempHat = bOutdatedData || sensorData[dataStructure.temp_high] ==
							null ? DASH_VALUE : sensorData[dataStructure.temp_high__at] +
							tzOffset;
						var lowTemp = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.temp_low];
						var lowTempHat = bOutdatedData || sensorData[dataStructure.temp_low] ==
							null ? DASH_VALUE : sensorData[dataStructure.temp_low__at] + tzOffset;
						var curHum = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.hum];
						var highHum = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.hum_high];
						var highHumHat = bOutdatedData || sensorData[dataStructure.hum_high] ==
							null ? DASH_VALUE : sensorData[dataStructure.hum_high__at] + tzOffset;
						var lowHum = bOutdatedData ? DASH_VALUE : sensorData[dataStructure.hum_low];
						var lowHumHat = bOutdatedData || sensorData[dataStructure.hum_low] ==
							null ? DASH_VALUE : sensorData[dataStructure.hum_low__at] + tzOffset;

						if (wl.data.isOwner) {
							html +=
								"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_in'></td>";
							//Current
							html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, curTemp,
								wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
							//Daily Highs
							html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp,
									highTemp, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
								"</td>";
							html += "<td>" + this.formatTime(highTempHat) + "</td>";
							//Daily Lows
							html += "<td>" + Utils.formatSensorReadingWithUnit(labelTemp, lowTemp,
								wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
							html += "<td>" + this.formatTime(lowTempHat) + "</td></tr>";

							html += "<tr><td data-l10n-id='sensor_hum_in'></td>";
							//Current Hum
							html += "<td>" + Utils.formatSensorReadingWithUnit(labelHum, curHum,
								wl.data.userAccountSetting, '%') + "</td>";
							//High Hum
							html += "<td>" + Utils.formatSensorReadingWithUnit(labelHum, highHum,
								wl.data.userAccountSetting, '%') + "</td><td>" + this.formatTime(
								highHumHat) + "</td>";
							//Low Hum
							html += "<td>" + Utils.formatSensorReadingWithUnit(labelHum, lowHum,
								wl.data.userAccountSetting, '%') + "</td><td>" + this.formatTime(
								lowHumHat) + "</td>";
							html += "</tr>";
						}
					}
				}
			}
		}
		html += "</tbody></table></div>";
		return html;
	}

	/*
	 * WeatherLink Live
	 */
	this.buildWLL = function(logicalSensorId, nodeName, sidebarTiles, gatewayType) {
		var tempScale = "Temperature";
		var humScale = "Humidity";
		var windScale = "Wind Speed";
		var solarScale = "Solar";
		var uvScale = "UV Index";
		var rainScale = "Rain";
		var etScale = "ET";
		// Console data differs from WLL that we just use 6** instead of 5** in data structure mappings
		var dataStructureStartNum = gatewayType === 'CON' ? '6' : '5';

		var unitLabelSoilMoisture = Utils.getAccountSoilUnit(wl.app.Dashboard.getUnitLabelMoisture(
			logicalSensorId), wl.data.userAccountSetting.unitsSoilMoistureTypeId);
		var soilScale = "Soil Moisture " + unitLabelSoilMoisture;
		var tempScale = "Temperature";
		var leafWetnessScale = "Leaf Wetness";

		var oLogicalSensor = _getMaiaLogicalSensorByLsid(logicalSensorId);
		if (!oLogicalSensor) return "";
		var tzOffset = Utils.getSensorOffset(oLogicalSensor);
		var iHat = Utils.getSensorHat(oLogicalSensor);
		var sensorLastUpdated = iHat + tzOffset;
		var bOutdatedData = this.checkOutdatedData(oLogicalSensor.logicalSensorId);

		//ISS
		var dataStructure502 = wl.constants['structureType'+dataStructureStartNum+'02FieldName'];
		var sensorData502 = this.getMaiaSensorData(logicalSensorId, dataStructure502);
		var dataStructure503 = wl.constants['structureType'+dataStructureStartNum+'03FieldName'];
		var sensorData503 = this.getMaiaSensorData(logicalSensorId, dataStructure503);
		var dataStructure504 = wl.constants['structureType'+dataStructureStartNum+'04FieldName'];
		var sensorData504 = this.getMaiaSensorData(logicalSensorId, dataStructure504);
		var dataStructure505 = wl.constants['structureType'+dataStructureStartNum+'05FieldName'];
		var sensorData505 = this.getMaiaSensorData(logicalSensorId, dataStructure505);
		var dataStructure506 = wl.constants['structureType'+dataStructureStartNum+'06FieldName'];
		var sensorData506 = this.getMaiaSensorData(logicalSensorId, dataStructure506);
		var dataStructure507 = wl.constants['structureType'+dataStructureStartNum+'07FieldName'];
		var sensorData507 = this.getMaiaSensorData(logicalSensorId, dataStructure507);

		//Leaf/Soil
		var dataStructure521 = wl.constants['structureType'+dataStructureStartNum+'21FieldName'];
		var sensorData521 = this.getMaiaSensorData(logicalSensorId, dataStructure521);
		var dataStructure522 = wl.constants['structureType'+dataStructureStartNum+'22FieldName'];
		var sensorData522 = this.getMaiaSensorData(logicalSensorId, dataStructure522);
		var dataStructure523 = wl.constants['structureType'+dataStructureStartNum+'23FieldName'];
		var sensorData523 = this.getMaiaSensorData(logicalSensorId, dataStructure523);
		var dataStructure524 = wl.constants['structureType'+dataStructureStartNum+'24FieldName'];
		var sensorData524 = this.getMaiaSensorData(logicalSensorId, dataStructure524);
		var dataStructure525 = wl.constants['structureType'+dataStructureStartNum+'25FieldName'];
		var sensorData525 = this.getMaiaSensorData(logicalSensorId, dataStructure525);
		var dataStructure526 = wl.constants['structureType'+dataStructureStartNum+'26FieldName'];
		var sensorData526 = this.getMaiaSensorData(logicalSensorId, dataStructure526);
		var dataStructure527 = wl.constants['structureType'+dataStructureStartNum+'27FieldName'];
		var sensorData527 = this.getMaiaSensorData(logicalSensorId, dataStructure527);
		var dataStructure528 = wl.constants['structureType'+dataStructureStartNum+'28FieldName'];
		var sensorData528 = this.getMaiaSensorData(logicalSensorId, dataStructure528);
		var dataStructure529 = wl.constants['structureType'+dataStructureStartNum+'29FieldName'];
		var sensorData529 = this.getMaiaSensorData(logicalSensorId, dataStructure529);
		var dataStructure530 = wl.constants['structureType'+dataStructureStartNum+'30FieldName'];
		var sensorData530 = this.getMaiaSensorData(logicalSensorId, dataStructure530);

		/**
		 * ISS Type
		 */

		//Temp Out (Temp only)
		var bShowTemp502 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'02_temp'
		});

		var dTempOut502 = DASH_VALUE;
		var dTempOutHi502 = DASH_VALUE;
		var dTempOutLow502 = DASH_VALUE;
		var sTempOutHiTime502 = DASH_VALUE;
		var sTempOutLowTime502 = DASH_VALUE;

		if (Utils.dashFilterCheck("d_temp_out", sensorData502[dataStructure502.temp]) &&
			!bOutdatedData) {
			dTempOut502 = sensorData502[dataStructure502.temp];
		}
		if (Utils.dashFilterCheck("d_temp_out_hi", sensorData502[dataStructure502.temp_high]) &&
			!bOutdatedData) {
			dTempOutHi502 = sensorData502[dataStructure502.temp_high];
			sTempOutHiTime502 = sensorData502[dataStructure502.temp_high__at] == null ?
				DASH_VALUE : sensorData502[dataStructure502.temp_high__at] + tzOffset;
		}
		if (Utils.dashFilterCheck("d_temp_out_low", sensorData502[dataStructure502
				.temp_low]) && !bOutdatedData) {
			dTempOutLow502 = sensorData502[dataStructure502.temp_low];
			sTempOutLowTime502 = sensorData502[dataStructure502.temp_low__at] == null ?
				DASH_VALUE : sensorData502[dataStructure502.temp_low__at] + tzOffset;
		}

		//Temp Out (Temp/Hum)
		var bShowTemp = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'03_temp'
		});

		var dTempOut = DASH_VALUE;
		var dTempOutHi = DASH_VALUE;
		var dTempOutLow = DASH_VALUE;
		var sTempOutHiTime = DASH_VALUE;
		var sTempOutLowTime = DASH_VALUE;

		if (Utils.dashFilterCheck("d_temp_out", sensorData503[dataStructure503.temp]) &&
			!bOutdatedData) {
			dTempOut = sensorData503[dataStructure503.temp];
		}
		if (Utils.dashFilterCheck("d_temp_out_hi", sensorData503[dataStructure503.temp_high]) &&
			!bOutdatedData) {
			dTempOutHi = sensorData503[dataStructure503.temp_high];
			sTempOutHiTime = sensorData503[dataStructure503.temp_high__at] == null ?
				DASH_VALUE : sensorData503[dataStructure503.temp_high__at] + tzOffset;
		}
		if (Utils.dashFilterCheck("d_temp_out_low", sensorData503[dataStructure503
				.temp_low]) && !bOutdatedData) {
			dTempOutLow = sensorData503[dataStructure503.temp_low];
			sTempOutLowTime = sensorData503[dataStructure503.temp_low__at] == null ?
				DASH_VALUE : sensorData503[dataStructure503.temp_low__at] + tzOffset;
		}

		//Hum Out
		var bShowHum = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'03_hum'
		});

		var iHumOut = DASH_VALUE;
		var iHumOutHi = DASH_VALUE;
		var sHumOutHiTime = DASH_VALUE;
		var iHumOutLow = DASH_VALUE;
		var sHumOutLowTime = DASH_VALUE;

		if (Utils.dashFilterCheck("i_hum_out", sensorData503[dataStructure503.hum]) &&
			!bOutdatedData) {
			iHumOut = sensorData503[dataStructure503.hum];
			iHumOutHi = sensorData503[dataStructure503.hum_high];
			sHumOutHiTime = sensorData503[dataStructure503.hum_high__at] == null ?
				DASH_VALUE : sensorData503[dataStructure503.hum_high__at] + tzOffset;
			iHumOutLow = sensorData503[dataStructure503.hum_low];
			sHumOutLowTime = sensorData503[dataStructure503.hum_low__at] == null ?
				DASH_VALUE : sensorData503[dataStructure503.hum_low__at] + tzOffset;
		}

		//Heat Index
		var dHeatIndex = DASH_VALUE;
		var dHeatIndexHi = DASH_VALUE;
		var sHeatIndexHiTime = DASH_VALUE;

		if (Utils.dashFilterCheck("d_heat_index_out", sensorData503[
				dataStructure503.heat_index]) && !bOutdatedData) {
			dHeatIndex = sensorData503[dataStructure503.heat_index];
		}
		if (Utils.dashFilterCheck("d_heat_index_out", sensorData503[
				dataStructure503.heat_index_high]) && !bOutdatedData) {
			dHeatIndexHi = sensorData503[dataStructure503.heat_index_high];
			sHeatIndexHiTime = sensorData503[dataStructure503.heat_index_high__at] ==
				null ? DASH_VALUE : sensorData503[dataStructure503.heat_index_high__at] +
				tzOffset;
		}

		//Wind Chill
		var dWindChill = DASH_VALUE;
		var dWindChillLow = DASH_VALUE;
		var sWindChillLowTime = DASH_VALUE;
		var bShowWindChill = false;

		if (Utils.dashFilterCheck("d_wind_chill", sensorData503[dataStructure503.wind_chill]) &&
			!bOutdatedData) {
			dWindChill = sensorData503[dataStructure503.wind_chill];
			bShowWindChill = _.find(sidebarTiles, {
				portletType: 'structure_type_'+dataStructureStartNum+'03_temp'
			});
		}
		if (Utils.dashFilterCheck("d_wind_chill", sensorData503[dataStructure503.wind_chill_low]) &&
			!bOutdatedData) {
			dWindChillLow = sensorData503[dataStructure503.wind_chill_low];
			sWindChillLowTime = sensorData503[dataStructure503.wind_chill_low__at] ==
				null ? DASH_VALUE : sensorData503[dataStructure503.wind_chill_low__at] +
				tzOffset;
		}

		//Dew Point
		var dDewPoint = DASH_VALUE;
		var dDewPointHi = DASH_VALUE;
		var sDewPointHiTime = DASH_VALUE;
		var dDewPointLow = DASH_VALUE;
		var sDewPointLowTime = DASH_VALUE;

		if (Utils.dashFilterCheck("d_dew_pt_out", sensorData503[dataStructure503.dew_point])) {
			dDewPoint = sensorData503[dataStructure503.dew_point];
		}
		if (Utils.dashFilterCheck("d_dew_pt_out_hi", sensorData503[
				dataStructure503.dew_point_high]) && !bOutdatedData) {
			dDewPointHi = sensorData503[dataStructure503.dew_point_high];
			sDewPointHiTime = sensorData503[dataStructure503.dew_point_high__at] ==
				null ? DASH_VALUE : sensorData503[dataStructure503.dew_point_high__at] +
				tzOffset;
		}
		if (Utils.dashFilterCheck("d_dew_pt_out", sensorData503[dataStructure503.dew_point_low])) {
			dDewPointLow = sensorData503[dataStructure503.dew_point_low];
			sDewPointLowTime = sensorData503[dataStructure503.dew_point_low__at] ==
				null ? DASH_VALUE : sensorData503[dataStructure503.dew_point_low__at] +
				tzOffset;
		}

		//Wet Bulb
		var dWetBulb = bOutdatedData ? DASH_VALUE : sensorData503[dataStructure503
			.wet_bulb];
		var dWetBulbLow = bOutdatedData ? DASH_VALUE : sensorData503[
			dataStructure503.wet_bulb_low];
		var sWetBulbLowTime = bOutdatedData || sensorData503[dataStructure503.wet_bulb_low__at] ==
			null ? DASH_VALUE : sensorData503[dataStructure503.wet_bulb_low__at] +
			tzOffset;

		//Wind Speed
		var bShowWindSpeed = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'05_wind_speed'
		});

		var dWindSpeed = DASH_VALUE;
		var dWindSpeedHi = DASH_VALUE;
		var sWindSpeedHiTime = DASH_VALUE;

		if (Utils.dashFilterCheck("i_wind_speed_avg", sensorData505[
				dataStructure505.wind_speed_1_min]) && !bOutdatedData) {
			dWindSpeed = sensorData505[dataStructure505.wind_speed_1_min];
		}
		if (Utils.dashFilterCheck("i_wind_speed_hi", sensorData505[
				dataStructure505.wind_speed_day_high]) && !bOutdatedData) {
			dWindSpeedHi = sensorData505[dataStructure505.wind_speed_day_high];
			sWindSpeedHiTime = sensorData505[dataStructure505.wind_speed_day_high__at] ==
				null ? DASH_VALUE : sensorData505[dataStructure505.wind_speed_day_high__at] +
				tzOffset;
		}

		//Wind Direction
		var bShowWindDirection = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'05_wind_direction'
		});

		var sWindDirection = "";
		var iWindDirection;
		if (Utils.dashFilterCheck("i_wind_dir_of_prevail", sensorData505[
				dataStructure505.wind_direction_1_min])) {
			sWindDirection = Utils.getCardinalFromDegWithCalm(sensorData505[
				dataStructure505.wind_direction_1_min]);
			iWindDirection = Utils.formatLoopHiLowDataDefaultDecimalPlaces(
				"wind_direction", sensorData505[dataStructure505.wind_direction_1_min]);
		}

		//Solar Radiation
		var bShowSolarRadAvg = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'06_solar'
		});

		var iSolarRad = DASH_VALUE;
		var iSolarRadHi = DASH_VALUE;
		var sSolarRadHiTime = DASH_VALUE;

		if (Utils.dashFilterCheck("i_solar_rad_avg", sensorData506[
				dataStructure506.solar]) && !bOutdatedData) {
			iSolarRad = sensorData506[dataStructure506.solar];
			iSolarRadHi = sensorData506[dataStructure506.solar_high];
			sSolarRadHiTime = sensorData506[dataStructure506.solar_high__at] == null ?
				DASH_VALUE : sensorData506[dataStructure506.solar_high__at] + tzOffset;
		}

		//UV
		var bShowUvIndexAvg = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'07_uv'
		});

		var dUvIndex = DASH_VALUE;
		var dUvIndexHi = DASH_VALUE;
		var sUvIndexHiTime = DASH_VALUE;

		if (Utils.dashFilterCheck("d_uv_index_avg", sensorData507[dataStructure507
				.uv]) && !bOutdatedData) {
			dUvIndex = sensorData507[dataStructure507.uv];
			dUvIndexHi = sensorData507[dataStructure507.uv_high];
			sUvIndexHiTime = sensorData507[dataStructure507.uv_high__at] == null ?
				DASH_VALUE : sensorData507[dataStructure507.uv_high__at] + tzOffset;
		}

		//Avg Wind Speed & Wind Gust Speed
		var iWindSpeed2Min = DASH_VALUE;
		var iWindSpeed10Min = DASH_VALUE;
		var iWindGust2Min = DASH_VALUE;
		var iWindGust10Min = DASH_VALUE;

		if (Utils.dashFilterCheck("i_wind_speed_avg", sensorData505[
				dataStructure505.wind_speed_2_min]) && !bOutdatedData) {
			iWindSpeed2Min = sensorData505[dataStructure505.wind_speed_2_min];
		}
		if (Utils.dashFilterCheck("i_wind_speed_avg", sensorData505[
				dataStructure505.wind_speed_10_min]) && !bOutdatedData) {
			iWindSpeed10Min = sensorData505[dataStructure505.wind_speed_10_min];
		}
		if (Utils.dashFilterCheck("i_wind_speed_avg", sensorData505[
				dataStructure505.high_wind_speed_2_min]) && !bOutdatedData) {
			iWindGust2Min = sensorData505[dataStructure505.high_wind_speed_2_min];
		}
		if (Utils.dashFilterCheck("i_wind_speed_avg", sensorData505[
				dataStructure505.high_wind_speed_10_min]) && !bOutdatedData) {
			iWindGust10Min = sensorData505[dataStructure505.high_wind_speed_10_min];
		}

		//Rain Current
		var bShowRainCurrent = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'04_rain_current'
		});
		var bShowRainTotal = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'04_rain_total'
		});
		var dRainRate = bOutdatedData ? DASH_VALUE : sensorData504[
			dataStructure504.high_rain_rate];
		var dRainStorm = bOutdatedData ? DASH_VALUE : sensorData504[
			dataStructure504.rain_storm];
		var dRainDay = null;
		var dRainMonth = null;
		var dRainYear = null;

		var totalRainData = _findTotalRainSensorData(logicalSensorId);
		if (totalRainData) {
			dRainDay = bOutdatedData ? DASH_VALUE : totalRainData.totalForToday.convertedVal;
			dRainMonth = bOutdatedData ? DASH_VALUE : totalRainData.totalForMonth.convertedVal;
			dRainYear = bOutdatedData ? DASH_VALUE : totalRainData.totalForYear.convertedVal;
		}

		//ET
		var bShowEtTotal = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'11_et'
		});

		var dEtDay = null;
		var dEtMonth = null;
		var dEtYear = null;

		var ETdata = _.findWhere(wl.data.totalETData, {
			iLogicalSensorId: logicalSensorId
		});
		if (ETdata) {
			dEtDay = bOutdatedData ? DASH_VALUE : ETdata.totalForToday.convertedVal;
			dEtMonth = bOutdatedData ? DASH_VALUE : ETdata.totalForMonth.convertedVal;
			dEtYear = bOutdatedData ? DASH_VALUE : ETdata.totalForYear.convertedVal;
		}

		/**
		 * Leaf/Soil Type
		 */

		//Temp 1
		var bShowTemp1 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'21_temp_1'
		});
		var dTemp1 = bOutdatedData ? DASH_VALUE : sensorData521[dataStructure521.temp];
		var dTemp1Hi = bOutdatedData ? DASH_VALUE : sensorData521[dataStructure521
			.temp_high];
		var sTemp1HiTime = bOutdatedData || sensorData521[dataStructure521.temp_high__at] ==
			null ? DASH_VALUE : sensorData521[dataStructure521.temp_high__at] +
			tzOffset;
		var dTemp1Low = bOutdatedData ? DASH_VALUE : sensorData521[
			dataStructure521.temp_low];
		var sTemp1LowTime = bOutdatedData || sensorData521[dataStructure521.temp_low__at] ==
			null ? DASH_VALUE : sensorData521[dataStructure521.temp_low__at] +
			tzOffset;

		//Temp 2
		var bShowTemp2 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'22_temp_2'
		});
		var dTemp2 = bOutdatedData ? DASH_VALUE : sensorData522[dataStructure522.temp];
		var dTemp2Hi = bOutdatedData ? DASH_VALUE : sensorData522[dataStructure522
			.temp_high];
		var sTemp2HiTime = bOutdatedData || sensorData522[dataStructure522.temp_high__at] ==
			null ? DASH_VALUE : sensorData522[dataStructure522.temp_high__at] +
			tzOffset;
		var dTemp2Low = bOutdatedData ? DASH_VALUE : sensorData522[
			dataStructure522.temp_low];
		var sTemp2LowTime = bOutdatedData || sensorData522[dataStructure522.temp_low__at] ==
			null ? DASH_VALUE : sensorData522[dataStructure522.temp_low__at] +
			tzOffset;

		//Temp 3
		var bShowTemp3 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'23_temp_3'
		});
		var dTemp3 = bOutdatedData ? DASH_VALUE : sensorData523[dataStructure523.temp];
		var dTemp3Hi = bOutdatedData ? DASH_VALUE : sensorData523[dataStructure523
			.temp_high];
		var sTemp3HiTime = bOutdatedData || sensorData523[dataStructure523.temp_high__at] ==
			null ? DASH_VALUE : sensorData523[dataStructure523.temp_high__at] +
			tzOffset;
		var dTemp3Low = bOutdatedData ? DASH_VALUE : sensorData523[
			dataStructure523.temp_low];
		var sTemp3LowTime = bOutdatedData || sensorData523[dataStructure523.temp_low__at] ==
			null ? DASH_VALUE : sensorData523[dataStructure523.temp_low__at] +
			tzOffset;

		//Temp 4
		var bShowTemp4 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'24_temp_4'
		});
		var dTemp4 = bOutdatedData ? DASH_VALUE : sensorData524[dataStructure524.temp];
		var dTemp4Hi = bOutdatedData ? DASH_VALUE : sensorData524[dataStructure524
			.temp_high];
		var sTemp4HiTime = bOutdatedData || sensorData524[dataStructure524.temp_high__at] ==
			null ? DASH_VALUE : sensorData524[dataStructure524.temp_high__at] +
			tzOffset;
		var dTemp4Low = bOutdatedData ? DASH_VALUE : sensorData524[
			dataStructure524.temp_low];
		var sTemp4LowTime = bOutdatedData || sensorData524[dataStructure524.temp_low__at] ==
			null ? DASH_VALUE : sensorData524[dataStructure524.temp_low__at] +
			tzOffset;

		//Soil Moisture 1
		var bShowSoilMoisture1 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'25_soil_moisture_1'
		});
		var dSoilMoisture1 = bOutdatedData ? DASH_VALUE : sensorData525[
			dataStructure525.soil_moisture];
		var dSoilMoisture1Hi = bOutdatedData ? DASH_VALUE : sensorData525[
			dataStructure525.soil_moisture_high];
		var sSoilMoisture1HiTime = bOutdatedData || sensorData525[dataStructure525
			.soil_moisture_high__at] == null ? DASH_VALUE : sensorData525[
			dataStructure525.soil_moisture_high__at] + tzOffset;
		var dSoilMoisture1Low = bOutdatedData ? DASH_VALUE : sensorData525[
			dataStructure525.soil_moisture_low];
		var sSoilMoisture1LowTime = bOutdatedData || sensorData525[
				dataStructure525.soil_moisture_low__at] == null ? DASH_VALUE :
			sensorData525[dataStructure525.soil_moisture_low__at] + tzOffset;

		//Soil Moisture 2
		var bShowSoilMoisture2 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'26_soil_moisture_2'
		});
		var dSoilMoisture2 = bOutdatedData ? DASH_VALUE : sensorData526[
			dataStructure526.soil_moisture];
		var dSoilMoisture2Hi = bOutdatedData ? DASH_VALUE : sensorData526[
			dataStructure526.soil_moisture_high];
		var sSoilMoisture2HiTime = bOutdatedData || sensorData526[dataStructure526
			.soil_moisture_high__at] == null ? DASH_VALUE : sensorData526[
			dataStructure526.soil_moisture_high__at] + tzOffset;
		var dSoilMoisture2Low = bOutdatedData ? DASH_VALUE : sensorData526[
			dataStructure526.soil_moisture_low];
		var sSoilMoisture2LowTime = bOutdatedData || sensorData526[
				dataStructure526.soil_moisture_low__at] == null ? DASH_VALUE :
			sensorData526[dataStructure526.soil_moisture_low__at] + tzOffset;

		//Soil Moisture 3
		var bShowSoilMoisture3 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'27_soil_moisture_3'
		});
		var dSoilMoisture3 = bOutdatedData ? DASH_VALUE : sensorData527[
			dataStructure527.soil_moisture];
		var dSoilMoisture3Hi = bOutdatedData ? DASH_VALUE : sensorData527[
			dataStructure527.soil_moisture_high];
		var sSoilMoisture3HiTime = bOutdatedData || sensorData527[dataStructure527
			.soil_moisture_high__at] == null ? DASH_VALUE : sensorData527[
			dataStructure527.soil_moisture_high__at] + tzOffset;
		var dSoilMoisture3Low = bOutdatedData ? DASH_VALUE : sensorData527[
			dataStructure527.soil_moisture_low];
		var sSoilMoisture3LowTime = bOutdatedData || sensorData527[
				dataStructure527.soil_moisture_low__at] == null ? DASH_VALUE :
			sensorData527[dataStructure527.soil_moisture_low__at] + tzOffset;

		//Soil Moisture 4
		var bShowSoilMoisture4 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'28_soil_moisture_4'
		});
		var dSoilMoisture4 = bOutdatedData ? DASH_VALUE : sensorData528[
			dataStructure528.soil_moisture];
		var dSoilMoisture4Hi = bOutdatedData ? DASH_VALUE : sensorData528[
			dataStructure528.soil_moisture_high];
		var sSoilMoisture4HiTime = bOutdatedData || sensorData528[dataStructure528
			.soil_moisture_high__at] == null ? DASH_VALUE : sensorData528[
			dataStructure528.soil_moisture_high__at] + tzOffset;
		var dSoilMoisture4Low = bOutdatedData ? DASH_VALUE : sensorData528[
			dataStructure528.soil_moisture_low];
		var sSoilMoisture4LowTime = bOutdatedData || sensorData528[
				dataStructure528.soil_moisture_low__at] == null ? DASH_VALUE :
			sensorData528[dataStructure528.soil_moisture_low__at] + tzOffset;

		//Leaf Wetness 1
		var bShowLeafWetness1 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'29_leaf_wetness_1'
		});
		var dLeafWetness1 = bOutdatedData ? DASH_VALUE : sensorData529[
			dataStructure529.leaf_wetness];
		var dLeafWetness1Hi = bOutdatedData ? DASH_VALUE : sensorData529[
			dataStructure529.leaf_wetness_high];
		var sLeafWetness1HiTime = bOutdatedData || sensorData529[dataStructure529.leaf_wetness_high__at] ==
			null ? DASH_VALUE : sensorData529[dataStructure529.leaf_wetness_high__at] +
			tzOffset;
		var dLeafWetness1Low = bOutdatedData ? DASH_VALUE : sensorData529[
			dataStructure529.leaf_wetness_low];
		var sLeafWetness1LowTime = bOutdatedData || sensorData529[dataStructure529
			.leaf_wetness_low__at] == null ? DASH_VALUE : sensorData529[
			dataStructure529.leaf_wetness_low__at] + tzOffset;

		//Leaf Wetness 2
		var bShowLeafWetness2 = _.find(sidebarTiles, {
			portletType: 'structure_type_'+dataStructureStartNum+'30_leaf_wetness_2'
		});
		var dLeafWetness2 = bOutdatedData ? DASH_VALUE : sensorData530[
			dataStructure530.leaf_wetness];
		var dLeafWetness2Hi = bOutdatedData ? DASH_VALUE : sensorData530[
			dataStructure530.leaf_wetness_high];
		var sLeafWetness2HiTime = bOutdatedData || sensorData530[dataStructure530.leaf_wetness_high__at] ==
			null ? DASH_VALUE : sensorData530[dataStructure530.leaf_wetness_high__at] +
			tzOffset;
		var dLeafWetness2Low = bOutdatedData ? DASH_VALUE : sensorData530[
			dataStructure530.leaf_wetness_low];
		var sLeafWetness2LowTime = bOutdatedData || sensorData530[dataStructure530
			.leaf_wetness_low__at] == null ? DASH_VALUE : sensorData530[
			dataStructure530.leaf_wetness_low__at] + tzOffset;

		var html = "";
		html += "<div class='wl-table'>";
		html += "<div class='wl-table-title'>";
		html += "<h3 id='" + nodeName.replace(/[^a-zA-Z0-9_]/g, '-').toLowerCase() +
			"'>" + nodeName + "</h3>";
		if (oMapper.checkLastUpdatedTime(sensorLastUpdated, wl.data.staleDataBufferSec)) {
			html +=
				"<div class=\"pull-right too-old\" data-l10n-id='msg_page_header' data-l10n-args='{ \"date\" : \"" +
				this.formatHappenedAtDateTime(iHat, tzOffset) + "\" }'></div>";
		}
		html += "</div>";
		html += "<table class=\"table\">";
		html += "<thead><tr><th></th>";
		html +=
			"<th data-l10n-id='Current'></th><th colspan=\"2\" data-l10n-id='daily_highs'></th><th colspan=\"2\" data-l10n-id='daily_lows'></th><th class='short transparent'></th><th class='last-and-long transparent'></th></tr></thead>";
		html += "<tbody>";

		/**
		 * ISS
		 */

		//Temp Out (Temp only)
		if (bShowTemp502) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTempOut502,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale,
				dTempOutHi502, wl.data.userAccountSetting, wl.data.unitLabelTemperature
			) + "</td>";
			html += "<td>" + this.formatTime(sTempOutHiTime502) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale,
				dTempOutLow502, wl.data.userAccountSetting, wl.data.unitLabelTemperature
			) + "</td>";
			html += "<td>" + this.formatTime(sTempOutLowTime502) + "</td></td></tr>";
		}

		//Temp Out (Temp/Hum)
		if (bShowTemp) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_temp'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTempOut,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTempOutHi,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTempOutHiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTempOutLow,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTempOutLowTime) + "</td></td></tr>";
		}

		//Hum Out
		if (bShowHum) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_hum'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(humScale, iHumOut, wl.data
				.userAccountSetting, '%') + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(humScale, iHumOutHi,
				wl.data.userAccountSetting, '%') + "</td>";
			html += "<td>" + this.formatTime(sHumOutHiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(humScale, iHumOutLow,
				wl.data.userAccountSetting, '%') + "</td>";
			html += "<td>" + this.formatTime(sHumOutLowTime) + "</td></td></tr>";
		}

		//Heat Index
		if (bShowTemp) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_heat'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dHeatIndex,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale,
					dHeatIndexHi, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
				"</td>";
			html += "<td>" + this.formatTime(sHeatIndexHiTime) +
				"</td><td></td><td></td></td></tr>";
		}

		//Wind Chill
		if (bShowWindChill) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_chill'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dWindChill,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td></td><td></td><td>" + Utils.formatSensorReadingWithUnit(
				tempScale, dWindChillLow, wl.data.userAccountSetting, wl.data.unitLabelTemperature
			) + "</td>";
			html += "<td>" + this.formatTime(sWindChillLowTime) + "</td></td></tr>";
		}

		//Dew Point
		if (bShowTemp) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_temp_dew'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dDewPoint,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dDewPointHi,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sDewPointHiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale,
					dDewPointLow, wl.data.userAccountSetting, wl.data.unitLabelTemperature) +
				"</td>";
			html += "<td>" + this.formatTime(sDewPointLowTime) + "</td></td></tr>";
		}

		//Wet Bulb
		if (bShowTemp) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_wet_bulb'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dWetBulb,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td></td><td></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dWetBulbLow,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sWetBulbLowTime) + "</td></td></tr>";
		}

		//Wind Speed
		if (bShowWindSpeed) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_speed'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(windScale, dWindSpeed,
				wl.data.userAccountSetting, wl.data.unitLabelWindSpeed) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(windScale,
					dWindSpeedHi, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed) +
				"</td>";
			html += "<td>" + this.formatTime(sWindSpeedHiTime) +
				"</td><td></td><td></td></td></tr>";
		}

		//Wind Direction
		if (bShowWindDirection) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_direction'></td>";
			if (iWindDirection) {
				html += "<td>" + sWindDirection + " " + iWindDirection + "&deg;</td>";
			} else {
				html += "<td>" + DASH_VALUE + "</td>";
			}
			html += "<td></td><td></td><td></td><td></td></td></tr>";
		}

		//Solar Radiation
		if (bShowSolarRadAvg) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_solar_rad'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(solarScale, iSolarRad,
				wl.data.userAccountSetting, wl.data.unitLabelSolar) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(solarScale,
					iSolarRadHi, wl.data.userAccountSetting, wl.data.unitLabelSolar) +
				"</td>";
			html += "<td>" + this.formatTime(sSolarRadHiTime) +
				"</td><td></td><td></td></td> </tr>";
		}

		//UV
		if (bShowUvIndexAvg) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_uv'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(uvScale, dUvIndex, wl.data
				.userAccountSetting, "Index") + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(uvScale, dUvIndexHi,
				wl.data.userAccountSetting, "Index") + "</td>";
			html += "<td>" + this.formatTime(sUvIndexHiTime) +
				"</td><td></td><td></td> </td> </tr>";
		}

		//Avg Wind Speed & Wind Gust Speed
		if (bShowWindSpeed) {
			html += "</tbody></table>";
			html += "<table class=\"table table-short\">";
			html += "<thead><tr><th data-l10n-id=\"wind\"></th>";
			html +=
				"<th data-l10n-id='minute' data-l10n-args='{\"amount\": \"2\"}'></th><th data-l10n-id='minute' data-l10n-args='{\"amount\": \"10\"}'>10 Minute</th><th class='transparent'></th><th class='short transparent'></th><th class='last-and-long transparent'></th></tr></thead>";
			html += "<tbody>";
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_avg_spd'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(windScale,
					iWindSpeed2Min, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed) +
				"</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(windScale,
				iWindSpeed10Min, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed
			) + "</td>";
			html += "</td></tr>";
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='sensor_wind_gst_spd'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(windScale,
					iWindGust2Min, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed) +
				"</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(windScale,
					iWindGust10Min, wl.data.userAccountSetting, wl.data.unitLabelWindSpeed) +
				"</td>";
			html += "</td></tr>";
		}

		if (bShowRainCurrent || bShowRainTotal) {
			html += "<table class=\"table\">";
			if (bShowEtTotal) {
				html += "<thead><tr><th data-l10n-id='rain_et'></th>";
			} else {
				html += "<thead><tr><th data-l10n-id='rain'></th>";
			}
			html +=
				"<th data-l10n-id='rate'></th><th class='short' data-l10n-id='storm'></th><th class='short' data-l10n-id='day'></th><th class='short' data-l10n-id='month'></th><th class='short' data-l10n-id='year'></th><th class='short transparent'></th><th class='last-and-long transparent'></th></tr></thead>";
			html += "<tbody>";
		}

		if (!bShowRainCurrent && !bShowRainTotal && bShowEtTotal) {
			html += "<table class=\"table\">";
			html += "<thead><tr><th data-l10n-id='sensor_et'></th>";
			html +=
				"<th class='short' data-l10n-id='day'></th><th class='short' data-l10n-id='month'></th><th class='short' data-l10n-id='year'></th><th class='short transparent'></th><th class='short transparent'></th><th class='transparent'></th><th class='last-and-long transparent'></th></tr></thead>";
			html += "<tbody>";
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_et'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(etScale, dEtDay,
				wl.data.userAccountSetting, wl.data.unitLabelRainEt) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(etScale, dEtMonth,
				wl.data.userAccountSetting, wl.data.unitLabelRainEt) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(etScale, dEtYear,
					wl.data.userAccountSetting, wl.data.unitLabelRainEt) +
				"</td></td><td><td></tr>";
		}

		if (bShowRainCurrent || bShowRainTotal) {
			html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_rain'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, dRainRate,
				wl.data.userAccountSetting, wl.data.unitLabelRainEt) + "/h" + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, dRainStorm,
				wl.data.userAccountSetting, wl.data.unitLabelRainEt) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, dRainDay,
				wl.data.userAccountSetting, wl.data.unitLabelRainEt) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, dRainMonth,
				wl.data.userAccountSetting, wl.data.unitLabelRainEt) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(rainScale, dRainYear,
					wl.data.userAccountSetting, wl.data.unitLabelRainEt) +
				"</td></td></tr>";
			if (bShowEtTotal) {
				html += "<tr><td class=\"tableCell\" data-l10n-id='sensor_et'></td>";
				html += "<td></td>";
				html += "<td></td>";
				html += "<td>" + Utils.formatSensorReadingWithUnit(etScale, dEtDay,
					wl.data.userAccountSetting, wl.data.unitLabelRainEt) + "</td>";
				html += "<td>" + Utils.formatSensorReadingWithUnit(etScale, dEtMonth,
					wl.data.userAccountSetting, wl.data.unitLabelRainEt) + "</td>";
				html += "<td>" + Utils.formatSensorReadingWithUnit(etScale, dEtYear,
						wl.data.userAccountSetting, wl.data.unitLabelRainEt) +
					"</td></td></tr>";
			}
		}

		/**
		 * Leaf/Soil
		 */

		//Temp 1
		if (bShowTemp1) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_521_temp_1'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp1, wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp1Hi,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTemp1HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp1Low,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTemp1LowTime) + "</td></td></tr>";
		}

		//Temp 2
		if (bShowTemp2) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_522_temp_2'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp2, wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp2Hi,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTemp2HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp2Low,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTemp2LowTime) + "</td></td></tr>";
		}

		//Temp 3
		if (bShowTemp3) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_523_temp_3'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp3, wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp3Hi,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTemp3HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp3Low,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTemp3LowTime) + "</td></td></tr>";
		}

		//Temp 4
		if (bShowTemp4) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_524_temp_4'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp4, wl.data
				.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp4Hi,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTemp4HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(tempScale, dTemp4Low,
				wl.data.userAccountSetting, wl.data.unitLabelTemperature) + "</td>";
			html += "<td>" + this.formatTime(sTemp4LowTime) + "</td></td></tr>";
		}

		//Soil Moisture 1
		if (bShowSoilMoisture1) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_525_soil_moisture_1'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture1, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture1Hi, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + this.formatTime(sSoilMoisture1HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture1Low, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + this.formatTime(sSoilMoisture1LowTime) +
				"</td></td></tr>";
		}

		//Soil Moisture 2
		if (bShowSoilMoisture2) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_526_soil_moisture_2'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture2, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture2Hi, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + this.formatTime(sSoilMoisture2HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture2Low, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + this.formatTime(sSoilMoisture2LowTime) +
				"</td></td></tr>";
		}

		//Soil Moisture 3
		if (bShowSoilMoisture3) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_527_soil_moisture_3'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture3, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture3Hi, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + this.formatTime(sSoilMoisture3HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture3Low, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + this.formatTime(sSoilMoisture3LowTime) +
				"</td></td></tr>";
		}

		//Soil Moisture 4
		if (bShowSoilMoisture4) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_528_soil_moisture_4'></td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture4, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture4Hi, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + this.formatTime(sSoilMoisture4HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReadingWithUnit(soilScale,
					dSoilMoisture4Low, wl.data.userAccountSetting, unitLabelSoilMoisture) +
				"</td>";
			html += "<td>" + this.formatTime(sSoilMoisture4LowTime) +
				"</td></td></tr>";
		}

		//Leaf Wetness 1
		if (bShowLeafWetness1) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_529_leaf_wetness_1'></td>";
			html += "<td>" + Utils.formatSensorReading(leafWetnessScale,
				dLeafWetness1, wl.data.userAccountSetting) + "</td>";
			html += "<td>" + Utils.formatSensorReading(leafWetnessScale,
				dLeafWetness1Hi, wl.data.userAccountSetting) + "</td>";
			html += "<td>" + this.formatTime(sLeafWetness1HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReading(leafWetnessScale,
				dLeafWetness1Low, wl.data.userAccountSetting) + "</td>";
			html += "<td>" + this.formatTime(sLeafWetness1LowTime) +
				"</td></td></tr>";
		}

		//Leaf Wetness 2
		if (bShowLeafWetness2) {
			html +=
				"<tr><td class=\"tableCell\" data-l10n-id='portlet_title_structure_type_530_leaf_wetness_2'></td>";
			html += "<td>" + Utils.formatSensorReading(leafWetnessScale,
				dLeafWetness2, wl.data.userAccountSetting) + "</td>";
			html += "<td>" + Utils.formatSensorReading(leafWetnessScale,
				dLeafWetness2Hi, wl.data.userAccountSetting) + "</td>";
			html += "<td>" + this.formatTime(sLeafWetness2HiTime) + "</td>";
			html += "<td>" + Utils.formatSensorReading(leafWetnessScale,
				dLeafWetness2Low, wl.data.userAccountSetting) + "</td>";
			html += "<td>" + this.formatTime(sLeafWetness2LowTime) +
				"</td></td></tr>";
		}

		html += "</tbody></table></div>";
		return html
	};

	/**
	 * Generate the html for the barometer data.
	 *
	 * @author	Kenny Sam
	 * @since	2016-09-19
	 *
	 */
	this.generateBarometerHtmlSummary = function(oBarData) {

		//------ Prepare the data ---------------
		var barScale = "Barometer";
		var html = "";

		var stationData = wl.data.stationData;
		var stationHilow = wl.data.stationHilow;

		var bar = DASH_VALUE;
		var barHi = DASH_VALUE;
		var barHiTime = DASH_VALUE;
		var barLow = DASH_VALUE;
		var barLowTime = DASH_VALUE;
		var barTrend = DASH_VALUE;
		var barUnit = "";

		var barHat = null
		var barTzOffsetSec = 0;
		var barLastUpdatedLocal = null;
		var bOutdatedBarData = true;

		if (oBarData) {
			//If there is bar history use that.

			barHat = oBarData.lastUpdatedTs;
			barTzOffsetSec = oBarData.tzOffsetSec;
			barLastUpdatedLocal = barHat + barTzOffsetSec;
			bOutdatedBarData = this.checkLastUpdatedTime(barLastUpdatedLocal, wl.data
				.outdatedDataBufferSec);

			if (!bOutdatedBarData && Utils.dashFilterCheck("d_bar", oBarData.barCurrent)) {
				//bar high low time is already in device local time.
				bar = oBarData.barCurrent;
				if (oBarData.barHigh != null) {
					barHi = oBarData.barHigh.val;
					barHiTime = this.formatTime(oBarData.barHigh.hat);
				}
				if (oBarData.barLow != null) {
					barLow = oBarData.barLow.val;
					barLowTime = this.formatTime(oBarData.barLow.hat);
				}
				barUnit = oBarData.unit;
				if (oBarData.barTrend != null) {
					barTrend = oBarData.barTrend;
				}
			}
		}

		//------ Create the HTML ---------------

		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_barometer'></td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(barScale, bar, wl.data.userAccountSetting,
			barUnit) + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(barScale, barHi, wl.data
			.userAccountSetting, barUnit) + "</td>";
		html += "<td>" + barHiTime + "</td>";
		html += "<td>" + Utils.formatSensorReadingWithUnit(barScale, barLow, wl.data
			.userAccountSetting, barUnit) + "</td>";
		html += "<td>" + barLowTime + "</td></td></tr>";
		html +=
			"<tr><td class=\"tableCell\" data-l10n-id='sensor_bar_trend'></td>";
		html += "<td data-l10n-id='" + barTrend + "'></td>";
		html += "<td></td><td></td><td></td><td></td></td></tr>";

		return html;
	}


	this.formatHappenedAtDateTime = function(utcHappendAt, offsetSec) {
		if (!Boolean(utcHappendAt)) {
			return DASH_VALUE;
		}

		var offsetMin = offsetSec / 60;
		var dateFormat = Utils.getAccountDateFormat(wl.data.userAccountSetting.formatDateTypeId);

		//Change ts to milliseconds to work with dayjs.
		return dayjs(utcHappendAt * 1000).utcOffset(offsetMin).format(dateFormat +
			" " + wl.data.timeFormat);
	};

	/**
	 * Given a timestamp, this will return a formated string of the timestamp.
	 *
	 * @param	ts	This is a local timestamp in seconds.
	 * @return	A formated string of the time.
	 */
	this.formatTime = function(ts) {
		if (!Boolean(ts) || ts === DASH_VALUE) {
			return DASH_VALUE;
		}
		//Change ts to milliseconds to work with dayjs.
		return dayjs(ts * 1000).utc().format(wl.data.timeFormat);
	};

	/**
	 * compare last updated timestamp to current date and stale buffer
	 * @param lastUpdatedTimestamp		This should be the device local last updated timestamp
	 * @param bufferSec					The buffer time for stale data / outdated data
	 *
	 * @returns {boolean} - if true, display 'last updated'
	 * @private
	 */
	this.checkLastUpdatedTime = function(lastUpdatedLocalTimestamp, bufferSec) {
		//by default compare to staleDataBufferSec
		if (!bufferSec) {
			bufferSec = wl.data.staleDataBufferSec;
		}
		if (_setLatestTimestamp) {
			_setLatestTimestamp(lastUpdatedLocalTimestamp);
		}

		return Utils.checkLastUpdatedTime(lastUpdatedLocalTimestamp, wl.data.timezoneOffset, bufferSec);
	}

	/**
	 * Check if sensor data is outdated
	 * @param lsid
	 * @returns {boolean} - if true, sensor data is outdated
	 */
	this.checkOutdatedData = function(lsid) {
		var bOutdatedData = false;
		var oLogicalSensor = _getMaiaLogicalSensorByLsid(lsid);
		if (oLogicalSensor != null) {
			var tzOffset = Utils.getSensorOffset(oLogicalSensor);
			var iHat = Utils.getSensorHat(oLogicalSensor);
			var sensorLastUpdated = iHat + tzOffset;

			if (sensorLastUpdated !== 0 && wl.app.oMapper.checkLastUpdatedTime(
					sensorLastUpdated, wl.data.outdatedDataBufferSec)) {
				bOutdatedData = true;
			}
		} else if (wl.data.stationData != null) {

			var timzoneOffsetSec = wl.data.timezoneOffset * 60;
			var lastUpdatedLocalTimestamp = wl.data.stationData.time_stamp +
				timzoneOffsetSec;
			if (wl.app.oMapper.checkLastUpdatedTime(lastUpdatedLocalTimestamp, wl.data
					.outdatedDataBufferSec)) {
				bOutdatedData = true;
			}
		}
		return bOutdatedData;
	}

	/**
	 * Check if tile panel has data of given dataStructureTypeId
	 * @param dataStructureTypeId
	 * @returns {boolean} - if true, tile panel has data
	 */
	this.checkTilePanelData = function(dataStructureTypeId) {
		var legacyTileList = wl.data.tilePanelData.legacyNodeData;
		if (legacyTileList != null && legacyTileList.length > 0) {
			for (var i in legacyTileList) {
				for (var j in legacyTileList[i].logicalSensor) {
					if (legacyTileList[i].logicalSensor[j].dataStructureTypeId ===
						dataStructureTypeId) {
						return true;
					}
				}
			}
		}
		return false;
	}

	this.prepareSystemModuleData = function(oSystemData, oHilow) {
		var systemData = {};

		var bOutdatedData = false;
		if (oSystemData) {
			var timzoneOffsetSec = wl.data.timezoneOffset * 60;
			var lastUpdatedLocalTimestamp = oSystemData.time_stamp + timzoneOffsetSec;
			bOutdatedData = this.checkLastUpdatedTime(lastUpdatedLocalTimestamp, wl.data
				.outdatedDataBufferSec);
		}

		//system data fields are defined here
		systemData = wl.constants.issSystemData;

		systemData.bShowTempOut = _checkPortletConfigByPortletTypeId(1);
		systemData.bShowHumOut = _checkPortletConfigByPortletTypeId(5);
		systemData.bShowTempIn = _checkPortletConfigByPortletTypeId(58);
		systemData.bShowHumIn = _checkPortletConfigByPortletTypeId(58);
		systemData.bShowHeatIndex = _checkPortletConfigByPortletTypeId(1);
		systemData.bShowWindChill = _checkPortletConfigByPortletTypeId(1);
		systemData.bShowDewPoint = _checkPortletConfigByPortletTypeId(1);
		systemData.bShowTHSWIndex = _checkPortletConfigByPortletTypeId(160);
		systemData.bShowTHWIndex = _checkPortletConfigByPortletTypeId(161);
		systemData.bShowWetBulb = _checkPortletConfigByPortletTypeId(1);
		systemData.bShowWindSpeed = _checkPortletConfigByPortletTypeId(7);
		systemData.bShowWindDirection = _checkPortletConfigByPortletTypeId(12);
		systemData.bShowRain = _checkPortletConfigByPortletTypeId(3) ||
			_checkPortletConfigByPortletTypeId(4);
		systemData.bShowSolarRadAvg = _checkPortletConfigByPortletTypeId(2);
		systemData.bShowEt = _checkPortletConfigByPortletTypeId(6);
		systemData.bShowUvIndexAvg = _checkPortletConfigByPortletTypeId(8);
		systemData.bShow_extra_temp_1 = _checkPortletConfigByPortletTypeId(41);
		systemData.bShow_extra_temp_2 = _checkPortletConfigByPortletTypeId(42);
		systemData.bShow_extra_temp_3 = _checkPortletConfigByPortletTypeId(43);
		systemData.bShow_extra_temp_4 = _checkPortletConfigByPortletTypeId(89);
		systemData.bShow_extra_temp_5 = _checkPortletConfigByPortletTypeId(90);
		systemData.bShow_extra_temp_6 = _checkPortletConfigByPortletTypeId(91);
		systemData.bShow_extra_temp_7 = _checkPortletConfigByPortletTypeId(92);
		systemData.bShow_soil_temp_1 = _checkPortletConfigByPortletTypeId(44);
		systemData.bShow_soil_temp_2 = _checkPortletConfigByPortletTypeId(45);
		systemData.bShow_soil_temp_3 = _checkPortletConfigByPortletTypeId(46);
		systemData.bShow_soil_temp_4 = _checkPortletConfigByPortletTypeId(47);
		systemData.bShow_leaf_temp_1 = _checkPortletConfigByPortletTypeId(48);
		systemData.bShow_leaf_temp_2 = _checkPortletConfigByPortletTypeId(49);
		systemData.bShow_leaf_temp_3 = _checkPortletConfigByPortletTypeId(94);
		systemData.bShow_leaf_temp_4 = _checkPortletConfigByPortletTypeId(95);
		systemData.bShow_extra_hum_1 = _checkPortletConfigByPortletTypeId(50);
		systemData.bShow_extra_hum_2 = _checkPortletConfigByPortletTypeId(51);
		systemData.bShow_extra_hum_3 = _checkPortletConfigByPortletTypeId(96);
		systemData.bShow_extra_hum_4 = _checkPortletConfigByPortletTypeId(97);
		systemData.bShow_extra_hum_5 = _checkPortletConfigByPortletTypeId(98);
		systemData.bShow_extra_hum_6 = _checkPortletConfigByPortletTypeId(99);
		systemData.bShow_extra_hum_7 = _checkPortletConfigByPortletTypeId(100);
		systemData.bShow_soil_moisture_1 = _checkPortletConfigByPortletTypeId(52);
		systemData.bShow_soil_moisture_2 = _checkPortletConfigByPortletTypeId(53);
		systemData.bShow_soil_moisture_3 = _checkPortletConfigByPortletTypeId(54);
		systemData.bShow_soil_moisture_4 = _checkPortletConfigByPortletTypeId(55);
		systemData.bShow_leaf_wetness_1 = _checkPortletConfigByPortletTypeId(56);
		systemData.bShow_leaf_wetness_2 = _checkPortletConfigByPortletTypeId(57);
		systemData.bShow_leaf_wetness_3 = _checkPortletConfigByPortletTypeId(102);
		systemData.bShow_leaf_wetness_4 = _checkPortletConfigByPortletTypeId(103);

		if (!oSystemData || !oHilow) {
			return systemData;
		}

		systemData.sBarometerUnit = wl.data.barometerData.unit;
		systemData.sRainUnit = oSystemData.rainUnits;
		systemData.sunitLabelTemperature = oSystemData.temperatureUnits;
		systemData.sSoilMoistUnit = "cb";
		systemData.sWindSpeedUnit = oSystemData.windSpeedUnits;
		systemData.sWindDirectionUnit = "&deg;";
		systemData.sSolarRadUnit = "W/m<sup>2</sup>";
		systemData.sUvIndexUnit = "Index";

		//Temp Out

		if (Utils.dashFilterCheck("d_temp_out", oSystemData.temp_out) && !
			bOutdatedData) {
			systemData.dTempOut = oSystemData.temp_out;
		}

		if (Utils.dashFilterCheck("d_temp_out_hi", oHilow.temp_out_hi) && !
			bOutdatedData) {
			systemData.dTempOutHi = oHilow.temp_out_hi;
			systemData.sTempOutHiTime = Utils.getTimeStringForSystemSummary(oHilow.temp_out_hi_time);
		}

		if (Utils.dashFilterCheck("d_temp_out_low", oHilow.temp_out_low) && !
			bOutdatedData) {
			systemData.dTempOutLow = oHilow.temp_out_low;
			systemData.sTempOutLowTime = Utils.getTimeStringForSystemSummary(oHilow.temp_out_low_time);
		}

		//Hum Out

		if (Utils.dashFilterCheck("i_hum_out", oSystemData.hum_out) && !
			bOutdatedData) {
			systemData.iHumOut = oSystemData.hum_out;
		}

		if (Utils.dashFilterCheck("i_hum_out", oHilow.hum_out_hi) && !
			bOutdatedData) {
			systemData.iHumOutHi = oHilow.hum_out_hi;
			systemData.sHumOutHiTime = Utils.getTimeStringForSystemSummary(oHilow.hum_out_hi_time);
		}

		if (Utils.dashFilterCheck("i_hum_out", oHilow.hum_out_low) && !
			bOutdatedData) {
			systemData.iHumOutLow = oHilow.hum_out_low;
			systemData.sHumOutLowTime = Utils.getTimeStringForSystemSummary(oHilow.hum_out_low_time);
		}

		//Temp In

		if (Utils.dashFilterCheck("d_temp_in", oSystemData.temp_in) && !
			bOutdatedData) {
			systemData.temp_in = oSystemData.temp_in;
			systemData.temp_in_hi = oHilow.temp_in_hi;
			systemData.temp_in_hi_time = Utils.getTimeStringForSystemSummary(oHilow.temp_in_hi_time);
			systemData.temp_in_low = oHilow.temp_in_low;
			systemData.temp_in_low_time = Utils.getTimeStringForSystemSummary(oHilow.temp_in_low_time);
		}

		//Hum In

		if (Utils.dashFilterCheck("i_hum_in", oSystemData.hum_in) && !
			bOutdatedData) {
			systemData.hum_in = oSystemData.hum_in;
			systemData.hum_in_hi = oHilow.hum_in_hi;
			systemData.hum_in_hi_time = Utils.getTimeStringForSystemSummary(oHilow.hum_in_hi_time);
			systemData.hum_in_low = oHilow.hum_in_low;
			systemData.hum_in_low_time = Utils.getTimeStringForSystemSummary(oHilow.hum_in_low_time);
		}

		//Heat Index

		if (Utils.dashFilterCheck("d_heat_index_out", oSystemData.temp_heat) && !
			bOutdatedData) {
			systemData.dHeatIndex = oSystemData.temp_heat;
		}

		if (Utils.dashFilterCheck("d_heat_index_out", oHilow.heat_hi) && !
			bOutdatedData) {
			systemData.dHeatIndexHi = oHilow.heat_hi;
			systemData.sHeatIndexHiTime = Utils.getTimeStringForSystemSummary(oHilow.heat_hi_time);
		}

		//THSW Index

		if (Utils.dashFilterCheck("d_temp_out", oSystemData.thswIndex) && !
			bOutdatedData) {
			systemData.dThswIndex = oSystemData.thswIndex;
		}

		//THW Index

		if (Utils.dashFilterCheck("d_temp_out", oSystemData.thwIndex) && !
			bOutdatedData) {
			systemData.dThwIndex = oSystemData.thwIndex;
		}

		//Wind Chill

		if (Utils.dashFilterCheck("d_wind_chill", oSystemData.temp_chill) && !
			bOutdatedData) {
			systemData.dWindChill = oSystemData.temp_chill;
		}

		if (Utils.dashFilterCheck("d_wind_chill", oHilow.chill_low) && !
			bOutdatedData) {
			systemData.dWindChillLow = oHilow.chill_low;
			systemData.sWindChillLowTime = Utils.getTimeStringForSystemSummary(oHilow
				.chill_low_time);
		}

		// Dew point

		if (Utils.dashFilterCheck("d_dew_pt_out", oSystemData.temp_dew)) {
			if (!bOutdatedData) {
				systemData.dDewPoint = oSystemData.temp_dew;
			}
		}

		if (Utils.dashFilterCheck("d_dew_pt_out_hi", oHilow.dew_hi) && !
			bOutdatedData) {
			systemData.dDewPointHi = oHilow.dew_hi;
			systemData.sDewPointHiTime = Utils.getTimeStringForSystemSummary(oHilow.dew_hi_time);
		}

		if (Utils.dashFilterCheck("d_dew_pt_out", oHilow.dew_low) && !
			bOutdatedData) {
			systemData.dDewPointLow = oHilow.dew_low;
			systemData.sDewPointLowTime = Utils.getTimeStringForSystemSummary(oHilow.dew_low_time);
		}

		// Wet bulb

		if (Utils.dashFilterCheck("d_wet_bulb", oSystemData.temp_wet_bulb) && !
			bOutdatedData) {
			systemData.dWetBulb = oSystemData.temp_wet_bulb;
		}

		if (Utils.dashFilterCheck("d_wet_bulb", oHilow.wet_bulb_low) && !
			bOutdatedData) {
			systemData.dWetBulbLow = oHilow.wet_bulb_low;
			systemData.sWetBulbLowTime = this.formatTime(oHilow.wet_bulb_low_time);
		}

		//Wind speed

		if (Utils.dashFilterCheck("i_wind_speed_avg", oSystemData.wind_speed) &&
			oSystemData.wind_speed > 0 &&
			!bOutdatedData) {
			systemData.dWindSpeed = oSystemData.wind_speed;
		}
		if (Utils.dashFilterCheck("i_wind_speed_hi", oHilow.wind_speed_hi) &&
			oHilow.wind_speed_hi > 0 &&
			!bOutdatedData) {
			systemData.dWindSpeedHi = oHilow.wind_speed_hi;
			systemData.sWindSpeedHiTime = Utils.getTimeStringForSystemSummary(oHilow.wind_speed_hi_time);
		}

		//Wind Direction

		systemData.iWindDirection = "";
		if (Utils.dashFilterCheck("i_wind_dir_of_prevail", oSystemData.wind_direction)) {
			if (oSystemData.wind_direction && !bOutdatedData) {
				systemData.sWindDirection = Utils.getCardinalFromDeg(oSystemData.wind_direction);
				systemData.iWindDirection = Utils.formatLoopHiLowDataDefaultDecimalPlaces(
					"wind_direction", oSystemData.wind_direction);
				systemData.bShowWindDirectionUnit = true;
			}
		}

		//Avg Wind Speed

		if (Utils.dashFilterCheck("i_wind_speed_avg", oSystemData.iWindSpeed2Min) &&
			oSystemData.iWindSpeed2Min > 0 &&
			!bOutdatedData) {
			systemData.iWindSpeed2Min = oSystemData.iWindSpeed2Min;
		}
		if (Utils.dashFilterCheck("i_wind_speed_avg", oSystemData.iWindSpeed10Min) &&
			oSystemData.iWindSpeed10Min > 0 &&
			!bOutdatedData) {
			systemData.iWindSpeed10Min = oSystemData.iWindSpeed10Min;
		}

		//Wind Gust Speed

		if (Utils.dashFilterCheck("i_wind_speed_avg", oSystemData.iWindGust10Min) &&
			oSystemData.iWindGust10Min > 0 &&
			!bOutdatedData) {
			systemData.iWindGust10Min = oSystemData.iWindGust10Min;
		}

		// Rain

		systemData.sRainRateUnit = "";
		if (!bOutdatedData) {
			systemData.dRain1Hour = oSystemData.iRain1Hour;
		}

		if (Utils.dashFilterCheck("d_rainfall", oSystemData.rain_rate) || Utils.dashFilterCheck(
				"d_rainfall", oSystemData.rain_storm) || Utils.dashFilterCheck(
				"d_rainfall", oSystemData.rain_day) || Utils.dashFilterCheck(
				"d_rainfall", oSystemData.rain_month) || Utils.dashFilterCheck(
				"d_rainfall", oSystemData.rain_year)) {
			if (!bOutdatedData) {
				systemData.dRainRate = oSystemData.rain_rate;
				systemData.dRainStorm = oSystemData.rain_storm;
				systemData.dRainDay = oSystemData.rain_day;
				systemData.sRainRateUnit = "/h";
			}
			systemData.dRainMonth = oSystemData.rain_month;
			systemData.dRainYear = oSystemData.rain_year;
		}

		// Solar Radiation

		if (Utils.dashFilterCheck("i_solar_rad_avg", oSystemData.solar_rad) && !
			bOutdatedData) {
			systemData.iSolarRad = oSystemData.solar_rad;
			systemData.iSolarRadHi = oHilow.solar_rad_hi;
			systemData.sSolarRadHiTime = Utils.getTimeStringForSystemSummary(oHilow.solar_rad_hi_time);
		}

		if (Utils.dashFilterCheck("i_solar_rad_avg", oHilow.solar_rad_hi) && !
			bOutdatedData) {
			systemData.iSolarRadHi = oHilow.solar_rad_hi;
			systemData.sSolarRadHiTime = Utils.getTimeStringForSystemSummary(oHilow.solar_rad_hi_time);
		}

		// ET

		if (Utils.dashFilterCheck("d_et", oSystemData.et_day) || Utils.dashFilterCheck(
				"d_et", oSystemData.et_month) || Utils.dashFilterCheck("d_et",
				oSystemData.et_year)) {
			if (!bOutdatedData) {
				systemData.dEtDay = oSystemData.et_day;
			}
			systemData.dEtMonth = oSystemData.et_month;
			systemData.dEtYear = oSystemData.et_year;
		}

		// UV Index

		if (Utils.dashFilterCheck("d_uv_index_avg", oSystemData.uv) && !
			bOutdatedData) {
			systemData.dUvIndex = oSystemData.uv;
		}

		if (Utils.dashFilterCheck("d_uv_index_avg", oHilow.uv_hi) && !
			bOutdatedData) {
			systemData.dUvIndexHi = oHilow.uv_hi;
			systemData.sUvIndexHiTime = Utils.getTimeStringForSystemSummary(oHilow.uv_hi_time);
		}

		/**
		 * EXTRA SENSORS
		 */

		if (Utils.dashFilterCheck("d_temp_extra", oSystemData.extraTemp1) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp1_day_high) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp1_day_low) && !
			bOutdatedData) {
			systemData.extra_temp_1.current = oSystemData.extraTemp1;
			systemData.extra_temp_1.high = oHilow.extra_temp1_day_high;
			systemData.extra_temp_1.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp1_day_high_time);
			systemData.extra_temp_1.low = oHilow.extra_temp1_day_low;
			systemData.extra_temp_1.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp1_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_extra", oSystemData.extraTemp2) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp2_day_high) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp2_day_low) && !
			bOutdatedData) {
			systemData.extra_temp_2.current = oSystemData.extraTemp2;
			systemData.extra_temp_2.high = oHilow.extra_temp2_day_high;
			systemData.extra_temp_2.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp2_day_high_time);
			systemData.extra_temp_2.low = oHilow.extra_temp2_day_low;
			systemData.extra_temp_2.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp2_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_extra", oSystemData.extraTemp3) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp3_day_high) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp3_day_low) && !
			bOutdatedData) {
			systemData.extra_temp_3.current = oSystemData.extraTemp3;
			systemData.extra_temp_3.high = oHilow.extra_temp3_day_high;
			systemData.extra_temp_3.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp3_day_high_time);
			systemData.extra_temp_3.low = oHilow.extra_temp3_day_low;
			systemData.extra_temp_3.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp3_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_extra", oSystemData.extraTemp4) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp4_day_high) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp4_day_low) && !
			bOutdatedData) {
			systemData.extra_temp_4.current = oSystemData.extraTemp4;
			systemData.extra_temp_4.high = oHilow.extra_temp4_day_high;
			systemData.extra_temp_4.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp4_day_high_time);
			systemData.extra_temp_4.low = oHilow.extra_temp4_day_low;
			systemData.extra_temp_4.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp4_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_extra", oSystemData.extraTemp5) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp5_day_high) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp5_day_low) && !
			bOutdatedData) {
			systemData.extra_temp_5.current = oSystemData.extraTemp5;
			systemData.extra_temp_5.high = oHilow.extra_temp5_day_high;
			systemData.extra_temp_5.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp5_day_high_time);
			systemData.extra_temp_5.low = oHilow.extra_temp5_day_low;
			systemData.extra_temp_5.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp5_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_extra", oSystemData.extraTemp6) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp6_day_high) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp6_day_low) && !
			bOutdatedData) {
			systemData.extra_temp_6.current = oSystemData.extraTemp6;
			systemData.extra_temp_6.high = oHilow.extra_temp6_day_high;
			systemData.extra_temp_6.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp6_day_high_time);
			systemData.extra_temp_6.low = oHilow.extra_temp6_day_low;
			systemData.extra_temp_6.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp6_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_extra", oSystemData.extraTemp7) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp7_day_high) &&
			Utils.dashFilterCheck("d_temp_extra", oHilow.extra_temp7_day_low) && !
			bOutdatedData) {
			systemData.extra_temp_7.current = oSystemData.extraTemp7;
			systemData.extra_temp_7.high = oHilow.extra_temp7_day_high;
			systemData.extra_temp_7.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp7_day_high_time);
			systemData.extra_temp_7.low = oHilow.extra_temp7_day_low;
			systemData.extra_temp_7.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_temp7_day_low_time);
		}


		if (Utils.dashFilterCheck("d_temp_soil", oSystemData.soilTemp1) &&
			Utils.dashFilterCheck("d_temp_soil", oHilow.soil_temp1_day_high) &&
			Utils.dashFilterCheck("d_temp_soil", oHilow.soil_temp1_day_low) && !
			bOutdatedData) {
			systemData.soil_temp_1.current = oSystemData.soilTemp1;
			systemData.soil_temp_1.high = oHilow.soil_temp1_day_high;
			systemData.soil_temp_1.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_temp1_day_high_time);
			systemData.soil_temp_1.low = oHilow.soil_temp1_day_low;
			systemData.soil_temp_1.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_temp1_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_soil", oSystemData.soilTemp2) &&
			Utils.dashFilterCheck("d_temp_soil", oHilow.soil_temp2_day_high) &&
			Utils.dashFilterCheck("d_temp_soil", oHilow.soil_temp2_day_low) && !
			bOutdatedData) {
			systemData.soil_temp_2.current = oSystemData.soilTemp2;
			systemData.soil_temp_2.high = oHilow.soil_temp2_day_high;
			systemData.soil_temp_2.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_temp2_day_high_time);
			systemData.soil_temp_2.low = oHilow.soil_temp2_day_low;
			systemData.soil_temp_2.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_temp2_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_soil", oSystemData.soilTemp3) &&
			Utils.dashFilterCheck("d_temp_soil", oHilow.soil_temp3_day_high) &&
			Utils.dashFilterCheck("d_temp_soil", oHilow.soil_temp3_day_low) && !
			bOutdatedData) {
			systemData.soil_temp_3.current = oSystemData.soilTemp3;
			systemData.soil_temp_3.high = oHilow.soil_temp3_day_high;
			systemData.soil_temp_3.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_temp3_day_high_time);
			systemData.soil_temp_3.low = oHilow.soil_temp3_day_low;
			systemData.soil_temp_3.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_temp3_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_soil", oSystemData.soilTemp4) &&
			Utils.dashFilterCheck("d_temp_soil", oHilow.soil_temp4_day_high) &&
			Utils.dashFilterCheck("d_temp_soil", oHilow.soil_temp4_day_low) && !
			bOutdatedData) {
			systemData.soil_temp_4.current = oSystemData.soilTemp4;
			systemData.soil_temp_4.high = oHilow.soil_temp4_day_high;
			systemData.soil_temp_4.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_temp4_day_high_time);
			systemData.soil_temp_4.low = oHilow.soil_temp4_day_low;
			systemData.soil_temp_4.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_temp4_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_leaf", oSystemData.leafTemp1) &&
			Utils.dashFilterCheck("d_temp_leaf", oHilow.leaf_temp1_day_high) &&
			Utils.dashFilterCheck("d_temp_leaf", oHilow.leaf_temp1_day_low) && !
			bOutdatedData) {
			systemData.leaf_temp_1.current = oSystemData.leafTemp1;
			systemData.leaf_temp_1.high = oHilow.leaf_temp1_day_high;
			systemData.leaf_temp_1.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_temp1_day_high_time);
			systemData.leaf_temp_1.low = oHilow.leaf_temp1_day_low;
			systemData.leaf_temp_1.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_temp1_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_leaf", oSystemData.leafTemp2) &&
			Utils.dashFilterCheck("d_temp_leaf", oHilow.leaf_temp2_day_high) &&
			Utils.dashFilterCheck("d_temp_leaf", oHilow.leaf_temp2_day_low) && !
			bOutdatedData) {
			systemData.leaf_temp_2.current = oSystemData.leafTemp2;
			systemData.leaf_temp_2.high = oHilow.leaf_temp2_day_high;
			systemData.leaf_temp_2.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_temp2_day_high_time);
			systemData.leaf_temp_2.low = oHilow.leaf_temp2_day_low;
			systemData.leaf_temp_2.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_temp2_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_leaf", oSystemData.leafTemp3) &&
			Utils.dashFilterCheck("d_temp_leaf", oHilow.leaf_temp3_day_high) &&
			Utils.dashFilterCheck("d_temp_leaf", oHilow.leaf_temp3_day_low) && !
			bOutdatedData) {
			systemData.leaf_temp_3.current = oSystemData.leafTemp3;
			systemData.leaf_temp_3.high = oHilow.leaf_temp3_day_high;
			systemData.leaf_temp_3.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_temp3_day_high_time);
			systemData.leaf_temp_3.low = oHilow.leaf_temp3_day_low;
			systemData.leaf_temp_3.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_temp3_day_low_time);
		}

		if (Utils.dashFilterCheck("d_temp_leaf", oSystemData.leafTemp4) &&
			Utils.dashFilterCheck("d_temp_leaf", oHilow.leaf_temp4_day_high) &&
			Utils.dashFilterCheck("d_temp_leaf", oHilow.leaf_temp4_day_low) && !
			bOutdatedData) {
			systemData.leaf_temp_4.current = oSystemData.leafTemp4;
			systemData.leaf_temp_4.high = oHilow.leaf_temp4_day_high;
			systemData.leaf_temp_4.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_temp4_day_high_time);
			systemData.leaf_temp_4.low = oHilow.leaf_temp4_day_low;
			systemData.leaf_temp_4.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_temp4_day_low_time);
		}

		if (Utils.dashFilterCheck("i_hum_extra", oSystemData.extraHum1) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum1_day_high) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum1_day_low) && !
			bOutdatedData) {
			systemData.extra_hum_1.current = oSystemData.extraHum1;
			systemData.extra_hum_1.high = oHilow.extra_hum1_day_high;
			systemData.extra_hum_1.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum1_day_high_time);
			systemData.extra_hum_1.low = oHilow.extra_hum1_day_low;
			systemData.extra_hum_1.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum1_day_low_time);
		}

		if (Utils.dashFilterCheck("i_hum_extra", oSystemData.extraHum2) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum2_day_high) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum2_day_low) && !
			bOutdatedData) {
			systemData.extra_hum_2.current = oSystemData.extraHum2;
			systemData.extra_hum_2.high = oHilow.extra_hum2_day_high;
			systemData.extra_hum_2.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum2_day_high_time);
			systemData.extra_hum_2.low = oHilow.extra_hum2_day_low;
			systemData.extra_hum_2.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum2_day_low_time);
		}

		if (Utils.dashFilterCheck("i_hum_extra", oSystemData.extraHum3) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum3_day_high) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum3_day_low) && !
			bOutdatedData) {
			systemData.extra_hum_3.current = oSystemData.extraHum3;
			systemData.extra_hum_3.high = oHilow.extra_hum3_day_high;
			systemData.extra_hum_3.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum3_day_high_time);
			systemData.extra_hum_3.low = oHilow.extra_hum3_day_low;
			systemData.extra_hum_3.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum3_day_low_time);
		}

		if (Utils.dashFilterCheck("i_hum_extra", oSystemData.extraHum4) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum4_day_high) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum4_day_low) && !
			bOutdatedData) {
			systemData.extra_hum_4.current = oSystemData.extraHum4;
			systemData.extra_hum_4.high = oHilow.extra_hum4_day_high;
			systemData.extra_hum_4.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum4_day_high_time);
			systemData.extra_hum_4.low = oHilow.extra_hum4_day_low;
			systemData.extra_hum_4.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum4_day_low_time);
		}

		if (Utils.dashFilterCheck("i_hum_extra", oSystemData.extraHum5) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum5_day_high) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum5_day_low) && !
			bOutdatedData) {
			systemData.extra_hum_5.current = oSystemData.extraHum5;
			systemData.extra_hum_5.high = oHilow.extra_hum5_day_high;
			systemData.extra_hum_5.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum5_day_high_time);
			systemData.extra_hum_5.low = oHilow.extra_hum5_day_low;
			systemData.extra_hum_5.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum5_day_low_time);
		}

		if (Utils.dashFilterCheck("i_hum_extra", oSystemData.extraHum6) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum6_day_high) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum6_day_low) && !
			bOutdatedData) {
			systemData.extra_hum_6.current = oSystemData.extraHum6;
			systemData.extra_hum_6.high = oHilow.extra_hum6_day_high;
			systemData.extra_hum_6.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum6_day_high_time);
			systemData.extra_hum_6.low = oHilow.extra_hum6_day_low;
			systemData.extra_hum_6.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum6_day_low_time);
		}

		if (Utils.dashFilterCheck("i_hum_extra", oSystemData.extraHum7) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum7_day_high) &&
			Utils.dashFilterCheck("i_hum_extra", oHilow.extra_hum7_day_low) && !
			bOutdatedData) {
			systemData.extra_hum_7.current = oSystemData.extraHum7;
			systemData.extra_hum_7.high = oHilow.extra_hum7_day_high;
			systemData.extra_hum_7.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum7_day_high_time);
			systemData.extra_hum_7.low = oHilow.extra_hum7_day_low;
			systemData.extra_hum_7.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.extra_hum7_day_low_time);
		}


		if (Utils.dashFilterCheck("i_moist_soil", oSystemData.soilMoist1) &&
			Utils.dashFilterCheck("i_moist_soil", oHilow.soil_moisture1_day_high) &&
			Utils.dashFilterCheck("i_moist_soil", oHilow.soil_moisture1_day_low) && !
			bOutdatedData) {
			systemData.soil_moisture_1.current = oSystemData.soilMoist1;
			systemData.soil_moisture_1.high = oHilow.soil_moisture1_day_high;
			systemData.soil_moisture_1.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_moisture1_day_high_time);
			systemData.soil_moisture_1.low = oHilow.soil_moisture1_day_low;
			systemData.soil_moisture_1.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_moisture1_day_low_time);
		}

		if (Utils.dashFilterCheck("i_moist_soil", oSystemData.soilMoist2) &&
			Utils.dashFilterCheck("i_moist_soil", oHilow.soil_moisture2_day_high) &&
			Utils.dashFilterCheck("i_moist_soil", oHilow.soil_moisture2_day_low) && !
			bOutdatedData) {
			systemData.soil_moisture_2.current = oSystemData.soilMoist2;
			systemData.soil_moisture_2.high = oHilow.soil_moisture2_day_high;
			systemData.soil_moisture_2.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_moisture2_day_high_time);
			systemData.soil_moisture_2.low = oHilow.soil_moisture2_day_low;
			systemData.soil_moisture_2.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_moisture2_day_low_time);
		}

		if (Utils.dashFilterCheck("i_moist_soil", oSystemData.soilMoist3) &&
			Utils.dashFilterCheck("i_moist_soil", oHilow.soil_moisture3_day_high) &&
			Utils.dashFilterCheck("i_moist_soil", oHilow.soil_moisture3_day_low) && !
			bOutdatedData) {
			systemData.soil_moisture_3.current = oSystemData.soilMoist3;
			systemData.soil_moisture_3.high = oHilow.soil_moisture3_day_high;
			systemData.soil_moisture_3.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_moisture3_day_high_time);
			systemData.soil_moisture_3.low = oHilow.soil_moisture3_day_low;
			systemData.soil_moisture_3.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_moisture3_day_low_time);
		}

		if (Utils.dashFilterCheck("i_moist_soil", oSystemData.soilMoist4) &&
			Utils.dashFilterCheck("i_moist_soil", oHilow.soil_moisture4_day_high) &&
			Utils.dashFilterCheck("i_moist_soil", oHilow.soil_moisture4_day_low) && !
			bOutdatedData) {
			systemData.soil_moisture_4.current = oSystemData.soilMoist4;
			systemData.soil_moisture_4.high = oHilow.soil_moisture4_day_high;
			systemData.soil_moisture_4.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_moisture4_day_high_time);
			systemData.soil_moisture_4.low = oHilow.soil_moisture4_day_low;
			systemData.soil_moisture_4.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.soil_moisture4_day_low_time);
		}

		if (Utils.dashFilterCheck("_255", oSystemData.leafWet1) &&
			Utils.dashFilterCheck("_255", oHilow.leaf_wetness1_day_high) &&
			Utils.dashFilterCheck("_255", oHilow.leaf_wetness1_day_low) && !
			bOutdatedData) {
			systemData.leaf_wetness_1.current = oSystemData.leafWet1;
			systemData.leaf_wetness_1.high = oHilow.leaf_wetness1_day_high;
			systemData.leaf_wetness_1.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_wetness1_day_high_time);
			systemData.leaf_wetness_1.low = oHilow.leaf_wetness1_day_low;
			systemData.leaf_wetness_1.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_wetness1_day_low_time);
		}

		if (Utils.dashFilterCheck("_255", oSystemData.leafWet2) &&
			Utils.dashFilterCheck("_255", oHilow.leaf_wetness2_day_high) &&
			Utils.dashFilterCheck("_255", oHilow.leaf_wetness2_day_low) && !
			bOutdatedData) {
			systemData.leaf_wetness_2.current = oSystemData.leafWet2;
			systemData.leaf_wetness_2.high = oHilow.leaf_wetness2_day_high;
			systemData.leaf_wetness_2.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_wetness2_day_high_time);
			systemData.leaf_wetness_2.low = oHilow.leaf_wetness2_day_low;
			systemData.leaf_wetness_2.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_wetness2_day_low_time);
		}

		if (Utils.dashFilterCheck("_255", oSystemData.leafWet3) &&
			Utils.dashFilterCheck("_255", oHilow.leaf_wetness3_day_high) &&
			Utils.dashFilterCheck("_255", oHilow.leaf_wetness3_day_low) && !
			bOutdatedData) {
			systemData.leaf_wetness_3.current = oSystemData.leafWet3;
			systemData.leaf_wetness_3.high = oHilow.leaf_wetness3_day_high;
			systemData.leaf_wetness_3.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_wetness3_day_high_time);
			systemData.leaf_wetness_3.low = oHilow.leaf_wetness3_day_low;
			systemData.leaf_wetness_3.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_wetness3_day_low_time);
		}

		if (Utils.dashFilterCheck("_255", oSystemData.leafWet4) &&
			Utils.dashFilterCheck("_255", oHilow.leaf_wetness4_day_high) &&
			Utils.dashFilterCheck("_255", oHilow.leaf_wetness4_day_low) && !
			bOutdatedData) {
			systemData.leaf_wetness_4.current = oSystemData.leafWet4;
			systemData.leaf_wetness_4.high = oHilow.leaf_wetness4_day_high;
			systemData.leaf_wetness_4.high_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_wetness4_day_high_time);
			systemData.leaf_wetness_4.low = oHilow.leaf_wetness4_day_low;
			systemData.leaf_wetness_4.low_time = Utils.getTimeStringForSystemSummary(
				oHilow.leaf_wetness4_day_low_time);
		}
		return systemData;
	};


	/**
	 * get formatted soil moisture %
	 * @param value
	 * @returns formatted string
	 * @private
	 */
	this.formatSoilMoisture = function(value, unit) {
		return Utils.formatSensorReadingWithUnit('Soil Moisture ' + unit, value,
			wl.data.userAccountSetting, unit);
	}

	/**
	 * Loop through the MaiaSensorData to retrieve the requested logical sensor.
	 *
	 * @author	Kenny Sam
	 * @since	2015-09-08
	 *
	 * @param <int>	iLsid	The logical sensor id
	 *
	 * @reutrn	A Logical Sensor Json Object.
	 */
	function _getMaiaLogicalSensorByLsid(iLsid) {
		var oMatchedLogicalSensor = null;
		//Loop through all the maia sensor data to get the nodes
		_.each(wl.data.maiaSensorData, function(oNode, key1) {
			//Loop through each logical sensor in the node
			_.each(oNode.logicalSensor, function(oLogicalSensor, key2) {
				//Determine if the logical sensor is the one we are looking for.
				if (oLogicalSensor.logicalSensorId == iLsid) {
					oMatchedLogicalSensor = oLogicalSensor;
					//Add the node name to the logical sensors for use in the portlet footer.
					oMatchedLogicalSensor.nodeName = oNode.nodeName;
					return false; //Exit out of the loop.
				}
			});
			//If a mach is found, then exit out of the loop.
			if (oMatchedLogicalSensor != null) {
				return false;
			}
		});

		return oMatchedLogicalSensor;
	}

	/**
	 * Retrived the logical sensor data and then retrieve the data according to the structure type.
	 *
	 * @author	Kenny Sam
	 * @since	2015-09-20
	 *
	 * @param <int>		iLsid						The logical sensor id
	 * @param <array>	constantStructureType		The wl.constants.structureType##FieldName object
	 *
	 * @returns		An array of sensor data used by the portlet.
	 */
	this.getMaiaSensorData = function(iLsid, constantStructureType) {
		var oLogicalSensor = _getMaiaLogicalSensorByLsid(iLsid);
		var portletSensorData = [];
		//Loop through the sensor data type of the logical sensor and pick out the data needed
		//for this portlet
		if (oLogicalSensor != null) {
			_.each(oLogicalSensor.sensorDataType, function(sensorDataType) {
				_.each(constantStructureType, function(dbFieldName) {
					if (sensorDataType.dbFieldName === dbFieldName) {
						portletSensorData[dbFieldName] = sensorDataType.dataValue;
						return false; //Exit inner each loop
					}
				});
			});
		}
		return portletSensorData;
	}

	/**
	 * store max timestamp value to global variable
	 * @param timestamp
	 * @private
	 */
	function _setLatestTimestamp(timestamp) {
		if (!oMapper.latestTimestamp) {
			oMapper.latestTimestamp = 0;
		}

		oMapper.latestTimestamp = (oMapper.latestTimestamp < timestamp) ? timestamp :
			oMapper.latestTimestamp;
	}

	/**
	 * find ring depth for soil moisture sensor
	 * @param <object>	logicalSensor				The logical sensor object
	 * @param <string>	dbFieldName					field name in database
	 *
	 * @returns string
	 * 	 */
	this.getRingDepth = function(logicalSensor, dbFieldName) {
		var depth = _.get(_.find(logicalSensor.sensorDataType, {
			'dbFieldName': dbFieldName
		}), 'depth');
		var depthUnit = _.get(_.find(logicalSensor.sensorDataType, {
			'dbFieldName': dbFieldName
		}), 'depthUnit');
		if (!depth || !depthUnit) {
			return undefined;
		}
		return depth + ' ' + depthUnit;
	}

	/**
	 * find soil moisture unit label for soil moisture sensor
	 * @param <object>		logicalSensor						The logical sensor
	 * @returns string
	 * 	 */
	this.getUnitLabelMoisture = function(logicalSensor) {
		//Since all the sSoilUnit are the same for the sensorDataType, we just need the first one.
		var sensorObj = _.find(logicalSensor.sensorDataType, function(obj) {
			return obj.hasOwnProperty('sSoilUnit') && obj.sSoilUnit;
		});
		return sensorObj ? sensorObj.sSoilUnit : "";
	}

	/**
	 * find soil salinity unit label for soil moisture sensor
	 * @param <object>		logicalSensor						The logical sensor
	 * @returns string
	 * 	 */
	this.getUnitLabelSalinity = function(logicalSensor) {
		//Since all the sSoilUnit are the same for the sensorDataType, we just need the first one.
		var sensorObj = _.find(logicalSensor.sensorDataType, function(obj) {
			return obj.hasOwnProperty('sEcUnit') && obj.sEcUnit;
		});
		return sensorObj ? sensorObj.sEcUnit : "";
	}

	/**
	 * calculate and format the last transition time for flow and pressure
	 *
	 * @param transitionTs			The timestamp of last transition
	 * @private
	 */
	function _calcFormatLastTransitionTime(transitionTs) {
		var formattedLastTransitionAmount = DASH_VALUE;
		if (transitionTs) {
			//Calculate the amount of time it has been in the last transition in seconds.
			var lastTransitionAmountInSeconds = Math.floor(dayjs().utc()
				.diff(dayjs.unix(transitionTs)) / 1000);
			formattedLastTransitionAmount = Utils.formatTransitionAmountTime(
				lastTransitionAmountInSeconds);
		}

		return formattedLastTransitionAmount;
	}

	/**
	 * get portlet config based on user_portlet_settings
	 * @param iPortletTypeId - portlet type id
	 * @return object
	 * @private
	 */
	function _getPortletConfigByPortletTypeId(iPortletTypeId) {
		var oMatchedConfig = null;
		wl.data.portletConfigs.each(function(oConfig) {
			if (oConfig.get("iPortletTypeId") === iPortletTypeId) {
				oMatchedConfig = oConfig;
				return false;
			}
		});
		return oMatchedConfig;
	}

	/**
	 * check portlet config based on user_portlet_settings
	 * @param iLsid - logical sensor id
	 * @return boolean
	 * @private
	 */
	function _checkPortletConfigByLsid(iLsid) {
		var configFound = false;
		wl.data.portletConfigs.each(function(oConfig) {
			if (oConfig.get("iLogicalSensorId") === iLsid) {
				configFound = true;
				return false;
			}
		});
		return configFound;
	}

	/**
	 * check portlet config based on user_portlet_settings
	 * @param iPortletTypeId - portlet type id
	 * @return boolean
	 * @private
	 */
	function _checkPortletConfigByPortletTypeId(iPortletTypeId) {
		var configFound = false;
		wl.data.portletConfigs.each(function(oConfig) {
			if (oConfig.get("iPortletTypeId") === iPortletTypeId) {
				configFound = true;
				return false;
			}
		});
		return configFound;
	}

	/**
	 * get total rain data for given lsid
	 * @param lsid - logicalSensorId
	 * @return Array
	 * @private
	 */
	function _findTotalRainSensorData(lsid) {
		return _.find(wl.data.totalRainData, function(arr) {
			return arr.iLogicalSensorId === lsid;
		});
	}
});
