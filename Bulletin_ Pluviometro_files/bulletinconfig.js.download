/**
 * BulletinConfig module of Bulletin App
 *
 * Deals with the UI of gobal settings for the Bulletin page
 *
 * @author Nicholas Funnell <nickf@davisnet.com>
 * @since 2014-10-13
 */

wl.app.module("BulletinConfig", function (oModule, oApp) {
    oModule.addInitializer(function () {
        _updatePageHeader();
    });

    // Private Functions

    function _updatePageHeader() {
        var $div = $('.update-info');
        var $stationName = $('.station-name');

        var formatTime = wl.data.timeFormat;
        var _sHeaderFormatLong;

        if (wl.data.userAccountSetting.formatDateTypeId === 1) {
            _sHeaderFormatLong = "MMMM D, YYYY / " + formatTime;
        } else if (wl.data.userAccountSetting.formatDateTypeId === 2) {
            _sHeaderFormatLong = "D MMMM, YYYY / " + formatTime;
        }

        if (wl.app.oMapper.latestTimestamp) {
           
            //Create a dayjs object that represents the last updated device local time
            var timzoneOffsetMin = wl.data.timezoneOffset;
            var timzoneOffsetsec = timzoneOffsetMin * 60;
            // wl.app.oMapper.latestTimestamp is local device happened at time
            var lastUpdatedLocalTimestamp = wl.app.oMapper.latestTimestamp;
            // need the last upated utc time for dayjs.unix date to local
            var lastUpdatedUTCTimestamp = lastUpdatedLocalTimestamp - timzoneOffsetsec;
            var dtLastUpdatedLocal = dayjs.unix(lastUpdatedUTCTimestamp).utcOffset(timzoneOffsetMin);

            //Create a dayjs object that reflect the now device local time.
            var dtDateNowUtc = dayjs().utcOffset(timzoneOffsetMin);
            //Add the timezone offset back to get the device local now time.
            var nowDeviceLocalTimestamp = dtDateNowUtc.unix() + timzoneOffsetsec;
			
            //set current station tooltip value
            document.l10n.formatValue('last_updated_colon').then(function (value) {
                $stationName.attr('data-original-title', value + dtLastUpdatedLocal.format(_sHeaderFormatLong));
            });
            var iDiff = Math.abs(nowDeviceLocalTimestamp - lastUpdatedLocalTimestamp);
            $div.attr('data-l10n-id', 'msg_page_header');
            
            if (iDiff > wl.data.staleDataBufferSec) {
                $div.addClass("too-old");
                $div.attr('data-l10n-args', JSON.stringify({date: dtLastUpdatedLocal.format(_sHeaderFormatLong)}));
            } else {
                $div.removeClass("too-old");
                $div.attr('data-l10n-args', JSON.stringify({date: dtLastUpdatedLocal.format(_sHeaderFormatLong)}));
            }
        }
    }

    // Event Listeners

    wl.app.once('start', function () {
        _updatePageHeader();
    });

    wl.app.vent.on('data:refresh', function () {
        _updatePageHeader();
    });
});
