/**
 * Created by Narinder Gaheer on 11/01/2017.
 */
wl = wl || {};
wl.davis = wl.davis || {};
wl.davis.views = wl.davis.views || {};

wl.davis.views.ComparePlansView = Marionette.ItemView.extend({
  model: new Backbone.Model(),
  initialize: function () {
    this.model.set('companyPayingForSubscription', false);
    this.model.set('userSubscrType', wl.__bootstrap_user_subscriptionTypeId);
    this.model.set('userSubscrTermId', wl.__bootstrap_user_subscriptionTermId);
    this.model.set('lengthInMonths', 12);
    //in case the user is in account page, there is no system in context
    this.model.set('systemId', wl.systemId || wl.data?.systemId || 0);
    this.getCurrentSubscriptionLengthInMonth();
  },
  ui: {
    'mainContainer': '.subscription-info-container',
    'headers': '.compare-plans-header, .compare-plans-subheader',
    'upgradeToProPlus': '#upgradeToProPlus',
    'historical_data_tooltip': '#historical_data_tooltip',
    'bulletin_tooltip': '#bulletin_tooltip',
    'map_tooltip': '#map_tooltip',
    'chart_tooltip': '#chart_tooltip',
    'data_tooltip': '#data_tooltip',
    'mobilize_tooltip': '#mobilize_tooltip',
    'ipm_tooltip': '#ipm_tooltip',
    'pro_shares_tooltip': '#pro_shares_tooltip',
    'third_party_intervals_tooltip': '#third_party_intervals_tooltip'
  },
  template: wl.shared.tpl['comparePlans'],
  events: {
    'click .icon-close': 'hideModal',
    'click .get-started': 'hideModal',
    'click @ui.upgradeToProPlus': 'onClickUpgradeToProPlus'
  },
  onRender: function () {
    this.ui.headers.remove();
    this.ui.mainContainer.prepend(_.template(wl.shared.tpl[
      'comparePlansHeader']()));
    this.setTooltipTitles();
  },
  getCurrentSubscriptionLengthInMonth: function () {
    $.get('/accountSubscription/userSubscriptionPlansPricing', function (res) {
      if (res.data) {
        if (res.data.companyPayingForSubscription) {
          this.model.set('companyPayingForSubscription', res.data.companyPayingForSubscription);
          this.render();
        }
        if (res.data.subscriptionTypes) {
          var subscriptionType = _.find(res.data.subscriptionTypes, {
            userSubscriptionTypeId: this.model.get('userSubscrType')
          });
          var subscriptionTerms = _.get(subscriptionType, 'subscriptionTerms');
          var curLengthInMonths = _.get(_.find(subscriptionTerms, {
            iUserSubscriptionTermId: this.model.get('userSubscrTermId')
          }), 'lengthInMonths');
          if (curLengthInMonths > 12) {
            this.model.set('lengthInMonths', curLengthInMonths);
            this.render();
          }
        }
      }
    }.bind(this));
  },
  hideModal: function () {
    if (this.options.cb) {
      this.options.cb();
    } else {
      wl.app.Modal.hideModal();
    }
  },
  onClickUpgradeToProPlus: function () {
    if (wl.__bootstrap_user_subscriptionTypeId === 2) {
      window.location.href =
        "/accountSubscription/#makePayment/" + wl.data.systemId + "/0/false/ProPlus/1";
    } else {
      window.location.href =
        "/accountSubscription/#makePayment/" + wl.data.systemId + "/0/false/ProPlus";
    }
    // wl.app.shareCalls.getDeviceUpgradesAllowedCount().then(function(
    //   response) {
    //   var allowedUpgrades = response.data;
    //   if (allowedUpgrades === 1 || wl.__bootstrap_user_subscriptionTypeId === 1) {
    //     window.location.href = "/accountSubscription/#makePayment/false/ProPlus";
    //   } else {
    //     var oModalBodyView = new wl.app.oShareOptions.ContactSupportToUpgrade();
    //     var oModalFooterView = new Marionette.ItemView({
    //       template: false
    //     });
    //     wl.app.Modal.showStandardModal('', oModalBodyView,
    //       oModalFooterView, 'share-modal');
    //   }
    // }.bind(this))
  },
  setTooltipTitles: function () {
    var self = this;
    var promises = [];
    var tooltipTranslationKeys = [
      'historical_data_tooltip',
      'bulletin_tooltip',
      'map_tooltip',
      'chart_tooltip',
      'data_tooltip',
      'mobilize_tooltip',
      'ipm_tooltip',
      'pro_shares_tooltip',
      'third_party_intervals_tooltip'
    ];
    _.each(tooltipTranslationKeys, function (key) {
      var prom = document.l10n.formatValue(key);
      promises.push(prom);
    });
    Promise.all(promises).then(function (values) {
      _.forEach(values, function (value, i) {
        if (self.ui[tooltipTranslationKeys[i]]) {
          self.ui[tooltipTranslationKeys[i]].attr(
            'data-original-title',
            '<div style="text-align:left; max-width:475px; padding: 5px 15px;">' +
            values[i] + '</div>');
          self.ui[tooltipTranslationKeys[i]].tooltip();
          $('.tooltip:visible').hide();
        }
      });
    });
  },
  onShow: function () {
    $('[data-toggle="tooltip"]').tooltip();
  }
});
